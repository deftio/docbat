#!/bin/sh
':' //; exec "$(command -v nodejs || command -v node)" "$0" "$@"

//The above shebang allows running on systems whether nodejs exec is called 'node'
//or called 'nodejs' which is common on many debian systems such as Ubuntu.

//more traditional shebang would be:
//#!/usr/bin/env node

//begin actual javascript below

//packages
var version   = "0.9.0";
var bw 		  = require('bitwrench');  				// html page scripting engine
var commandLineArgs = require('command-line-args'); // command line args parse*/
var fs 		  = require('fs');
var marked    = require('marked'); 	// markdown parser & converter
const { exit } = require('process');
const puppeteer = require('puppeteer');

async function htmlStringToPdf(htmlString, outputPath) {
    const browser = await puppeteer.launch({ headless: "new"});
    const page = await browser.newPage();

    await page.setContent(htmlString, {
        waitUntil: 'networkidle0',
    });

    await page.pdf({ path: outputPath, format: 'A4' });

    await browser.close();
}

// embed libraries for syntax highlighting and mermaid
var embedLibrariesInHTML = function (embed) {
	let h = "";
	
	if (embed) { // puts all of highlight js as embedded code in the page for stand alone
		const hljs_css="./node_modules/@highlightjs/cdn-assets/styles/default.min.css";
		const hljs="./node_modules/@highlightjs/cdn-assets/highlight.min.js";
		let data = fs.readFileSync(hljs_css, {encoding:'utf8', flag:'r'});
		
		h+= bw.html({t:"style",c:data})+'\n';
		data = fs.readFileSync(hljs, {encoding:'utf8', flag:'r'});
		h+= bw.html({t:"script",c:data})+'\n';

	}
	else { // link to cdn for highlightjs support
		h += '<link rel="stylesheet" href="https://unpkg.com/@highlightjs/cdn-assets@11.7.0/styles/default.min.css">\n';
		h += '<script src="https://unpkg.com/@highlightjs/cdn-assets@11.7.0/highlight.min.js"></script>\n';
	}
	h += '<script>hljs.highlightAll();</script>\n';
	return h;
}


//options / cmd-line
var cmdLineDefinitions = [
	  { name: 'verbose'		, alias: 'v'	, type: String,   defaultValue: "true", description : "show verbose processing of output" },
	  { name: 'inputFile'	, alias: 'i' 	, type: String,   defaultValue: "", description : "input filename"},
	  { name: 'outputFile'	, alias: 'o' 	, type: String,   defaultValue: "", description: "output filename"},
	  { name: 'console' 	, alias: 'c'	, type: String,   defaultValue: "console.log" },
	  { name: 'autogen_cmt'	,  				  type: Boolean,  defaultValue: true, description: "show autogenerated message as comment in output html (default true)"},
	  { name: 'favicon'     , alias: 'f'    , type: String,   defaultValue: "", description: "path to favicon"},
	  { name: 'favicon_type',                 type: String,   defaultValue: "image/x-icon", description:"force image type for favicon link.  (default is auto detected)"},
	  { name: 'help'		, alias: 'h'	, type: Boolean,  defaultValue: false, description : "print help "},
	  { name: 'syntax_hilite' , alias: 's'	, type: Boolean,  defaultValue: true, description : "include syntax highlighting for code blocks "},
	  { name: 'stand_alone' , alias: 'l'	, type: Boolean,  defaultValue: false, description : "make page stand-alone (embed libs) "},
	  { name: 'hPadding'    ,                 type: String,   defaultValue: "10%", description : "default horizontal page margins"},
	  { name: 'pdfout'      , alias: 'p'    , type: String,   defaultValue: false, description : "write a out as a pdf file"}
	];

try {
	var cmdLineOpts  = commandLineArgs(cmdLineDefinitions);

	//console.log("cmdLineOpts ==>",cmdLineOpts);

	//these are used in the program
	var options = {
		"cons"  			: cmdLineOpts.console == "console.log" ? console.log : function(){/*todo create writable stream to file*/},
		"bodyPaddingHoriz"  : cmdLineOpts.hPadding,
		"inputFile" 		: cmdLineOpts.inputFile,
		"outputFile"		: cmdLineOpts.outputFile,
		"verbose" 			: cmdLineOpts.verbose,
		"favicon"			: cmdLineOpts.favicon == "" ? "" : bw.html(["link",{rel:"icon",type:cmdLineOpts.favicon_type, href:cmdLineOpts.favicon},""]),
		"syntax_hilite"		: cmdLineOpts.syntax_hilite ? embedLibrariesInHTML(cmdLineOpts.stand_alone) : "",
		"metacontent"		: cmdLineOpts.meta ? bw.html(["meta",cmdLineOpts.meta,""]): "",
		"autogen_cmt"		: cmdLineOpts.autogen_cmt == true ? "\n<!-- \nThis file autogenerated by docbat.js (https://npmjs.com/docbat)  \nAny manual edits may be lost.\n-->\n" : "",
		"pdfout"			: cmdLineOpts.pdfout 
	}

}
catch (e) {
	console.log("Error: " + e);
}

if (options.inputFile == "" || options.outputFile == "") {
	options.cons ("\ndocbat.js document converter\n  simple usage:\n   docbat.js -i README.md -o index.html\n  see https://github.com/deftio/docbat/ for details.\n")
	exit();
}
//now time to do the conversion
var text = "",outputhtml="",html;

try {
 		bw.getFile(options.inputFile,function(text){ 
	 	 	if (text.length > 0) {
	 			// outputhtml      = mdconverter.makeHtml(text);
				outputhtml = marked.parse(text);

		 		//Note to user... you now have html converted markdown in the HTML variable.  
		 		// if you wish to custimze the html (theme it etc) you can now do that...

		 		//begin minor formatting stuff using bitwrench to add proper header, footer etc
		 		//bitwrench can use JSON to create HTML page content
		 		var pageContent = 
		 			{
		 				t:"html",
			 				c:[
						 		{t:"head" ,
						 			c:[
						 				options.metacontent,
						 				options.favicon,
						 				options.autogen_cmt,
										options.syntax_hilite,
						    			["style","",bw.CSSSimpleStyles()+'\n'],
						    			["style","",bw.makeCSS([[".dbat",{"padding-left":options.bodyPaddingHoriz,"padding-right":options.bodyPaddingHoriz}]])+'\n'],										
										options.syntax_hilite,
						  			]
								},
								"\n",
						 		{t:"body",a:{"class":"bw-def-page-setup bw-font-sans-serif dbat"},
						 			c:[
						 				"<br><br>",
						 				outputhtml
									]
								}
						 	]
						};

				//now convert to final html format
		 		html = bw.html(pageContent);

				if (options.pdfout) {
					htmlStringToPdf(html, options.outputFile);
				}
				else {
		 			// save the final html to a file
		 			bw.saveClientFile(options.outputFile,html);
				}
		 	}
		 	else {
		 		if (options.verbose != "silent")
		 			options.cons("docbat.js err: no input text found in " + options.inputFile);
		 	}
 		});
}
catch(e) {
	if (options.verbose != "silent")
		options.cons("docbat.js err: ",e);
}

//options.cons("bw version"+bw.version().version);
options.cons("docbat.js : converting "+options.inputFile+" to " + options.outputFile);
