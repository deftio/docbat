#!/bin/sh
':' //; exec "$(command -v nodejs || command -v node)" "$0" "$@"

//The above shenbang allows running on systems whether nodejs exec is called 'node'
//or called 'nodejs' which is common on many debian systems such as Ubuntu.

//more traditional shebang would be:
//#!/usr/bin/env node

//begin actual javascript below

//packages
var version   = "0.9.0";
var showdown  = require('showdown');         		// markdown parser & converter
var bw 		  = require('bitwrench');  				// html page scripting engine
var commandLineArgs = require('command-line-args'); // command line args parser
var mdconverter = new showdown.Converter();


//options / cmd-line
var cmdLineDefinitions = [
	  { name: 'verbose'		, alias: 'v'	, type: String,   defaultValue: "true", description : "show verbose processing of output" },
	  { name: 'inputFile'	, alias: 'i' 	, type: String,   defaultValue: "README.md", description : "input filename"},
	  { name: 'outputFile'	, alias: 'o' 	, type: String,   defaultValue: "index.html", description: "output filename"},
	  { name: 'console' 	, alias: 'c'	, type: String,   defaultValue: "console.log" },
	  { name: 'autogen_cmt'	,  				  type: Boolean,  defaultValue: true, description: "show autogenerated message as comment in output html (default true)"},
	  { name: 'favicon'     , alias: 'f'    , type: String,   defaultValue: "", description: "path to favicon"},
	  { name: 'favicon_type',                 type: String,   defaultValue: "image/x-icon", description:"force image type for favicon link.  (default is auto detected)"},
	  { name: 'help'		, alias: 'h'	, type: Boolean,  defaultValue: false, description : "print help "}
	];

try {
	var cmdLineOpts  = commandLineArgs(cmdLineDefinitions);

	//console.log("cmdLineOpts ==>",cmdLineOpts);

	//these are used in the program
	var options = {
		"cons"  			: cmdLineOpts.console == "console.log" ? console.log : function(){/*todo create writable stream to file*/},
		"inputFile" 		: cmdLineOpts.inputFile,
		"outputFile"		: cmdLineOpts.outputFile,
		"verbose" 			: cmdLineOpts.verbose,
		"favicon"			: cmdLineOpts.favicon == "" ? "" : bw.html(["link",{rel:"icon",type:cmdLineOpts.favicon_type, href:cmdLineOpts.favicon},""]),
		"metacontent"		: cmdLineOpts.meta ? bw.html(["meta",cmdLineOpts.meta,""]): "",
		"autogen_cmt"	: cmdLineOpts.autogen_cmt == true ? "\n<!-- \nThis file autogenerated by mado2htm.js (https://npmjs.com/mado2htm)  \nAny manual edits may be lost.\n-->\n" : ""
	}

}
catch (e) {
	console.log("Error: " + e);
}
//console.log("process.arv ==>", process.argv)

//now time to do the conversion
var text = "",readmehtml="",html;

try {
 		bw.getFile(options.inputFile,function(text){ 
	 	 	if (text.length > 0) {
	 			readmehtml      = mdconverter.makeHtml(text);

		 		//Note to user... you now have html converted markdown in the HTML variable.  
		 		// if you wish to custimze the html (theme it etc) you can now do that...

		 		//begin minor formatting stuff using bitwrench to add proper header, footer etc
		 		//bitwrench can use JSON to create HTML page content
		 		var pageContent = 
		 			[
		 				"html", "",
			 				[
						 		["head","", 
						 			[
						 				options.metacontent,
						 				options.favicon,
						 				options.autogen_cmt,
						    			["style","",bw.CSSSimpleStyles()]
						    			
						  			]
						 		],
						 		["body",{"class":"bw-def-page-setup bw-font-sans-serif"},
						 			[
						 				"<br><br>",
						 				readmehtml
									]
						  		]
						 	]
					];

				//now convert to final html format
		 		html = bw.html(pageContent);

		 		// save the final html to a file
		 		bw.saveClientFile(options.outputFile,html);
		 	}
		 	else {
		 		if (options.verbose != "silent")
		 			options.cons("mado2htm.js err: no input text found in " + options.inputFile);
		 	}
 		});
}
catch(e) {
	if (options.verbose != "silent")
		options.cons("mado2htm.js err: ",e);
}


options.cons("mado2htm.js : converting "+options.inputFile+" to " + options.outputFile);
