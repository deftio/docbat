(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("docbat", [], factory);
	else if(typeof exports === 'object')
		exports["docbat"] = factory();
	else
		root["docbat"] = factory();
})((typeof self !== 'undefined' ? self : this), function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/docbat-lib.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/bitwrench/bitwrench.js":
/*!*********************************************!*\
  !*** ./node_modules/bitwrench/bitwrench.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n *  bitwrench.js  --- Misc Helper Functions .. \n *\t\n *  bitwrench is just a named space set of javascript helper functions useful for common web tasks and \n *  some server side js.   No rhyme or reason I just needed these items over and overgain and didn't feel\n *  like cobbling together different common libs\n *\n *  M. A. Chatterjee 2013\n *\n *\t@copy Copyright (C) <2013>  <M. A. Chatterjee>\n *  \t\n *  @author M A Chatterjee <deftio [at] deftio [dot] com>\n *\n *\tThis software is provided 'as-is', without any express or implied\n *\twarranty. In no event will the authors be held liable for any damages\n *\tarising from the use of this software.\n *\n *\tPermission is granted to anyone to use this software for any purpose,\n *\tincluding commercial applications, and to alter it and redistribute it\n *\tfreely, subject to the following restrictions:\n *\n *\t1. The origin of this software must not be misrepresented; you must not\n *\tclaim that you wrote the original software. If you use this software\n *\tin a product, an acknowledgment in the product documentation is required.\n *\n *\t2. Altered source versions must be plainly marked as such, and must not be\n *\tmisrepresented as being the original software.\n *\n *\t3. This notice may not be removed or altered from any source\n *\tdistribution.\n *\n */\t\n//JS Hint linter directives\n/*jshint -W069 */ //suppresses warning about using x.var_name vs x[\"var_name\"]\n\n //usage in browser\n//<script type=\"text/javascript\" src=\"./bitwrench.js\"></script>\n\n//usage in nodejs\n//var bw = require('./bitwrench.js')[\"bw\"];  //adds to current scope\n\n // optional polyfill for IE8 and earlier\n(function(fn){\n    /*\n    //node.textContent\n    // Source: Eli Grey @ https://eligrey.com/blog/post/textcontent-in-ie8\n    if (Object.defineProperty \n      && Object.getOwnPropertyDescriptor \n      && Object.getOwnPropertyDescriptor(Element.prototype, \"textContent\") \n      && !Object.getOwnPropertyDescriptor(Element.prototype, \"textContent\").get) {\n      (function() {\n        var innerText = Object.getOwnPropertyDescriptor(Element.prototype, \"innerText\");\n        Object.defineProperty(Element.prototype, \"textContent\",\n         // Passing innerText or innerText.get directly does not work,\n         // wrapper function is required.\n         {\n           get: function() {\n             return innerText.get.call(this);\n           },\n           set: function(s) {\n             return innerText.set.call(this, s);\n           }\n         }\n       );\n      })();\n    }\n    */\n    //Array stuff\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement  )    {\n            \"use strict\";\n            if (this == null) {\n                throw new TypeError();\n            }\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = 0;\n            if (arguments.length > 0) {\n                n = Number(arguments[1]);\n                if (n != n) { // shortcut for verifying if it's NaN\n                    n = 0;\n                } else if (n != 0 && n != Infinity && n != -Infinity) {\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n            }\n            if (n >= len) {\n                return -1;\n            }\n            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n            for (; k < len; k++) {\n                if (k in t && t[k] === searchElement) {\n                    return k;\n                }\n            }\n            return -1;\n        };\n    }\n    if (!fn.map) fn.map=function(f){var r=[];for(var i=0;i<this.length;i++)r.push(f(this[i]));return r;};\n    if (!fn.filter) fn.filter=function(f){var r=[];for(var i=0;i<this.length;i++)if(f(this[i]))r.push(this[i]);return r;};\n    if (!String.prototype.trim) {String.prototype.trim = function () {  return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, \"\"); };}\n\n})(Array.prototype);\n// * /\n\n(function (root, factory) {\n    if (true) { // eslint-disable-line no-undef\n        // AMD. Register as an anonymous module.\n        //define(['myRequiredDependancyModule'], factory); // use this if other modules required\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // eslint-disable-line no-undef\n    } else { var libx, lib; }\n}(typeof self !== \"undefined\" ? self : this, function () { // note if needing requirements use ... (typeof self !== \"undefined\" ? self : this, function (myRequiredDependancyModule) \n    // Use b in some fashion.\n\n    // Just return a value to define the module export.\n    // This example returns an object, but the module\n    // can return a function as the exported value.\n    var bw = {};\n    bw.exportName = \"bw\"; // \n//(function(bw){ old way\n\n\"use strict\";\n\n//deprated attributes / names\nbw.depAttr = [];\n\n// ===================================================================================\nbw.choice    = function (x,choices,def) { \n/** \nbw.choice(x,choices-dictionary, default) \n\nAllows a dictionary to be used as a switch statement, including functions.\n\nexample:\n    colors = {\"red\": 1, \"blue\": 2};\n    bw.choice(\"red\",colors,\"0\")   ==> \"1\"\n    bw.choice(\"shiny\",colors,\"0\") ==> \"0\"\n */\n    return (x in choices) ? choices[x] : def;\n};   \n\n\n// ===================================================================================\nbw.jsonClone = function (x)       {\n/** \nbw.jsonClone(object)\n\ncrude deep copy by value of an object as long as no js dates or functions\n */\n    return JSON.decode(JSON.encode(x));\n};\n\n\n// ===================================================================================\nbw.typeOf    = function (x, baseTypeOnly)       {\n/** \nbw.typeOf(x, baseTypeOnly) returns a useful typeOf the object.\n\nbw.typeOf(2) // \"number\"\nbw.typeof( function(){}) // \"function\"\n\nfunction Car(make, model, year) {\n    this.make = make;\n    this.model = model;\n    this.year = year;\n}\n\nx = new Car(\"Ford\", \"Escape\", 2009);\n\nbw.typeOf(Car)      // \"function\"\nbw.typeOf(x)        // \"Car\"        ---> returns correct object type\nbw.typeOf(x,true)   // \"object\"     ---> returns base object type \n\n */\n\n//A useable typeof operator.  See this fantastic reference for a starter \n//https://javascriptweblog.wordpress.com/2011/08/08/fixing-the-javascript-typeof-operator/\n\n    if (x === null)\n        return \"null\";\n\n    var y = (typeof x == \"undefined\") ? \"undefined\" : (({ /*empty*/}).toString.call(x).match(/\\s([a-zA-Z]+)/)[1].toLocaleLowerCase());\n\n    if ((y != \"object\") && (y != \"function\"))\n        return y;\n    if (baseTypeOnly == true) // so if undefind or anything but true\n       return y; \n\n    var r = y;\n    try {\n        r =  (x.constructor.name.toLocaleLowerCase() == y.toLocaleLowerCase()) ?  y : x.constructor.name;  // return object's name e.g.\n    }\n    catch (e) {/*empty*/}\n    return r;\n};\n\nvar _to = bw.typeOf;\nbw.to   = bw.typeOf;\n//===============================================\n// internally used type check and assign function\nbw.typeAssign = function (a, typeString, trueValue, falseValue) {\n/** \nbw.typeAssign(variable, typeString, trueValue, falseValue) \ntypeAssign is used to see if the argument a is of type typeString as defined by bw.typeOf().\nif it is then trueValue is returned else falseValue.\n\nbw.typeAssign(\"23\",\"number\",\"is a number!\", \"not a number!\") ==> \"is a number!\"\nbw.typeAssign([23],\"number\",\"is a number!\", \"not a number!\") ==> \"not a number!\" // is an array of length 1\n\ncan also supply list of types\nbw.typeAssign(23,[\"string\",\"number\"], \"string or num\", \"something else\") ==> \"string or num\"\nbw.typeAssign(true,[\"string\",\"number\"], \"string or num\", \"something else\") ==> \"something else\"\n */\n    if (_to(typeString) == \"string\")\n        typeString = [typeString];\n    \n    return (typeString.indexOf(bw.typeOf(a)) >= 0) ? trueValue : falseValue;\n};\n\nvar _toa = bw.typeAssign;\nbw.toa   = bw.typeAssign;  // eslint-disable-line no-unused-vars\n\n\n//===============================================\n// internally used type check and assign function with functional support (trueValue or falseValue can be functions which are passed the param a)\n\nbw.typeConvert = function (a, typeString, trueValue, falseValue) {\n/**\nbw.typeConvert(variable, typeString, trueValue, falseValue) \ntypeConvert is used to see if the argument a is of type typeString as defined by bw.typeOf().\nif it is then trueValue is returned else falseValue.\n\nbw.typeConvert(\"23\",\"number\",\"is a number!\", \"not a number!\") ==> \"is a number!\"\nbw.typeConvert([23],\"number\",\"is a number!\", \"not a number!\") ==> \"not a number!\" // is an array of length 1\n\ncan also supply list of types\nbw.typeConvert(23,[\"string\",\"number\"], \"string or num\", \"something else\") ==> \"string or num\"\nbw.typeConvert(true,[\"string\",\"number\"], \"string or num\", \"something else\") ==> \"something else\"\n\nhowever typeConvert also allows functions (as apposed to typeAssign)\n*/\n    if (_to(typeString) == \"string\")\n        typeString = [typeString];\n      \n    trueValue  = _to(trueValue)  == \"function\" ? function(a){return trueValue(a); } : trueValue;\n    falseValue = _to(falseValue) == \"function\" ? function(a){return falseValue(a);} : falseValue;\n\n    return (typeString.indexOf(bw.typeOf(a)) >= 0) ? trueValue : falseValue;\n};\n//var   _tc = bw.typeConvert;\nbw.tc = bw.typeConvert;\n//===============================================\n// internally used function for options copy\nvar optsCopy = function(dopts,opts) {\n    if ((_to(opts) == \"object\") && (_to(dopts)==\"object\")) {\n        var i;\n        for (i in opts)\n            dopts[i] = opts[i];\n    }\n    return dopts;\n};\n// ===================================================================================\n\nbw.arrayUniq =  function (x){\n/** \n    arrayUniq(x)\n    returns uniq elements of simple array x.\n*/    \n    if (_to(x) != \"array\")\n        return [];\n    return x.filter (function (v, i, arr) {return (arr.indexOf(v)==i);});\n};\n// ===================================================================================\nbw.arrayBinA = function (a,b) {\n/** \n    arrayBinA(x)\n    returns intersection elements of to simple arrays a and b\n*/      \n    return bw.arrayUniq(a.filter(function(n) { return b.indexOf(n) !== -1;}));\n};\n\nbw.arrayBNotInA = function (a,b) {\n/** \n    arrayBNotinA(x)\n    returns  elements of b not present in a\n*/      \n    return bw.arrayUniq(b.filter(function(n) { return a.indexOf(n) < 0;}));\n};\n\n//===============================================\n\nbw.DOMIsElement = function(el) {\n/**\n@method bw.DOMIsElement() - returns whether a supplied element is a HTML DOM element. only useful in browser,\n */    var r = false;\n    try {\n        if(_to(el)== \"undefined\")\n            return r;\n        if (bw.isNodeJS() == false)\n            r = el instanceof Element;  \n\n    } \n    catch(e) {\n        r = (typeof HTMLElement === \"object\" ? el instanceof HTMLElement : //DOM2\n            el && (typeof el === \"object\") && (el !== null) && (el.nodeType === 1) && (typeof el.nodeName===\"string\")\n        );\n        bw.logd(e.toString());\n    }\n    return r;\n};\n\nvar _isEl = bw.DOMIsElement;\n//===============================================\nbw.DOMGetElements = function (el, type) {\n/**\n@method DOMGetElements(el, type) returns an array of DOM elements (if running in browser)   \n\n@param {string | DOM_node} el - if string uses CSS selector other wise if DOM element returns itself\n@return an js array of zero or more matching DOM nodes\n\n\n*/\n\n/*\nTODO: \n var container = document.querySelector(\"#test\");\n var matches = container.querySelectorAll(\"div.highlighted > p\");\n\n*/\n    var r=[],a=[],i;\n\n    if (bw.isNodeJS() == false) {  // we're running in a browser\n        if (_isEl(el))\n            return [el];  \n        if (_to(el) == \"string\") { // now its a string so we have choices.. \n            type = _toa(type,\"string\",type,\"auto\"); // auto means detect whether has a # or . in front of it\n            el.trim();\n            if (type == \"auto\")\n                type = bw.choice(el[0],{\".\":\"className\", \"#\":\"id\"},\"tagName\");\n            switch (type) {\n                case \"id\" : //get Element by ID\n                    el = (el[0]==\"#\") ? el.substring(1,el.length) : el;\n                    a = document.getElementById(el);\n                    a = _toa(a,\"null\",[],[a]);\n                    break;\n                case \"className\": // get Elements by class name\n                    el = (el[0]==\".\") ? el.substring(1,el.length) : el;\n                    a = document.getElementsByClassName(el);\n                    break;\n                case \"tagName\" : // get Elements by tag name\n                    a = document.getElementsByTagName(el);\n                    break;\n                case \"name\":\n                    a = document.getElementsByName(el);\n                    break;\n                case \"CSS\" :\n                    a = document.querySelectorAll(el);\n                    break;\n                default:  \n                    a = document.querySelectorAll(el);\n\n            }\n            for (i in a)\n                r.push(a[i]);\n        }\n    }\n\n    return r.filter(function(x){return bw.DOMIsElement(x);});\n};\n//var _els = bw.DOMGetElements;\n\n// =============================================================================================\nbw.DOMSetElements = function(domElement,param) {\n/**\n@method DOMSetElements(domElement, param) sets DOM elements with the supplied (optional) params \n\n@param {string | array | dict |function} - params to set on DOMElements\n@return an js array of zero or more matching DOM nodes\n*/\n\n    var els = bw.DOMGetElements(domElement);\n    if (els==[])\n        bw.log(\"dom element not found\");\n\n    \n    var i,l,e, ef = function(x,p){bw.log(x,p);};\n    for (l=0; l<els.length; l++) {\n        e = els[l];\n        switch(bw.typeOf(param)) {\n            case \"array\":\n                try{\n                    for (i=0; i<param.length; i++) e[param[i][0]] = param[i][1];\n                }\n                catch(d) {ef(d,param);}\n                break;\n            case \"object\":\n                try {\n                    for (i in param)  e[i] = param[i];\n                }\n                catch(d) {ef(d,param);}\n                break;\n            case \"string\":\n                try {\n                    e.innerHTML = param;\n                }\n                catch(d) {ef(d,param);}\n                break;\n            case \"function\":\n                try {\n                    param(e); // apply a function to e\n                }\n                catch(d) {ef(d,param);}\n                break;\n            default: break;\n        }\n    }\n\n    return els;\n};\n\nbw.DOM = bw.DOMSetElements;\n\n// =============================================================================================\n/** \nbitwrench: color functions (used for theming and interpolations)\n\nbitwrench functons operate using this internal color representation model:\n[c0, c1, c2, alpha, model]  \nwhere c0, c1, c2 are model dependant\nalpha represents the transperancy\nmodel is a color model string (lowercase) rgb, or hsl (compatible with HTML/CSS colors)\n\ncolorParse() ==> take an input color of anymodel and output a bw [c0,c1,c2,a,m] array\n*/\nbw.colorInterp = function(x, in0, in1, colors, stretch) {\n/**\n@method colorInterp (x, lo, hi, colors[], stretch) - interpolate between and array of colors.  \n    x is a value between in0, in1\n    colors is an array of colors supplied in rgb format e.g. [\"#123\", \"#234\"]\n    colors can be anylength \n*/\n    var c = _toa(colors,\"array\",colors,[\"#000\",\"#fff\"]); // make sure we have an array of colors\n    c = c.length == 0 ? [\"#000\",\"#fff\"] : c; // no colors provide .. interp grayscale is default\n    if (c.length == 1)\n        return c[0];\n    //ok now we we have an array of atleast length 2 which hopefully contains colors.\n    c = c.map(function(x){return bw.colorParse(x);}); // all colors will now be converted to bw RGB format\n    var a = bw.mapScale(x,in0,in1,0,c.length-1,{clip: true, expScale: stretch});\n    var i = bw.clip(Math.floor(a),0,c.length-2);\n    var r = a-i;\n    var _f = function(x)  {return bw.mapScale(r,0,1, c[i][x],c[i+1][x],{clip:true});};\n    return [_f(0), _f(1), _f(2),_f(3),\"rgb\"];\n\n};\n\n\n// =============================================================================================\nbw.colorHslToRgb = function (h, s, l, a){\n/**\n@method colorHslToRgb\nConverts an HSL color value to RGB. Conversion formula\nadapted from http://en.wikipedia.org/wiki/HSL_color_space.\nAssumes h, s, and l are contained in the set [0, 1].  Note to convert h from degrees use (h_degrees/360)\nreturns r, g, and b in the set [0, 255].\n\n@param   {number}  h       The hue [0..1]\n@param   {number}  s       The saturation [0..1]\n@param   {number}  l       The lightness [0..1]\n@return  {Array}           The RGB representation\n\nhttps://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion\n */    \n    var r, g, b;\n\n    if(s == 0){\n        r = g = b = l; // achromatic\n    }else{\n        var hue2rgb = function (p, q, t){\n            if(t < 0) t += 1;\n            if(t > 1) t -= 1;\n            if(t < 1/6) return p + (q - p) * 6 * t;\n            if(t < 1/2) return q;\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n            return p;\n        };\n\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n    var _fn = function(x){return bw.clip(Math.round(x),0,255);};\n    return [_fn(r), _fn(g), _fn(b), a, \"rgb\"];\n};\n\n// =============================================================================================\nbw.colorRgbToHsl = function (r, g, b, a) {\n/**\nConverts an RGB color value to HSL. Conversion formula\nadapted from http://en.wikipedia.org/wiki/HSL_color_space.\nAssumes r, g, and b are contained in the set [0, 255] and\nreturns h, s, and l in the set [0, 1].\n\n@param   {number}  r       The red color value\n@param   {number}  g       The green color value\n@param   {number}  b       The blue color value\n@return  {Array}           The HSL representation\n*/\n    r /= 255, g /= 255, b /= 255;\n    var max = Math.max(r, g, b), min = Math.min(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min){\n        h = s = 0; // achromatic\n    }else{\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max){\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return [h, s, l, a, \"hsl\"];\n};    \n\n// =============================================================================================\n\nbw.colorParse = function(s,defAlpha) {\n/**\n@method bw.colorParse(s)\n\n@description take a valid CSS style color string: #rgb | #rgba | #rrggbb | #rrggbbaa | rgb(r,g,b) | rgb(r,g,b,a) | hsl(h,s,l) | hsla(h,s,l,a )  ... and return array [c0,c1,c2,a,model] where model is one of rgb, hsl\n*/\n    defAlpha = _toa(defAlpha,\"number\",defAlpha,255);\n    var r = [0,0,0,defAlpha,\"rgb\"]; // always return a valid type \n    if ((_to(s)==\"array\")&&(s.length==5)){ // it could be a bwcolor type [c0,c1,c2,a,model]\n        s= String(s[4])+\"(\"+String(s[0])+\",\"+String(s[1])+\",\"+String(s[2])+\",\"+String(s[3])+\")\"; //could use slice..join(\",\")\n    }\n    s = String(s).replace(/\\s/g,\"\");\n    var reT = /\\s*(#|hsl|rgb|yuv|hsv){1}([a-f|A-F|0-9|,().\\t ]*)/img;\n    var i,j=0,x = reT.exec(s);\n    if (_to(x)==\"array\" && (x.length >= 3)) {\n        r[4]= x[1] == \"#\" ? \"rgb\" : x;\n        if (x[1] ==  \"#\") {  //parse one of these #rgb #rgba #rrggbb #rrggbbaa\n            switch (x[2].length) {\n                case 3: //#rgb\n                case 4: //#rgba\n                    for (i=0; i< x[2].length; i++)\n                        r[i] = parseInt(x[2][i]+x[2][i],16);\n                    break;\n                case 6: //#rrggbb\n                case 8: //#rrggbbaa\n                    for (i=0; i< x[2].length; i+=2)\n                        r[j++] = parseInt(x[2][i]+x[2][i+1],16);\n                    break;\n                default:\n                    bw.logd(\"bw.parseColor bad input \"+ s);\n            }\n        }\n        else { // its should be of form (c0,c1,c2) or (c0,c1,c2,alpha)\n            r[4] = x[1].toLocaleLowerCase();\n            if ((x[2][0] == \"(\") && (x[2][x[2].length-1] == \")\")) { // parans are present\n                var v = x[2].substring(1,x[2].length-1);\n                v = v.split(\",\");\n                switch(v.length){ // valid entries are 3 or 4 components\n                    case 3:\n                    case 4:\n                        for (i=0; i< v.length; i++)\n                            r[i] = Number(v[i]);\n                        break;\n                    default:\n                        bw.logd(\"bw.parseColor bad input : \" + s);    \n                }\n            } else {\n                bw.logd(\"bw.parseColor bad input : \" + s);\n            }\n        }\n    }\n    return r;\n};\n\n// =============================================================================================\nbw.colorToRGBHex = function(c, format) {\n/**\n@method bw.colorToRGBHex(color) \n@description take a color of the form [c0,c1,c2,alpha,model] ==> convert to #rrggbbaa format\nformat (optional) can be set to auto in which case alpha is ommitted if set to 255\n */\n    var r = \"#00000000\";\n    var ph = function(x){var y=(bw.clip(Math.round(x),0,255)).toString(16); return (y.length==1)?\"0\"+y:y;}; // pad hex\n    if ((_to(c) == \"array\") && (c.length == 5)) {\n        switch(c[4]) {\n            case \"rgb\":\n                r = \"#\"+ph(c[0])+ph(c[1])+ph(c[2]);\n                if (!((format == \"auto\") && (c[3]==255)))\n                    r += ph(c[3]);\n                break;\n            case \"hsl\":\n                //bw.colorRgbToHsl\n                var z = bw.colorHslToRgb(c[0],c[1],c[2]);  // convert to rgb components\n                r = bw.colorToRGBHex([z[0],z[1],z[2],c[3],\"rgb\"]); // packout rgb\n                break;\n            default:\n                bw.logd(\"colorToRGBHex : unsupported format\" + c[4]);\n        }\n    }\n    return r; // default\n};\n/* simple version rgb2hex\nfunction rgbToHex(r, g, b, a) {\n    var c2r = function (c){c = bw.clip(c,0,255).toString(16); return ((c.length==1 ) ?\"0\":\"\")+c;};\n    if (typeof a == \"undefined\") { a = \"\";} else {a = c2r(a)};\n    return \"#\" + c2r(r) + c2r(g) + c2r(b) + a;\n}\n*/\n\n// =============================================================================================\nvar _logdata=[];\n\nbw.log = function (value,msg,opts) {\n/** \nbw.log(value, message, options)\nwrite a value to the in-memory log\noptions {\n    clear:  false | true | \"clear-only\"  \n        false : normal write \n        true : clear log and add 1st entry\n        clear-only - only clear don't write, value, msg \n    saveMethod: \"raw\" | \"JSON\"  // raw is default, save object as passed, JSON saves stringified version (useful for exporting or saving state)\n}\n */\n    var dopts = {\n        clear     : false,  // values fales, true, \"clear-only\"\n        saveMethod: \"raw\" // else \"JSON\" \n    };\n    \n    dopts = optsCopy(dopts,opts);\n    if ((dopts[\"clear\"] == true) || (dopts[\"clear\"] == \"clear-only\")) {\n        _logdata = [[\"Time-stamp (ms)\",\" Value \",\" Message \"]];\n        _logdata.push ([0,(new Date()).getTime(),\" log started (absolute timestamp)\"]);\n    }\n\n    msg     = _toa(msg,\"undefined\",\"\",String(msg));\n    value   = (dopts[\"saveMethod\"]==\"raw\") ? value : JSON.stringify(value);\n\n    if ((_to(value) != \"undefined\") && (dopts[\"clear\"] != \"clear-only\"))\n        _logdata.push([(new Date()).getTime()-_logdata[1][1], value, msg]);\n\n    return _logdata.length -1;\n};\nbw.log(\"\",\"\",{clear:\"clear-only\"}); // initialize \n\n// =============================================================================================\nbw.logd = function() {\n/**\n@method bw.logd() \n@description: bw.logd is a log funciton which behaves similar to console.log() however instread of outputting to console, \nit writes to bw.log() function with the following differences: \n\n\n*/\n/*\ntodo: comma seperated items;  ? done\nconsole     ==> also (attempt) to output to console.log ? would need to set a bw.state variable..\nbwdbg       ==> log bw catches / errors (else silent) \nnone        ==> no output (of any kind)\nstringify   ==> takes bw.logd args and strinigyfies before writing to bw.log\nexample:\nlogd=console,bwlogd\n\n*/\n    var logdargs =  (\"bwlogd\" in bw.bwargs) ? bw.bwargs[\"bwlogd\"].split(\",\") : [];\n\n    if (logdargs.indexOf(\"none\") < 0) {\n        var i=0;\n        var _a = [];\n        for (i=0; i< arguments.length; i++)\n            _a.push(arguments[i]); //arguments, a reserved javascript keyword, is not a true array\n        bw.log(_a,\"bw.logd: \"+bw.bwargs[\"bwlogd\"]); // message\n    }\n};\n// =============================================================================================\nbw.logExport = function(opts) {\n/** \nbw.logExport(options) \nexport the built in log.\ndefault is \"raw\" which is an array of values:\n[timestamp, <value logged>, <optional message from the event>]\n[ .. , .. , .. ]\n\nalso can be exported as an HTML table.\nbw.logExport({\"format\":\"HTML\"})\n\nor as a simple text file:\nbw.logExport(\"format\" : \"text\"})\n\nsee bw.saveClientFile(fname) for saving the log as a file\n */\n    var dopts = {\n        \"format\" : \"raw\"  // can also be HTML table if set to \"HTML\"\n    };\n    dopts = optsCopy(dopts,opts);\n\n    var _ld = _logdata;  \n\n    if (dopts[\"format\"] == \"HTML\") {\n        return bw.makeHTMLTableStr(_ld,{sortable:true});\n    }\n\n    if (dopts[\"format\"] == \"text\") {\n        return _ld.map(function(x){return x.map(function(y){return bw.padString(y.toString(),16,\"left\");}).join(\"\\t\");}).join(\"\\n\");\n    }\n\n    return _ld;\n};\n\n\n// ===================================================================================\nbw.setCookie = function (cname, cvalue, exdays) {\n/** \nbw.setCookie(cookieName, value, expireDays) \nset a client side cookie.  (browser only)\n  */\n    var d = new Date();\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\n    var expires = \"expires=\"+d.toUTCString();\n    document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n};\n \n// ===================================================================================\nbw.getCookie = function (cname, defaultValue) {\n/** \nbw.getCookie(cookieName, defaultValueIfNotFound) (browser only)\nget a client side cookie, if it is set.  returns defaultValue if cookie could not be found\n */\n    var name = cname + \"=\";\n    var ca = document.cookie.split(\";\");\n    for(var i=0; i<ca.length; i++) {\n        var c = ca[i];\n        while (c.charAt(0)==\" \") c = c.substring(1);\n        if (c.indexOf(name) == 0) return c.substring(name.length, c.length);\n    }\n    return defaultValue;\n};\n\n\n// ===================================================================================\nbw.getURLParam = function (key,defaultValue) {\n/** \nbw.getURLParam(key,defaultValueIfNotFound)\nread the URL (e.g. http://example.com/my/page?this=that&foo=123) and parse the URL paraemeters\n\nx = bw.getURLParam(\"foo\",\"whatever\") ==> returns 123\nx = bw.getURLParam(\"bar\",\"whatever\") ==> returns \"whatever\" since bar isn't set \n*/\n    var params = {};\n    if (location.search) {\n        var parts = location.search.substring(1).split(\"&\");\n        for (var i = 0; i < parts.length; i++) {\n            var nv = parts[i].split(\"=\");\n            if (!nv[0]) continue;\n            params[nv[0]] = nv[1] || true;\n        }\n    }     \n    if (params.hasOwnProperty(key) == false)\n        return defaultValue; // note if defaultValue is undefined then result is still undefined. :)\n    return params[key];\n};\n//=================================================\nbw.getURLParamDict = function (url) {\n/**\nbw.getURLParamDict(optionalString) \ndecode a URL encoded string in to a javascript dictionary\nif no string is supplied then it uses window.location.href (in browser only)\n\n */\n    if (_to(url) != \"string\") {\n        if (bw.isNodeJS() == true) {\n            return {/*empty*/};\n        }\n        else url = location.href;\n    }\n    \n    var question = url.indexOf(\"?\");\n    var hash = url.indexOf(\"#\");\n\n    if(hash==-1 && question==-1) return {};\n    if(hash==-1) hash = url.length;\n    var query = question==-1 || hash==question+1 ? url.substring(hash) : \n    url.substring(question+1,hash);\n    var result = {};\n    query.split(\"&\").forEach(function(part) {\n        if(!part) return;\n            part = part.split(\"+\").join(\" \"); // replace every + with space, regexp-free version\n            var eq = part.indexOf(\"=\");\n            var key = eq>-1 ? part.substr(0,eq) : part;\n            var val = eq>-1 ? decodeURIComponent(part.substr(eq+1)) : \"\";\n            var from = key.indexOf(\"[\");\n            if(from==-1) result[decodeURIComponent(key)] = val;\n            else {\n              var to = key.indexOf(\"]\",from);\n              var index = decodeURIComponent(key.substring(from+1,to));\n              key = decodeURIComponent(key.substring(0,from));\n              if(!result[key]) result[key] = [];\n              if(!index) result[key].push(val);\n              else result[key][index] = val;\n            }\n        });\n  return result;\n};\n\n\n//============================================\nbw.parseURLParam = function (name, url) {\nif (_to(url) != \"string\") {\n        if (bw.isNodeJS() == true)\n            {return {/*empty*/}; }\n        else url = location.href;\n    }\n    \n    var question = url.indexOf(\"?\");\n    var hash = url.indexOf(\"#\");\n\n    if(hash==-1 && question==-1) return {};\n    if(hash==-1) hash = url.length;\n    //var query = question==-1 || hash==question+1 ? url.substring(hash) : \n    url.substring(question+1,hash);\n\n    name = name.replace(/[/, '\\\\[').replace(/[\\]]/, \"\\\\]\");\n    var regex = new RegExp(\"[\\\\?&]\" + name + \"=([^&#]*)\");\n    var urlString = \"\"; // need to finish this\n    var results = regex.exec(urlString);\n    return results === null ? \"\" : decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n};\n\n// crude performance measurements\nvar gBWTime = (new Date()).getTime(); //global closure for time.  'cause we always want a gbw gbw time :)\n \n// ===================================================================================\nbw.clearTimer = function (message) {\n/** \nbw.clearTimer(\"message\")\nWhen bitwrench loads its starts a page timer which can be checked for how long the page as been running (see bw.readTimer()).  bw.clearTimer() clears the timer with optional message.\n */\n    gBWTime = (new Date()).getTime();\n    if (_to(message) != \"undefined\")\n       bw.logd(String(message));\n    return gBWTime;\n};\n \n// ===================================================================================\nbw.readTimer = function (message) {\n/** \nbw.readTimer(\"message\")\nWhen bitwrench loads its starts a page timer which can be checked for how long the page as been running.\n */\n    var ct = (new Date()).getTime();\n    if (_to(message) != \"undefined\")\n       bw.logd(String(message));\n    return ct-gBWTime; \n};\nbw.clearTimer(); //when bw is loaded, we start the timer.\n\n// ===================================================================================\nbw.htmlJSON=function (json) {\n/** \nbw.htmlJSON(object, styles) \npretty print any javascript object as displayable HTML. \ne.g.\ndocument.getElementById(\"myPlaceToDisplay\").innerHTML = bw.prettyPrintJSON(...any object ....)\n*/\n//TODO make style dict as a param\n\tfunction f(json) { \n\t\tjson = JSON.stringify(json, undefined, 2);\n\t\tif (typeof json != \"string\") { json = JSON.stringify(json, undefined, 2);}\n\t\tjson = json.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n\t\treturn json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)/g, function (match) {\n\t\t\tvar sty = \"color: darkorange;\";\n\t\t\tif (/^\"/.test(match)) {\n\t\t\t\tif (/:$/.test(match)) {\n                    sty = \"color:red\";\n\t\t\t\t} else {\n                    sty = \"color:purple\";\n\t\t\t\t}\n\t\t\t} else if (/true|false/.test(match)) {\n                sty = \"color:grey\";\n\t\t\t} else if (/null/.test(match)) {\n\t\t\t\tsty = \"color:black\";\n\t\t\t} else\n                sty = \"color:green\";\n\t\t\treturn \"<span style=\\\"\" + sty + \"\\\">\" + match + \"</span>\";\n\t\t});\n\t}\n\treturn \"<pre style=''>\"+f(json)+\"</pre>\";\n};\n\nbw.depAttr.push[\"prettyPrintJSON\"];\nbw.prettyPrintJSON = bw.htmlJSON;\n\n// ===================================================================================\nbw.getFile  = function (fname,callback_fn, options) {\n/** \nbw.getFile(filename,callback) \nAttempt to load a file.\nWorks both client side and i nodejs.\n */\n    var dops = {\n        parser : \"raw\"  // valid types are \"raw\", \"JSON\", future \"CSV\", \"TSV\" or parserFunction\n    };\n\n    dops = optsCopy(dops,options);\n\n    if (_to(fname) != \"string\") {\n        return \"invalid filename\";\n    }\n\n    var prs = (dops[\"parser\"]==\"JSON\") ? JSON.parse : function(s){return s;};\n\n\n    if (bw.isNodeJS() ==true) {\n        var fs = __webpack_require__(/*! fs */ \"fs\");\n        fs.readFile(fname, \"utf8\", function (err, data) { if (err) throw err; callback_fn(prs(data)); });\n    }\n    else // running in a browser \n    {         \n        var x = new XMLHttpRequest();\n        x.overrideMimeType(\"application/json\");\n        x.open(\"GET\", fname, true); \n        x.onreadystatechange = \n            function () {if (x.readyState == 4 && x.status == \"200\") {callback_fn(prs(x.responseText));}};\n        x.send(null);\n    }\n    return \"BW_OK\";\n};\n\nbw.getJSONFile = function (fname,callback_fn) { return bw.getFile(fname,callback_fn,{\"parser\":\"JSON\"});};\n\nbw.copyToClipboard = function(data) {\n/** \nbw.copyToClipboard\nsimple copy content to clipboard.  (browser only)\n*/\n\n/*\nvar temp = document.createElement(\"input\");\nvar b = document.getElementsByTagName(\"body\")[0];\nb.appendChild(temp);\n\ntemp.innerText = data;\ntemp.select();\ndocument.execCommand(\"copy\");\ntemp.remove();\n\n\n    \n    var temp = document.createElement(\"input\");\n    document.getElementsByTagName(\"body\")[0].append(temp);\n    temp.innerHTML = data;\n    //temp.val(data).select();\n    \n    //var temp = document.createElement(\"input\");\n    //var b = document.getElementsByTagName(\"body\")[0];\n    //b.appendChild(temp);\n    //temp.innerText = data;\n    temp.select();\n    document.execCommand(\"copy\");\n    temp.remove();\n*/\n    if (bw.isNodeJS())\n        return;\n    var  listener = function (e) {\n        e.clipboardData.setData(\"text/html\", data);\n        e.clipboardData.setData(\"text/plain\", data);\n        e.preventDefault();\n    };\n    document.addEventListener(\"copy\", listener);\n    document.execCommand(\"copy\");\n    document.removeEventListener(\"copy\", listener);\n};\n    \n// ===================================================================================\nbw.saveClientFile   = function(fname,data) {\n/** \nbw.saveClientFile(fname,data) saves data the program the client environtmnet\n    fname is filename to save as\n    data is data to save.\n\n    works both in node and browser.    \n*/\n    if (bw.isNodeJS()) {\n        var fs = __webpack_require__(/*! fs */ \"fs\");\n        fs.writeFile(fname, data, function (err) {\n                if (err) return bw.log(err);\n                bw.log(\"error saving \",fname,data);\n            });\n    }\n    else { // we're in a browser\n            \n        var saveData = (function () {\n            var a = document.createElement(\"a\");\n            document.body.appendChild(a);\n            a.style = \"display: none\";\n            return function (data, fname) {\n                var json = JSON.stringify(data),\n                    blob = new Blob([json], {type: \"octet/stream\"}),\n                    url = window.URL.createObjectURL(blob);\n                a.href = url;\n                a.download = fname;\n                a.click();\n                window.URL.revokeObjectURL(url);\n            };\n        }());\n        saveData(data,fname);\n    }\n};\n\n// ===================================================================================\nbw.setIntervalX = function (callback, delay, number_of_repetitions) {\n/** \nbw.setIntervalX(callbackFn, delayBtwCalls, repetitions)\nset a javascript timer to only run a max of N repetions.\n\nExample:\n    bw.setIntervalX(function(x){console.log(x)},100,5)\n */\n    var x = 0;\n    var intervalID = setInterval(function () {\n        callback(x);\n\n        if (++x >= number_of_repetitions) {\n                clearInterval(intervalID);\n        }\n    }, delay);\n};\n\n// ===================================================================================\nbw.repeatUntil = function (testFn, successFn, failFn, delay, maxReps, lastFn) {\n/**  \nbw.repeatUntil()\nrepeatUntil runs the supplied testFn every delay milliseconds up until a maxReps number of times.\nif the test function returns true it runs the successFn and stops the iterations.\n    then the lastFn is called with the params (true, number_of_attempts).\n    lastFn is optional.\n\nfor each time the testFn is called and fails, the failFn() is called.\n\nAfter the last rep has been completed the lastFn is called with (with the last testFn result and\nwith the current iteration).  \n\n\nlastFn is optional.  \nfailFn is optional\n\nExample:\nbw.repeatUntil( myLibsAndDataAreLoaded_fn, renderMyChart, null, 250, 10, null); // attempts to wait until mylib is loaded 10 times before giving up\n\n*/   \n    var _count = 0;\n    if (typeof testFn != \"function\")\n      return \"err\";\n    if (typeof delay != \"number\")\n      delay = 250;  // 250ms\n    if (typeof maxReps != \"number\")\n      maxReps = 1; // run 1 time.\n\n    var _testFn = testFn;\n    var _successFn = (typeof successFn == \"function\") ? successFn : function () {};\n    var _failFn = (typeof failFn == \"function\") ? failFn : function () {};\n    var _lastFn = (typeof lastFn == \"function\") ? lastFn : function () {};\n\n    var _f = function () {\n    var success = _testFn();\n        if (true == success) {\n            _successFn();\n            _lastFn(true, _count);\n        }\n        else {\n            _failFn();\n        \n            if (_count >= maxReps) {\n              _lastFn(success, _count);\n            }\n            else {\n                _count++;\n                window.setTimeout(_f, delay);\n            }\n        }\n    };\n    _f();\n};\n// ===================================================================================\nbw.htmlSafeStr = function (str) {\n/** \nbw.htmlSageString(str) \nReplace non valid HTML characters with HTML escaped equivalents.   \n */\n       return String(str).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/\\n/g,\"<br>\");\n};\n\nbw.HTMLSafeStr = bw.htmlSafeStr; // deprecated\n// ===================================================================================\nbw.makeHTMLPage = function (head, body, options) {\n/** \nbw.makeHTMLDoc(head,body,options)\nmake a simple HTML document.  Note this can also be usd win bw.makeHTML()\n\ninline-bw-css --> emit bw default styles as inline css (include globals option)\n */\n    var dopts = {\n        docType : \"<!DOCTYPE html>\",\n        htmlParams  : {lang: \"en\"},\n        headDefaultContent : [\n                [\"meta\", {\"http-equiv\":\"Content-Type\", \"content\":\"text/html\", \"charset\":\"utf-8\"}, \"\"]\n                //[\"title\", {}, \"bw doc\"]\n            ],\n        headIncludeBitWrenchJS : false, // false : don't include, \"embed\" or \"path-string\"\n        headIncludeBitWrenchCSS : false, // exports bitwrench css classes in <style> section in head\n        headFavicon : \"\" //<link rel=\"icon\" type=\"image/x-icon\" href=\"../images/favicon-32x32.png\" />\n    };\n    dopts = optsCopy(dopts,options);\n\n    var s = dopts[\"docType\"]+\"\\n\";\n    s += bw.html([\"html\",dopts[\"htmlParams\"],[\n            \"\\n\",\n            [\"head\", {}, [ \"\\n\",dopts[\"headDefaultContent\"].map(function(x){return bw.html(x);}).join(\"\\n\"),head,\"\\n\"]],\n            \"\\n\",\n            [\"body\", {}, [ \"\\n\",body,\"\\n\"]],\n            \"\\n\"\n        ]]);\n    return s;\n};\n// ===================================================================================\nbw.makeCSS = function (cssData, options) {\n/** \nbw.makeCSS(cssData, options)\n\ncssData = \"h2 {color:blue;}\"    // string\ncssData = [\"h2 {color:blue;}\"]    // array entry but single string\ncssData = [\"h2 {color:blue}\", \"div {width:30px}\"] // 2 entries, both strings\ncssData = [[\"h2\",\"color:blue\"]] // array of rules (here length 1 rule)\ncssData = [[\"h2\",\"color:blue\"], [\"h3\", \"font-color:red\"]] // array of rules\ncssData = [\n            [[\"h2\",\"h4\"], \"color:blue\"],  // array or selectors, string for rule\n             [\"h3\", \"color:red\"]          // string for selector, string for rule\n          ]\ncssData = [ \n            [[\"h1\",\"div p\"],[\"color:blue\",\"display:block\"]], ==> h1, div p      {color: blue; diplay:block;}\n            \"h3 {color:red;}\",                               ==> h3             {color: red;}\n            [[\"div\",\".myClass\"],\"color : red\"],              ==> div,.myClass   {color: red;}\n            [\"p > .myclass\", [\"color:red\",\"display:block\"]]  ==> p > .myClass   {color: red;  display:block;}\n          ]\ncssData = [\n            [str, {}]\n          ]\ncssData = [\n            [[selectors], { dict }]\n          ]\n\ndicts not used at root because css can have multiple redundant selectors with different rules\n\n */\n    var dopts = {\n        emitStyleTag: false,\n        atr: {}\n    };\n    dopts = optsCopy(dopts,options);\n\n    var s=\"\\n\";\n    var tb = function (a) {a =(String(a)).trim(); a=(a[0]==\"{\"?\" \":\" {\")+a; a+=(a[a.length]==\"}\"?\"\":\"}\")+\"\\n\"; return a;};\n    //var rl = \"\";\n    try {\n        switch (bw.typeOf(cssData)) {\n            case \"string\":\n                s += cssData +\"\\n\";\n                break;\n            case \"array\":\n                var i; \n                for (i=0; i<cssData.length; i++) {\n                    var j = cssData[i];\n                    switch (bw.typeOf(j)) {\n                        case \"string\":  // this means we assume correcly formatted style is being passed in and we're just letting it through e.g. \".myclass {color:red}\"\n                            s+= j+\"\\n\"; \n                            break;\n                        case \"array\" : //expects length 2 array for each entry, though 2nd member can be dict or array\n                                    //  ==>[str, str], [[str,str,str],str] , [str, {}], [[str,str,str],{}]\n\n                            if ((j.length == 1) && (bw.typeOf(j[0])==\"string\")) {\n                                s+= j[0]+\"\\n\";\n                                break;\n                            }\n                            \n                            if (j.length == 2) {\n                                var _name = j[0], _rule = j[1], _ruleOutput=\"\";\n                                if (bw.typeOf(_name)==\"array\") {\n                                    s+= _name.join(\",\");\n                                }\n                                else {\n                                    s+= String(_name);\n                                }\n                                // now we have the names e.g. (\"h2\" or \"h2,.myClass\") done we need to emit the rules\n                                switch( bw.typeOf(_rule)) {\n                                    case \"array\" :  // [\"h2\", [\"color: black\",\"left:20%\"]] or [[\"h2\",\".myClass\"], [\"color: black\",\"left:20%\"]]\n                                        _ruleOutput = _rule.join(\" \"); \n                                        break;\n                                    case \"object\" : //  [\"h2\", {color: \"black\", left:\"20%\"}] or [[\"h2\",\".myClass\"], {color:black, left:\"20%\"}]\n                                        {\n                                            var x;\n                                            for (x in _rule) { _ruleOutput += (x + \" :\" + _rule[x]+\";\" );}\n                                        }\n                                        break;\n                                    case \"string\": // [\"h2\", \"color: black\"] or [[\"h2\",\".myClass\"], \"color:black\"]\n                                    default:\n                                        //rl = String(_rule);\n                                }\n                                s+= tb(_ruleOutput)+\"\\n\";\n                                \n                            }\n\n                            break;\n                        default:\n                    }\n                }\n\n                break;\n            default:\n                s=\"\";\n        }\n    }\n    catch (e) {bw.logd(e);}  //  eslint-disable-line no-empty\n    if (dopts[\"emitStyleTag\"]) {\n        s = bw.html([\"style\",dopts[\"atr\"],s]);\n    }\n    return s;\n};\n\n// ===================================================================================\nbw.makeCSSObjectLine = function (cssData, options) {\n/** \n@method bw.makeCSSObj(cssData, options)\n\nexpects this form:\n [str, {k,v}] \n or\n [[array of rules str], {k,v}]\n\n */\n    var dopts = {\n        emitStyleTag: false,\n        atr: {},\n        emitCR: true\n    };\n    dopts = optsCopy(dopts,options);\n\n    var s=\"\";\n    \n    try {\n        if (_to(cssData)== \"array\") {\n            switch (_to(cssData[0])) {\n                case \"string\":\n                    s+= cssData[0]+\" {\\n\";\n                    break;\n                case \"array\":\n                    s+= cssData[0].map(function(x){return x.toString();}).join(\",\");\n                    break;\n                default:\n                    throw \"makeCSSObjectLine type error in first argument\";\n            }\n            var k;\n            if (_to(cssData[1])==\"object\") {\n\n                for (k in cssData[1]) {\n                    s+= \"  \"+k+\":\"+cssData[1][k];\n                    s+= dopts[\"emitCR\"] ? \"\\n\" : \"\";\n                }\n                s+= \"}\\n\";\n            }\n        }\n    } catch(e) {\n        bw.logd(e);\n    }\n    return s;\n\n};\n// ===================================================================================\n//==================================================\n/**\n    html_fc (html form convert) converts acceptable html contructs into html json dict form: \n    { t: <tag>, a: {attribs}, c: [content], o: {options}, s:{state}}\n    \n    does not operate on the t a c o s params --> just does the conversion\n */\n/*\nhtml gen using {input}\n_typeOf(input)\n\n \"object\" \n    accepted keys below, other keys ignored\n    t: String | Number | Date() ==> tag  function==> f().toString()\n    a: {}  ==>  key : value ==>  num | str | Date | [] ==> [].join(dopts.a_join) \n    c: [] || String | Number | Date  ==> each_item : str | {html_dict} \n    o: {} ==> options (note inherit / copy)  => if not supplied uses previous levels options\n    \n    s: {} ==> state info (used internally) e.g. indent level, stats\n    \n    also accepts: \"tag\", \"attrib\", \"content\", \"options\", \"state\" as keys instead of t,a,c,o,s\n    \n    if any of t,a,c,o are a function it will be invoked immediatly w no params ==> t:myFunc ===> t:myFunc() <== \n\n    defaults:\n        t ==> \"div\"\n        a ==> {}\n        c ==> \"\"\n        o ==> {}\n\n        s ==> {level:0, nodes: 0}\n\n\"string\" | \"number\" | Date() ==> {}\n        t ==> \"div\"\n        a ==> {}\n        c ==> .toString()\n        o ==> {}\n\n        s ==> {}\n\n\"array\" \n    [         ]   ==> {} // defaults to empty default object \n    [c        ]   ==> {}\n    [t,c      ]   ==> {}\n    [t,a,c    ]   ==> {}\n    [t,a,c,o  ]   ==> {}\n    [t,a,c,o,s]   ==> {}\n    [ 6+      ]   ==> {} // uses, first 5 others ignored\n    \n    // this dict repreesnts the mapping\n    {\n    0 : { }\n    1 : {c : 0},  \n    2 : {t : 0, c : 1},\n    3 : {t : 0, a : 1, c : 2}\n    4 : {t : 0, a : 1, c : 3, o : 4}\n    5 : {t : 0, a : 1, c : 3, o : 4, s : 5}\n    }\n\n    // this array contruct implements the above dict mapping more compactly\n    var i,idx = [[],[\"c\"], [\"t\",\"c\"], [\"t\",\"a\",\"c\"],[\"t\",\"a\",\"c\",\"o\"],[\"t\",\"a\",\"c\",\"o\",\"s\"]];\n    for (i=0; i< x.length; i++) \n        hd[idx[x.length]][i] = x[i];\n    \n*/\n/*\nbw.html_fc = function(x) {\n    var i,hd  = { t: \"div\", a: {}, c: \"\", o: {t_close: true}, s: { level: 0, nodes: 0, html:\"\"}}; // default html dict format\n\n    switch (_to(x)) {\n        case \"null\" :\n        case \"undefined\" :\n            break;\n        case \"object\":\n            [[\"tag\",\"t\"],[\"attrib\",\"a\"],[\"content\",\"c\"],[\"options\",\"o\"],[\"state\",\"s\"]].forEach(function(z){ hd[z[1]]= z[0] in x ? x[z[0]] : hd[z[1]];});\n            for (i in hd)  // we only copy those fields we care about..\n                hd[i] = (i in x) ? x[i] : hd[i];  // need to handle fields differenty.. t : \"\", a : {}, c:\"\" | [],o :{} -- this is because we want to have proper defaults\n            break;\n        case \"array\":\n            var idx = [[],[\"c\"], [\"t\",\"c\"], [\"t\",\"a\",\"c\"],[\"t\",\"a\",\"c\",\"o\"],[\"t\",\"a\",\"c\",\"o\",\"s\"]];\n            var m = (x.length > 5) ? 5 : x.length;\n            for (i=0; i< m; i++)   { \n                console.log(idx[m][i] + \":\" + x[i]);\n                hd[idx[m][i]] = x[i];\n            }\n            break;\n        case \"function\":  \n            hd = bw.html_fc(x(),opts); // evaluate and convert...\n            break;\n        default: // string, number, Date  \n            hd.c = x.toString();\n    }\n    return hd;\n}\n*/\n\nbw.html_fc = function(x) {\n    var i,n = { t: \"div\", a: {}, c: \"\", o: {}}; // default html dict format\n    var m = \"\";\n    switch (_to(x)) {\n        case \"null\" :\n        case \"undefined\" :\n            n = x;\n            break;\n        case \"object\":\n            [[\"tag\",\"t\"],[\"attrib\",\"a\"],[\"content\",\"c\"],[\"options\",\"o\"]].forEach(function(z){ n[z[1]]= z[0] in x ? x[z[0]] : n[z[1]];});\n            for (i in n) {  // we only copy those fields we care about..\n                n[i] = (i in x) ? x[i] : n[i]; // need to handle complicated types: t:\"\", a:{}, c:\"\" | []\n                if (bw.isnu(n[i])) {\n                    n = null; // force entire object to be null or undefined\n                    m = \"HTML gen err: bad object\";\n                    break;\n                }\n            }\n            break;\n        case \"array\":\n            var idx = [[],[\"c\"], [\"t\",\"c\"], [\"t\",\"a\",\"c\"],[\"t\",\"a\",\"c\",\"o\"],[\"t\",\"a\",\"c\",\"o\",\"s\"]];\n            m = (x.length > 5) ? 5 : x.length;\n            for (i=0; i< m; i++)   { \n                bw.logd(idx[m][i] + \":\" + x[i]);\n                n[idx[m][i]] = x[i];\n            }\n            for (i in n)\n                if (bw.isnu(n[i])) {\n                    n = null;\n                    m = \"HTML gen err: bad array\";\n                    break;\n                }\n\n            break;\n        case \"function\":  \n            var opts = {};\n            n = bw.html_fc2(x(),opts); // evaluate and convert...\n            break;\n        default: // string, number, Date, bool, Regex \n            n.c =x.toString();\n    }\n    return n; \n};\n\nbw.HTMLNorm = function(x) {\n\n    function bwHTMLNode () {this.t=\"div\"; this.a={}; this.c=\"\"; this.o={};}\n    function bwError  (v,x) {this.value=v; this.msg = typeof x == \"undefined\" ? \"error\" : x;}\n    \n    var i,n = new bwHTMLNode(); // default html dict format\n    var m = \"\";\n    switch (_to(x)) {\n        case \"null\" :\n        case \"undefined\" :\n            n = new bwError(x,\"HTML Node error : \"+_to(x));\n            break;\n        case \"object\":\n            [[\"tag\",\"t\"],[\"attrib\",\"a\"],[\"content\",\"c\"],[\"options\",\"o\"]].forEach(function(z){ n[z[1]]= z[0] in x ? x[z[0]] : n[z[1]];});\n            for (i in n) {  // we only copy those fields we care about..\n                n[i] = (i in x) ? x[i] : n[i]; // need to handle complicated types: t:\"\", a:{}, c:\"\" | []\n                if (bw.isnu(n[i])) {\n                    n = null; // force entire object to be null or undefined\n                    m = \"HTML gen err: bad object\";\n                    break;\n                }\n            }\n            break;\n        case \"array\":\n            var idx = [[],[\"c\"], [\"t\",\"c\"], [\"t\",\"a\",\"c\"],[\"t\",\"a\",\"c\",\"o\"],[\"t\",\"a\",\"c\",\"o\",\"s\"]];\n            m = (x.length > 5) ? 5 : x.length;\n            for (i=0; i< m; i++)   { \n                //console.log(idx[m][i] + \":\" + x[i]);\n                n[idx[m][i]] = x[i];\n            }\n            for (i in n)\n                if (bw.isnu(n[i])) {\n                    n = null;\n                    m = \"HTML gen err: bad array\";\n                    break;\n                }\n\n            break;\n        case \"function\":  \n            var opts = {};\n            n = bw.html_fc2(x(),opts); // evaluate and convert...\n            n = _to(n)==\"function\" ? new bwError(n.toString(),\"HTML Node error: function returned a function\") : n;\n            break;\n        default: // string, number, Date, bool, Regex  ==> will be come just plain rendered content later\n            n.c =x.toString();\n    }\n    return n; \n};\n//==================================================\n/**\n    htmld -- html generator\n    convert _accteptable_types_  ==> htmLJSON_dict\n\n\nbw.htmld = function(htmlJSON, opts) {\n    var dopts = {               // def options note t_ a_ c_ o_ are options applied to the t, a, c, or o local keys directly\n        t_close   : \"auto\",     // \"auto\" | \"false\" | \"true\"  ==> \"auto\" doesn't close certain tag decl such as !DOCTYPE, <br>\n        a_join    : \";\",        // default join for attribute arrays \n        o_pretty  : false,      // makes nice html \n        o_indent  : 4,          // default indent when pretty printing\n        o_verbose : false,      // returns object instead of html string ==> {html: <htmloutput string>, stats: dict{}, status: \"success\" | \"warnings\"}\n        c_htmlesc : true        // true | false  ==> escape html safe chars, replace \"\\n\" with <br> etc\n    };\n    \n\n    dopts = optsCopy(dopts,opts);\n\n    var  i, d, h=\"\", ind_s, ind_e; // ind_s, ind_e control pretty printing\n\n    h=\"\";\n    d = bw.html_fc(htmlJSON); // now in dict form with state vector\n    for (i in d)\n        if (_to(i) == \"function\")\n            d[i] = d[i](d); \n\n    d.s[\"level\"]++;\n    \n    d.t = d.t.toString();  \n    d.a = (_to(d.a) == \"object\") ? d.a : {}; // must be dict.  \n    d.c = (_to(d.c) == \"array\" ) ? d.c : (_to(d.c)==\"object\") ? html_fc(d.c) : d.c.toString(); \n    d.o = optsCopy(dopts,d.o);\n\n    //now gen html...\n    ind_s = d.o.o_pretty ? Array(d.s.level * d.o.o_indent ).join(\" \") : \"\"; // not &nbsp; ==> we're not trying to render this space just make it pretty for inspection\n    ind_e = d.o.o_pretty ? \"\\n\" : \"\";\n    \n    h += ind_s+  \"<\" + d.t;\n    for (i in d.a)\n        h+= \" \"+i+\"=\\\"\"+d.a[i]+\"\\\"\";\n    h += \">\"+ ind_e; \n\n    //content gen\n    switch (_to(d.c)) {\n        case \"object\":\n            h += bw.htmld(d.c,dopts);\n            break;\n        case \"array\":\n            h += d.c.map(function(x){ return bw.htmld(x,dopts);}).join(\"\");\n            break;\n        default:\n            h+= d.c; \n    }\n    \n    //closing tag\n    h += ind_s + \"</\" + d.t + \">\" + ind_e;\n    d.s.html = h;\n    return d;\n}\n*/\n// ===================================================================================\nbw.html = function (d,options) {\n/**  \nbw.html(data)  \n\ntakes data of one of these exact forms:\n\n   string\n   array: [\"div\", content]\n   array: [\"div\",{attribute dict},content]\n   array: [\"div\",{attribute dict},content, options]\n   dict:  {tag:\"div\", atr: {attribute dict}, \"content\": content}\n        content can be string or array\n\nand creates an HTML string wich can be used to generate DOM elements such as\ndocument.getELementById(\"theID\").innerHTML = buildHTMLObjString(data).\n\ncontent can be nested \n\nd is string or an array [\"tag\".{attributs dict},content] or dict of this form\n   tag, atr, content  (also allow short hand t,a,c)\n   tag or t = string --> \"div\"\n   atr or a = dict  --> {\"style\" : \"width=40;height=50\", \"class\" : \"foo bar\"}\n    content or c = [] or string.  if array each element must be either string or dict of this form.\n    if any element is a function it will be evaluated in place with no params. \n\n*/\n    var dopts = {\n        pretty     : false,\n        indent     : 0,\n        indentStr  : \"  \"\n    };\n    \n    var outFn = function(s,opts) {\n        var w  =  Array(opts[\"indent\"]).join(opts[\"indentStr\"]);\n        var we =  Array(opts[\"indent\"]-1).join(opts[\"indentStr\"]);\n        return opts[\"pretty\"] ? \"\\n\"+w+ s + \"\\n\" +we: s;\n    };\n\n    dopts = optsCopy(dopts,options);\n\n    dopts[\"indent\"]++;\n\n    var s=\"\", t=\"\",a={},c=[],i;\n\n    switch (bw.typeOf(d)) {\n        case \"date\":\n        case \"number\":\n            s=String(d); // eslint-disable-line no-fallthrough\n        case \"string\":    \n            s=d;\n            return outFn(s,dopts); // Note return statement here... \n            break;                 // eslint-disable-line no-unreachable\n        case \"function\" :\n            s = bw.buildHTMLObjString(d(),dopts);\n            break;\n        case \"array\":\n\n            if ((bw.typeOf(d[0]) == \"undefined\") || d.length != 3)\n                return \"\";\n            t = bw.typeOf(d[0]) != \"undefined\" ? d[0] :t;\n            a = bw.typeOf(d[1]) != \"undefined\" ? d[1] :a;\n            c = bw.typeOf(d[2]) != \"undefined\" ? d[2] :c;\n            t = bw.typeOf(t)    == \"function\"  ? t()  :t;\n            a = bw.typeOf(a)    == \"function\"  ? a()  :a;\n            c = bw.typeOf(c)    == \"function\"  ? c()  :c;\n            c = bw.typeOf(c)    != \"array\"     ? [c]  :c;\n            break;\n        case \"object\":\n            t = bw.typeOf(d[\"t\"])         == \"function\" ? d[\"t\"]()       : t;\n            t = bw.typeOf(d[\"tag\"])       == \"function\" ? d[\"tag\"]()     : t;\n            t = bw.typeOf(d[\"t\"])         == \"string\"   ? d[\"t\"]         : t;  \n            t = bw.typeOf(d[\"tag\"])       == \"string\"   ? d[\"tag\"]       : t;  \n\n            a = bw.typeOf(d[\"a\"])         == \"function\" ? d[\"a\"]()       : a;\n            a = bw.typeOf(d[\"atr\"])       == \"function\" ? d[\"atr\"]()     : a;\n            a = bw.typeOf(d[\"a\"])         == \"object\"   ? d[\"a\"]         : a;\n            a = bw.typeOf(d[\"atr\"])       == \"object\"   ? d[\"atr\"]       : a;\n            switch (bw.typeOf(d[\"c\"])) {\n                case \"function\" : \n                    c = d[\"content\"](); break;\n                case \"array\" : \n                    c = d[\"content\"]; break;\n                default:\n                    c = [d[\"content\"]];\n            }\n            switch (bw.typeOf(d[\"c\"])) {\n                case \"function\" : \n                    c = d[\"c\"](); break;\n                case \"array\" : \n                    c = d[\"c\"]; break;\n                default:\n                    c = [d[\"c\"]];\n            }\n            break;\n        default:\n            bw.log(\"bw.html:: error in type\");\n    }\n    \n    s+= \"<\" + t ;\n    for (i in a) { \n        s+=\" \"+ String(i)+\"=\\\"\" + String(a[i]) +\"\\\"\";\n    }\n    s+= \">\";\n    //console.log(t,a,c);\n    for (i=0; i<c.length; i++) {\n        var _c = \"\";\n\n        switch(bw.typeOf(c[i])) {\n            case \"function\":\n                _c = c[i]();  // eslint-disable-line no-fallthrough\n            case \"object\":    // eslint-disable-line no-fallthrough\n            case \"array\" :\n            _c = bw.html(c[i],dopts);\n            break;\n            default:\n            _c = String (c[i]);\n        }\n        s+= _c;\n    }\n    s+= \"</\" + t + \">\";\n\n    return outFn(s,dopts);\n};\n\n\nbw.makeHTML = bw.html;              //deprecated name\nbw.buildHTMLObjString = bw.html;    //deprecated name\n\nbw.depAttr.push(\"makeHTML\");\nbw.depAttr.push(\"buildHTMLObjString\");\n// ===================================================================================\nbw.htmla = function (listData,options) {\n/**  \nbw.htmla(listData,options)  \n\nlistData is a single dim array of bw.html() compatible cnostructs\n\n*/\n    if (bw.typeOf(listData) != \"array\")\n        return bw.html(listData,options);\n\n    return listData.map( function(x) {return bw.html(x,options);}).join(\"\"); \n};\n\n// ===================================================================================\nbw.htmlList = function (listData, listType, atr, atri) {\n/**\nbw.makeHTMLList (listData, str)\n\nlistType = \"ul\" | \"ol\"\nlistHtml = [ item1, item2, item3, .. ]\n */\n    if (bw.typeOf(listData) != \"array\")\n        return \"\";\n\n    if (listData.length < 1)\n        return \"\";\n\n    atr  = _toa(atr,\"object\",atr,{});\n    atri = _toa(atr,\"object\",atr,{});\n\n    var lc = listData.map(function(x){return bw.html([\"li\",atri,x]);});\n\n    return bw.html ([listType,atr,lc]);\n};\n\nbw.makeHTMLList = bw.htmlList; //deprecated name\nbw.depAttr.push[\"makeHTMLList\"];\n\n// ===================================================================================\nbw.classStrAddDel = function (classData,classesToAdd,classesToDel) {\n/** \nclassStrAddDel (classData, classesToAdd, classesToDel)\nfor CSS classes\n\ntakes a valid classData string e.g. \"myclass1 myclass2\" etc\n\nand adds/del classes from classesToAdd string if they are not already present in classData\n\nclassStrAddDel(\"class1 class2\", \"class3\") ==> \"class1 class2 class3\"\nclassStrAddDel(\"class1 class2\", \"class3 class4\") ==> \"class1 class2 class3 class4\"\nclassStrAddDel(\"class1 class2\", \"class 2 class3\") ==> \"class1 class2 class3\" // doesn't add class2 again\n\nclassStrAddDel(\"class1 class2\", \"class 2 class3\",class1) ==> \"class2 class3\" // doesn't add class2 again. removes class1\nclassStrAddDel(\"class1 class2\", \"\",class1) ==> \"class2\" //  removes class1\n\nclassData, classesToAdd, classesToDel may be strings (space delimited) or arrays of strings ([\"c1\", \"c2\"], [\"c3\", \"c4\"], [\"c1\"])\n */\n \n    var tnorm    = function(x){x=bw.toa(x,\"undefined\",[],x); return (bw.to(x)==\"array\")? x : x.toString().trim().split(/\\s+/ig);};\n    var c  = tnorm(classData);\n    var ca = tnorm(classesToAdd);\n    var cd = tnorm(classesToDel);\n    return bw.arrayBNotInA(cd,c.concat(ca)).join(\" \").trim().replace(/\\s+/ig,\" \");\n\n};\n// ===================================================================================\nbw.classStrToggle = function (classData, classesToToggle) {\n/** \n    classStrToggle (classData, classesToToggle)\n\n    toggles classes listed in classesToToggle\n\n    takes a valid classData string e.g. \"myclass1 myclass2\" etc\n*/\n    var tnorma    = function(x){x=bw.toa(x,\"undefined\",[],x); return (bw.to(x)==\"array\")? x : x.toString().trim().split(/\\s+/ig);};\n    var c   = tnorma(classData);\n    var t   = tnorma(classesToToggle);\n    return bw.classStrAddDel(classData,bw.arrayBNotInA(c,t),bw.arrayBinA(c,t));\n};\n\n// ===================================================================================\nbw.htmlTabs = function(tabData, opts) {\n/** \nbw.makeHTMLTabs(tabData, atr)\ntabData = [[tab1Title,tab1-content], [tab2Title,tab2-content], [tab3Title,tab3-content]]\n */\n    if (bw.typeOf(tabData) != \"array\")\n        return \"\";\n    if (tabData.length < 1)\n        return \"\";\n\n    var dopts = {\n        atr     : {\"class\":\"\"},    //container {}\n        tab_atr : {\"class\":\"\"},    //attributs for each tab container\n        tabc_atr: {\"class\":\"\"},    //attributes for each tab-content area container\n        indent  : \"\",            //indent string for pretty printing\n        pretty  : false\n    };\n    dopts = optsCopy(dopts,opts);\n\n    var ti = tabData.map(function(x){return [\"li\",{\"class\":\"bw-tab-item\", \"onclick\":\"bw.selectTabContent(this)\"},x[0]];});\n    var tc = tabData.map(function(x){return [\"div\",{\"class\":\"bw-tab-content\"},x[1]];});\n    \n    ti[0][1][\"class\"] = bw.classStrAddDel(ti[0][1][\"class\"], \"bw-tab-active\");\n    tc[0][1][\"class\"] = bw.classStrAddDel(tc[0][1][\"class\"], \"bw-show\");\n\n    dopts[\"atr\"     ][\"class\"] = bw.classStrAddDel (dopts[\"atr\"     ][\"class\"],\"bw-tab-container\");\n    dopts[\"tab_atr\" ][\"class\"] = bw.classStrAddDel (dopts[\"tab_atr\" ][\"class\"],\"bw-tab-item-list\");\n    dopts[\"tabc_atr\"][\"class\"] = bw.classStrAddDel (dopts[\"tabc_atr\"][\"class\"],\"bw-tab-content-list\");\n\n    return bw.html([\"div\", dopts[\"atr\"],[[\"ul\",dopts[\"tab_atr\"],ti],[\"div\",dopts[\"tabc_atr\"],tc]]]);\n};\n\nbw.makeHTMLTabs = bw.htmlTabs; //deprecated name\nbw.depAttr.push(\"makeHTMLTabs\");\n\n// ===================================================================================\n\nbw.htmlTable = function(data,opts) {    \n/** \nbw.makeHTMLTableStr (data, options)\n\nCreates an HTML table element (as a string) from raw array data.\n\nvar table1 = \n    [[\"this\", \"that\", \"the\", \"other\"],[,6,4,0,4],[3,5,1,4],[1,2,4,5],[\"2u30\",\"23\",function(){return 834},23]];\ndocument.getElementById(\"myTableDiv\") = bw.makeHTMLTableStr(table1);  // displays simple table.\n\nvar options = {\n    useFirstRowAsHeaders:false,   // first row is data\n    caption:\"Important Table\"     // caption\n    sortable: false | true | function  // make table sortable (false is default, if true uses bw built-in sort, else supply function)\n}\ndocument.getElementById(\"myTableDiv\") = bw.makeHTMLTableStr(table1, options);  \n\nOptions:\n        useFirstRowAsHeaders : true;   // \n */\n    if ((bw.typeOf(data) != \"array\") || (data.length < 1))\n        return \"\";\n\n    //default options\n    var dopts = {\n        useFirstRowAsHeaders : true,\n        atr         : {},  // attributes for table object can use function() for dynamic\n        thead_atr   : {},  // attributes for table head section\n        th_atr      : {},  // attributes for header cells, \n        tbody_atr   : {},  // atttributs for table body section\n        tr_atr      : {},  // attributes for rows\n        td_atr      : {},  // attributes for cells\n        caption     : \"\",  // optional table caption (can be HTML, or function, bw.buildHTMLObjString compatible data)\n        sortable    : false// make table sortable.  if true, uses default sort, otherwise pass function to sort table. f(a,b,optionalColumnNumber)\n    };\n\n    var i=0,head=\"\",body=\"\",r,_hs=bw.buildHTMLObjString;\n    dopts = optsCopy(dopts,opts);\n    /*\n    for (i in opts)\n        dopts[i] = opts[i];  // overide defaults\n    */\n\n    if (bw.typeOf(dopts.th_atr[\"onclick\"]) == \"function\") {\n        bw.log(\"todo buildHTMLtable function dispatch\");      \n    }\n    \n    if (dopts.sortable == true) {\n        dopts.th_atr[\"onclick\"] = \"bw.sortTableDispatch(this)\";\n        if (\"class\" in dopts.th_atr)\n            dopts.th_atr[\"class\"] +=  dopts.th_atr[\"class\"].split(/[ ]+/).indexOf(\"bw-table-sort-xxa\") <0 ? \" bw-table-sort-xxa\" : \"\";\n        else\n            dopts.th_atr[\"class\"] = \"bw-table-sort-xxa\";\n    }\n    else {\n        if (bw.typeOf(dopts.sortable) == \"function\") {\n            var sfid = bw.funcRegister(dopts.sortable);\n            dopts.th_atr[\"onclick\"] = bw.funcGetDispatchStr(sfid,\"this\");       \n            bw.log(\"todo function makeHTML sort function dispatch\");\n        }\n    }\n\n    if (dopts[\"useFirstRowAsHeaders\"]) {\n        head=data[0].map(function(x){return _hs([\"th\",dopts.th_atr,x]);}).join(\"\");\n        head= _hs([\"tr\",dopts.tr_atr,head]);\n        i=1;\n    }\n    else\n        i=0;\n    head = bw.html([\"thead\",dopts.thead_atr,head]);\n\n    for (; i<data.length; i++) {\n        r = data[i].map(function(x){return _hs([\"td\",dopts.td_atr,x]);}).join(\"\"); \n        body+= _hs([\"tr\",dopts.tr_atr,r]);\n    }\n    body = bw.html([\"tbody\",dopts.tbody_atr,body]);\n    //console.log(head,'\\n',body);\n    dopts.caption = dopts.caption == \"\" ? \"\" :  _hs([\"caption\",{},dopts.caption]);\n    return _hs([\"table\",dopts.atr,[dopts.caption,head,body]]);\n};\n\nbw.makeHTMLTableStr = bw.htmlTable; ////deprecated name\nbw.depAttr.push(\"makeHTMLTableStr\");\n\nbw.htmlAccordian   = function (data, opts) {\n/** \n    htmlAccordian \n    \n    [[data-title, data-to-show, {show: true|false, clickShow: true|fa;se}], // TODO: optional 3rd element\n     [...]]\n\n    data-title and data-to-show can be strings or any valid bw.html() constructs\n */\n    var s = \"\";\n    if (_to(data) !== \"array\")\n        return s;\n\n    var dopts = {\n        atr   : { \"class\":\"bw-accordian-container\"}, // div for overall accordian\n        atr_h : { \"onclick\":\"bw.DOMClassToggle(this.nextSibling,'bw-hide')\"}, // div wrapping each header\n        atr_c : {/*\"onclick\":\"bw.DOMClassToggle(this,'bw-hide')\",*/ \"class\":\"bw-hide\"} // div wrapping each content\n    };\n    dopts = optsCopy(dopts,opts);\n    dopts[\"atr_h\"][\"onclick\"]=\"bw.DOMClassToggle(this.nextSibling, 'bw-hide')\";\n    //var fns = function(x){return (x==false) ? \"bw-hide\" : \"\"; } // converts x[2] in to class string \n    //var fc  = function(x,s){if (\"class\" in x){ x[\"class\"] = } \n\n    s = data.map(function(x){return bw.html([\"div\",dopts[\"atr_h\"],x[0]])+bw.html([\"div\",dopts[\"atr_c\"],x[1]]);}).join(\"\");\n    s = bw.html([\"div\",dopts[\"atr\"],s]);\n    return s;\n};\n// =============================================================================================\n/*\nbw.htmlDataToImg = function(data, opts) {\n/**\n    htmlDataToImg(data, opts) // takes a 2D array of numbers and render as an image\n    each data point must evaluate to a Number or be a function which will be called with its positional arguments and must return a number.\n\n    OR\n\n    function can be a string as long as it returns a valud HTML color prefixed with \"#\"\n\n    e.g. \n    \"#123\"\n    \"#112233\"\n\n    e.g.:\n        function (return 23)\n        function(x,y) { return x+y;}\n\n * /\n    var dopts = {\n        outputType  : \"canvas\" ,  // \"table\" | \"divs\" | \"svg\"\n        colorMode   : \"auto\",     // use greyscale map\n        colorStretch: 1.0\n    }\n\n    dopts = optsCopy(dopts,opts);\n//    if (_to(dopts[\"colorMapFn\"]) != \"function\")\n//        dopts[\"colorMapFn\"] = function(x){var c= mapScale(x,0,255,0,255,true).}\n\n\n\n}\n*/\n// =============================================================================================\nbw.naturalSort = function (as, bs){\n/** \nbw.naturalSort(a,b) {\nbw.naturalSort() is a function which can be passed to an array sort to provide natural sorting of mixed array elements.\n\n[3,4,2,1,\"10\",\"111\",\"foo\",\"bar\",\"01\",\"this123\",\"This123\", \"848\"].sort()\nvs\n[3,4,2,1,\"10\",\"111\",\"foo\",\"bar\",\"01\",\"this123\",\"This123\", \"848\"].sort(bw.naturalSort)\n\nit is the default sort for bw.sortHTMLTable()\n\n */\n//https://www.webdeveloper.com/forum/d/254726-sorting-alphanumeric-array (taken from here) see also\n//using .localCompare() in newer versions of JS\n\n    var a, b, a1, b1, i= 0, L, rx=  /(\\d+)|(\\D+)/g, rd=  /\\d/;\n    if(isFinite(as) && isFinite(bs)) return as - bs;\n    a= String(as).toLocaleLowerCase();\n    b= String(bs).toLocaleLowerCase();\n    if(a=== b) return 0;\n    if(!(rd.test(a) && rd.test(b))) return a> b? 1:-1;\n    a= a.match(rx);\n    b= b.match(rx);\n    L= a.length> b.length? b.length:a.length;\n    while(i<L){\n        a1= a[i];\n        b1= b[i++];\n        if(a1!== b1){\n            if(isFinite(a1) && isFinite(b1)){\n                if(a1.charAt(0)=== \"0\") a1= \".\" + a1;\n                if(b1.charAt(0)=== \"0\") b1= \".\" + b1;\n                return a1 - b1;\n            }\n            else return a1> b1? 1:-1;\n        }\n    }\n    return Math.sign(a.length - b.length);\n};\n\n// =============================================================================================\nbw.sortHTMLTable = function (table, col, dir, sortFunction) {\n/** \nbw.sortHTMLTable(table, column, optionalSortFunction).\n\nsort any HTML table active in the DOM\ntable must be a valid DOM table element or CSS selector (first element is used)\n\ndefault uses string compare. but can pass in a function\nsortFunc(a,b,col) // a and b are the cells to compare, col is optional info on what column this is   \n*/\n    \n    var  rows, switching, i, x, y, shouldSwitch;\n    var sortF = bw.typeOf(sortFunction) == \"function\" ? sortFunction : bw.naturalSort;\n    \n    table = bw.DOM(table)[0];\n    \n    dir = (dir==true) || (dir==\"up\") ? true : false;\n\n    switching = true;\n    col = bw.typeOf(col) == \"number\" ? col : 0;  //default sort on left most column\n\n    //Make a loop that will continue until  no switching has been done\n    while (switching) {\n        //start by saying: no switching is done:\n        switching = 0;\n        rows = table.getElementsByTagName(\"TR\");\n        /*Loop through all table rows (except the first, which contains table headers):*/\n        for (i = 1; i < (rows.length - 1); i++) {\n            //start by saying there should be no switching:\n            shouldSwitch = 0;\n            /*Get the two elements you want to compare,\n            one from current row and one from the next:*/\n            x = rows[i].getElementsByTagName(\"TD\")[col].innerHTML;\n            y = rows[i + 1].getElementsByTagName(\"TD\")[col].innerHTML;\n\n            //check if the two rows should switch place:\n\n            shouldSwitch = (dir) ? sortF(x,y,col) > 0 : sortF(x,y,col) < 0;            \n            if (shouldSwitch)\n                break;\n        }\n\n        if (shouldSwitch) {\n          //If a switch has been marked, make the switch and mark that a switch has been done:\n          rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n          switching = true;\n        }\n    }\n};\n\n// =============================================================================================\nbw.sortTableDispatch = function (item,fn) {\n/** \nbw.sortTableDispatch(el) is used to bind sorting functions to tables generated by  bw.htmlTable(....)\nitem must be a valid DOM element or id.\n */\n    var i;\n    \n    item = bw.DOM(item)[0];\n\n    if (bw.typeOf(item).substr(0,4) != \"html\")\n       return false;  //something not right about this table element\n\n    var index=0,dir;\n    var cols = item.parentElement.getElementsByTagName(\"th\");\n    //update which tab selected\n    for (i=0; i< cols.length; i++) {\n        if (cols[i] == item) { // selected tab logic\n            index = i;\n            dir = bw.markElement(cols[i],\"bw-table-sort-upa\") ; // ifthe current col is already up..\n            if (dir) { \n                bw.markElement(cols[i],\"bw-table-sort-upa\", \"bw-table-sort-dna\" ); \n            }\n            else { //dna or xxa\n                if (bw.markElement(cols[i],\"bw-table-sort-dna\")) {\n                    bw.markElement(cols[i],\"bw-table-sort-dna\", \"bw-table-sort-upa\" ); \n                } else\n                    bw.markElement(cols[i],\"bw-table-sort-xxa\", \"bw-table-sort-upa\" );\n            }\n        }\n        else{ // its not the selected column so we clear the up / down arrow\n            bw.markElement(cols[i],\"bw-table-sort-upa\",\"\"); \n            bw.markElement(cols[i],\"bw-table-sort-dna\",\"\");\n            bw.markElement(cols[i],\"bw-table-sort-xxa\",\"bw-table-sort-xxa\");\n        }\n\n    }\n    //console.log(item.parentElement.parentElement.parentElement);\n    bw.sortHTMLTable(item.parentElement.parentElement.parentElement,index,dir,fn);\n};\n// ===================================================================================\n/** \nbw.function dispatch for DOM elements..\n\nthe bw.fnRegistry{} is a dict of user supplied functions are assigned IDs by bitwrench.  Using these IDs one can call the functions which is useful in DOM string contexts such as makeHTMLTable() or buildHTMLObjStr().\n */\nvar _fnRegistry = {};\nvar _fnIDCounter = 0;\n\n\nbw.funcRegister = function (fn, forceName) {\n/** \nbw.funcRegister()\nregister a function to be called by iD.\nfn is any function or can be anonymous function.  \n(optional) forceName forces the returned ID used to be forceName.  forceName must be only alpha and numeric chars.\nforceName is useful when declaring static HTML content and one wants to use the bwFunctionDispatch but before bitwrench has been loaded or run.\n\nIn this case in the static code call like this:\n\n<div class=\"...\" onclick=\"bw.funcGetById('myFnName')(this)\"> regular html content goes here  </div>\n<script ..>\nfunction superDuperFunctionCode (a) { .... code for my function ... };\nbw.funcRegister(superDuperFunctionCode,\"myFnName\");  \n\n */\n    var fnID = \"class_bwfn_\" + _fnIDCounter; \n    _fnIDCounter++;\n    fnID = bw.typeOf(forceName) == \"string\" ? forceName : fnID;\n    fnID.trim();\n    _fnRegistry[fnID] = fn;\n    return fnID;\n};\n\nbw.funcUnregister = function (fnID) {\n/** \nbw.funcUnregister(fnID)\nremove a function from the bitwrench dispatch registry\n */\n    if (fnID in _fnRegistry)\n        delete _fnRegistry[fnID];\n};\n\nbw.funcGetById = function(fnID,errFn) {\n/** \nbw.funcGetById(fnId, errFn)\nallows a function to be exectued by its bw function ID.\nbw.funcGetById(myId)(... args ...)\n\nerrFn is optional function to call if fnID is not found.\n\nexample:\n    var myFunc = bw.getFuncById(\"myFuncID\");  // function must already be registered.\n */\n    fnID = String(fnID);\n    if (fnID in _fnRegistry)\n        return _fnRegistry[fnID];\n    else {\n        var _id = fnID;\n        return (bw.typeOf(errFn) == \"function\") ? errFn : function(){bw.log(_id,\"bw.funcGetById(): unregistered fn error\");} ;\n    }\n};\n\nbw.funcGetDispatchStr = function (fnID, argstring) {\n/** \nbw.funcGetDispatchStr(fnID, argString) \ncreate a string suitble for use in DOM element dispatch.  note argstring is a literal so variables must be reduce to their values.\nsee bw.funcRegister() for getting valid IDs for user supplied functions.\n\nexample: bw.funcGetDispatchStr(\"myFuncID\",\"param1,param2\")\n */\n    \n    switch (bw.typeOf(argstring)) {\n        case \"string\" : \n        case \"number\" : \n            argstring = String(argstring);\n            break;\n        case \"array\"  : \n            argstring = argstring.join(\",\");\n            break;\n        case \"function\": \n            argstring = argstring();\n            break;\n        default:\n            argstring = \"\";\n    }\n\n    return \"bw.funcGetById('\"+fnID+\"')(\"+argstring+\")\";\n};\n\n// =============================================================================================\nbw.loremIpsum = function (numChars, startSpot, startWithCapitalLetter) {\n/** \nbw.loremIpsum(numChars, startSpot)\n\ngenerate a simple string of Lorem Ipsum text (sample typographer's text) of numChars in length.  \n\nif startSpot is supplied, it starts the string at the supplied index e.g. bw.loremIpsum(200, 50) \nwill supply 200 chars of loremIpsum starting at index 50 of the Lorem Ipsum sample text.\n\nif startWithCapitalLetter == true then the function will capitlize the first character or inject a capital letter if ihe first character isn't a capital letter.\n    default is false;\n\nDefault is a paragraph of lorem ipsum (446 chars)\n */\n\n    startSpot  = _to(startSpot) != \"number\" ? 0 : Math.round(startSpot);\n\n    var l = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. \";\n    startSpot = startSpot % l.length;\n    l= l.substring(startSpot, l.length) + l.substring(0,startSpot);\n\n    if (bw.typeOf(numChars) != \"number\")\n        numChars = l.length;\n\n    var i=numChars, s=\"\";\n\n    \n    while (i>0) {\n        s+= (i < l.length) ? l.substring(0,i) : l;\n        i-= l.length;\n    }\n    if (s[s.length-1] == \" \")\n        s= s.substring(0,s.length-1) + \".\"; // always end on non-whitespace.  \".\" was chosen arbitrarily.\n    if ((startWithCapitalLetter == true) && (s[0].match(/[A-Z]/) == null))\n        s = \"M\"+s.substring(1,s.length); // arbitrary capital letter chosen which sorta goes well if next letter is a consonant or vowel\n\n    return s;\n\n};\n\nbw.docString = function (s, options) {\n/** \nbw.docString(functionAsString, options)\nreturns array of valid docStrings embedded in a string \n\n@param docType{string} : \"jsdoc\" | \"python\" | \"custom\"  (python means triplequote (\") 3 times), \"custom\" means supply delims\n@param options {delims:[string,string]} : start, stop delimiters (only used if docType set to \"custom\")\n\n@return array{strings} : array of captured params\n    \n */\n    \n    var dopts = {\n        docType : \"jsdoc\",  // \"js doc\", \"python\", \"other\" (jsdoc is default)\n        delims  : [\"/**\",\"*/\"],\n        parseJSDocParams : false,\n        dropLeadin : false // removes lead-in whitespace or floating single * on each line e.g.  \" * @mycomment\" ==> \"@mycomment\"\n    };\n    dopts = optsCopy(dopts,options);\n\n    var _es = function (str) {return str.replace(/(?=[\\\\^$*+?.()|{}[\\]])/g, \"\\\\\");}; // do escape of regex chars\n\n    dopts[\"delims\"] = bw.choice(dopts[\"docType\"],{\n        \"jsdoc\" : [\"/**\",\"*/\"], \n        \"python\": [\"\\\"\\\"\\\"\",\"\\\"\\\"\\\"\"],       // old regex: /[\"]{3}([\\s\\S]*?)[\"]{3}/ig \n        \"jspy\"  : [\"/**\\\"\\\"\\\"\",\"\\\"\\\"\\\"*/\"]   // js && python\n    },dopts[\"delims\"]);\n\n    var c = (_to(s)==\"function\") ? s.toString() : String(s);\n    var r = [];\n    \n    try  {\n        var re = (new RegExp( _es(dopts[\"delims\"][0])+ \"\\\\s*\\\\n*([^\\\\*]|(\\\\*(?!\\\\/)))*\" +_es(dopts[\"delims\"][1]),\"ig\"));  // \"([\\\\s\\\\S]*?)\"                                                 \n        r = c.match(re);\n    }\n    catch (e)   {bw.log(String(e));}\n\n    if (_to(r)==\"array\") {\n        r = r.map(function(x){return x.substring(dopts[\"delims\"][0].length, x.length-dopts[\"delims\"][1].length);}); // this is an array of the contents of docStrings which can still be multiline in thier own right\n        r = (dopts[\"dropLeadin\"]==true) ? r.map(function(x){return x.split(/[\\n\\r]/).map(function(y){return bw.trim(y,\"left\")+\"\\n\";});}) : r; // need to hanlde multiline stuff here\n    }\n    else\n        r=[];\n    \n    return r;\n};\n// =============================================================================================\nbw.docStringParseLine = function(s) {\n/** \nParse a single line of a jsdoc string.\n    @param {string} s - line of docstring to parse\n    @return - dict of line contents {source: s, field:string, name:string, description: string, types: type1,type2 } \n    if not a valid doc string line then returns source string only\n*/\n    var r={\"source\":s,  \"field\" : \"\", \"types\":\"\", \"name\" :\"\", \"description\" : \"\"};  \n    var a = s.replace(/^\\s*(\\/\\*\\*?)?|(\\*\\/)?\\s*$/ig,\"\"); // remove the comment markers if still there \"/** my comment */\"\" ==> \"my comment\"\n    a = a.replace(/^\\s*\\**\\s*/,\"\");                      // remove any cruft at beginning of line \" * @myParam {}.....\" ==> \"@myParam {}.....\"\n    if (a.charAt(0) == \"@\") { // if we have hit a @fieldname parameter we start parsing.\n        //  ([str, regex, fieldStr, result{}]) ==> ([str, regex, fieldStr, result{}])  ::> ([str,result{},fieldStr,regex])\n        /*\n        var _tok = function(x){\n            var m = x[0].match(x[1]);\n            if (m != null) {x[4][3]=m[1];}\n            x[0] = x[0].replace(x[1],\"\");\n            return x;\n        }\n        */\n        //r = [[e,f],[e,f],[e,f],[e,f]].reduce(,_tok);\n\n        var e,x;\n        var t = bw.trim;\n        e =/^@([A-Za-z0-9_<>[\\]]*)/i;\n        x = a.match(e);\n        if (x != null) {r[\"field\"] = t(x[1]);} else return r; // didn't match... opt out here\n        a = a.replace(e,\"\");\n        \n        e = /^\\s*\\{([A-Za-z0-9_|\\s,.\\-+!@#$%^&*()=[\\]]*)\\}/i;\n        x = a.match(e);\n        if (x != null)  {r[\"types\"]=t(x[1]);} // types is optional..\n        a = a.replace(e,\"\"); \n\n        e  = /^\\s*([\\S]*)/i;\n        x = a.match(e);\n        if (x != null)  {r[\"description\"]=t(x[1]);} //\n        a = a.replace(e,\"\"); \n\n        e = /^\\s*([\\S]*)/i;\n        x = a.match(e);\n        if (x != null)  {r[\"name\"]=t(x[1]);} //\n        a = a.replace(e,\"\"); \n        \n        // descrpition                  ==> name: \"\"        description : \"description\"\n        // description  we  we          ==> name: \"\"        description : \"description we we \"\n        // name - description  we we    ==> name: \"name\"    descrpition : \"description we we\"\n        // - description we we          ==> name: \"\"        description : \"description we we\"\n        if (r[\"name\"].match(/^\\s*-+\\s*/) != null) {\n            r[\"name\"] = r[\"description\"];\n            r[\"description\"] = t(a);\n        } else {\n            r[\"description\"] = r[\"description\"]+\" \"+r[\"name\"]+\" \"+t(a);\n            r[\"name\"] =\"\";\n        }\n    }\n    return r;\n};\n// =============================================================================================\nbw.docStringParse = function(s) {\n/** \n    @method  bw.parseJsDocString()  parse and extract info from a jsdoc style comment.  expects there to be only a single docString comment\n    @description  docStringParse parses a jsdoc string \n    and returns the paramters as an array which can be formatted for display or interrogtion.\n    @param{string} - a valid js docstring\n\n    @returns An array of triplets [@param, {types}, comment info]\n */\n\n /*\n    implementation notes:\n    the parser splits the candidate doc string in to lines.\n\nExamples:\n\n * Assign the project to an employee.\n * @param {Object} - The employee who is responsible for the project. ==> [\"@param\",\"object\",\"\", \"The employee who is resposnsible for the project\"]\n * @param {string} employee.name - The name of the employee.\n * @param {string} employee.department - The employee's department.\n\n\n */\n    \n    \n    s=bw.docString(s)[0];\n    var a = s.split(\"\\n\");\n    //console.log(a);\n    var i,r=[bw.docStringParseLine(a[0])];\n    for (i=1;i<a.length;i++) {\n        var l = bw.docStringParseLine(a[i]);\n        if (l[\"field\"]==\"\") { // nothing parseable...\n            if (r[r.length-1][\"field\"]==\"\") {\n                r[r.length-1][\"source\"] += l[\"source\"];\n            } else\n            r[r.length-1][\"description\"] += l[\"source\"];\n        } else r.push(l);\n    }\n    return r;\n};\n// =============================================================================================\nbw.isHexStr = function (str, allowChars) {\n/** \nisHexStr() returns a number of hex digits found or false if non-hex string.\nallow is an optional string of characters \"-+.\"etc to permit in the string.\nthe allow characters are not counted in the result\n\nexamples:\n    bw.isHEXStr(\"123a\")      ===> 4\n    bw.isHEXStr(\"12-3a\")     ===> false\n    bw.isHEXStr(\"12-3a\",\"-\") ===> 4\n */\n    if ( _to(str) == \"string\") {\n        str = str.replace(new RegExp(\"[\"+allowChars+\"]\",\"g\"),\"\");      \n        var isHexReg = new RegExp(\"^[0-9A-Fa-f]{\"+str.length+\"}$\");\n        return (isHexReg.test(str) == true) ? str.length : false;\n    }\n    return false;\n};\n\n// =============================================================================================\nbw.isNodeJS = function () {\n/** \nbw.isNodeJS() ==> returns true if running in node environment (else browser)\n */\n    return ( true && module.exports) !== false;  //a hack will fix later\n};\n\n// =============================================================================================\nbw.fixNum = function(num,digits) {\n/** \nbw.fixedNum(num,digits)\n\nTruncate a number at digits number of places.  \n    bw.fixNum(1.2345,2)  ===> 1.23\n    bw.fixNum(234.32,-2) ===> 200\n */\n    num = Number(num); \n\n    if (isNaN(num))\n        return NaN;\n\n    digits = bw.typeOf(digits) == \"number\" ? digits : 3;\n    num *= Math.pow(10,digits);\n    \n    //num =  Math.trunc(num);\n    num = (num > 0) ? Math.floor(num) : Math.ceil(num); // some browsers don't support Math.trunc()\n\n    num /= Math.pow(10,digits);\n    return num;\n};\n\n// =============================================================================================\nbw.multiArray = function (value, dims) {\n/** \nbw.multiArray(value,  dims) \n\nreturn a multidimensional array where all cells are initialized to value.\n\nbw.multiArray(0,[4,5]) // returns 4x5 array of 0s \nbw.multiArray(\"test\",[4,5]) // returns 4x5 array of \"test\" \n\nthis shorthand is available for single dim arrays\nbw.multiArray(0,5) ===> returns 5x1 array of 0s \n\nbw.multiArray also accepts functions \n\nbw.multiArray(bw.random, [3,4]) ===> creates 3x5 array of random #s btw 0..100\n\nbw.multiArray(function(){return (new Date()).getTime();},[4,6] ) ==> returns values based on the Javascript date\n */\n\n    var v = function() { return (_to(value) == \"function\") ? value(): value;};\n    dims = _to(dims) == \"number\" ? [dims] : dims;\n\n    var  _array = function(a,dim)   {\n        if(dim < dims.length)  {\n            for(var i=0; i<dims[dim]; i++)   {\n                a[i]= (dim== dims.length -1) ? v() : _array([],dim+1);\n            }\n            return a;\n        }\n    };\n    return _array([],0);\n};\n\n// =============================================================================================\nbw.clip = function (data, min, max) {\n/** \n@method: bw.clip(data, min, max)  clips data in between min and max. \n\nExamples:\n    bw.clip(5,2,20)            ==>  5   // already in range\n    bw.clip(1,2,20)            ==>  2   // less than the min value so clips to min value\n    bw.clip([1,4,8,35], 2, 20) ==>  [2,4,5,20]\n */\n    var l = min < max ? min : max;\n    var h = max > min ? max : min;\n\n    if (_to(data) == \"array\") {\n        return data.map(function(x){ return (x < l) ? l : ((x > h) ? h : x);});\n    }\n    else\n        return (data < l) ? l : ((data > h) ? h : data);\n};\n\n// =============================================================================================\nbw.mapScale = function (x, in0, in1, out0, out1, options) {\n/** \n@method: bw.mapScale()\n\nMap an input value x in its natural range in0...in1 to the output space out0...out1 with optional clipping\nexpScale allows sigmoidal warping to stretch input values contrained to a small range. (floating point scale factor)\nx can be either a number or array of numbers.\n */\n    var dopts = {\n        clip : true,\n        expScale  : false\n    };\n\n    dopts = optsCopy ( dopts, options);\n\n    if (in0==in1) \n        return x;\n    out0 = _toa(out0, \"number\", out0, 0);\n    out1 = _toa(out1, \"number\", out1, 1);\n    \n    var ms= function (z) {\n        if (dopts[\"expScale\"]) {\n            var y = ((z-((in1+in0) / 2.0)) / (in1 - in0) ) * dopts[\"expScale\"];\n            z = ((out1-out0)*(1/(1+Math.exp(-y)))) + out0;\n        }\n        else\n            z = (((z-in0)/(in1-in0))*(out1-out0))+out0;\n\n        if (dopts[\"clip\"]) \n            z= bw.clip(z,out0,out1);\n        return z;\n    };\n\n    if (_to(x) == \"number\")\n        return ms(x);\n    return x.map(ms);\n};\n\n// =============================================================================================\n//https://stackoverflow.com/questions/10073699/pad-a-number-with-leading-zeros-in-javascript\nbw.padNum = function(x, width, options) {\n/**\n@description bw.padnum() takes a number and pads left pads (default is '0')\n@param x {number} \n*/\n    var dopts = {\n        padChar : \" \"\n    };\n    dopts = optsCopy(dopts, options);\n    x = String(x);\n    return (x.length >= width) ? x : new Array(width - x.length+1).join(dopts[\"padChar\"]) + x;\n};\n// =============================================================================================\nbw.trim = function (s, dir) {\n/**\n@description bw.trim() trims a string on either left, right, or both.  (cross browser works before IE8)\n@param s {string} : a string to trim white space on\n@param dir {\"left\" | \"right\" | \"both\" | \"none\"} : trim white space on left only, right only or both sides, or no trim (default is both)\n*/\n    var t = bw.choice(\n        dir, \n        {\n            \"left\"  : /^[\\s\\uFEFF\\xA0\\n]+/g,\n            \"right\" : /[\\s\\uFEFF\\xA0\\n]+$/g,\n            \"none\"  : /(?!)/ // useful for programmatic scenarios (eg. [....].map ) where not all of the entries should be trimmed.\n        },\n        /^[\\s\\uFEFF\\xA0\\n]+|[\\s\\uFEFF\\xA0\\n]+$/g\n    );\n    return String(_toa(s,\"undefined\",\"\",s)).replace(t,\"\");\n};\n\n// =============================================================================================\nbw.padString = function (s, width, dir, options) {\n/**\n@description bw.padString() takes a string and pads it to the specified number of chars either left or right or centered.\n*/\n    var dopts = {\n        padChar    : \" \",\n        trimDir    : \"both\"   // pre-trim the input string:  \"left\", \"right\", \"both\", \"none\"\n    };\n    dopts = optsCopy(dopts, options);\n\n    s = String(s);\n    var x = bw.trim(s,dopts[\"trimDir\"]); \n    var p = (width > x.length ) ? (width - x.length+1) : 0 ; // total padding\n    var q = bw.choice(dir,\n        {\n            \"left\"      : [p,0],\n            \"right\"     : [0,p],\n            \"center\"    : [Math.round(p/2), (p-Math.round(p/2)+1)]\n        },\n            [0,0]\n        );\n    return  ((new Array(q[0])).join(dopts[\"padChar\"]))+x+(new Array(q[1])).join(dopts[\"padChar\"]);\n};\n\n// =============================================================================================\nbw.random = function(rangeBegin, rangeEnd, options) {\n/** \n@method: random\n\nReturn a random number between rangeBegin and RangeEnd (inclusive)\n    default is 0,100\n\noptions \n    {\n        setType : \"int\"\n        dims    : false | number | [ , , ]  // selector for dimensions\n    }\n\noptions\n    seType: \n    \"int\"               ==> return an integer\n    \"float\" or \"number\" ==> return floating point number\n\n    dims\n        false or ommitted ==> return a single number\n        5                 ==> return a 5x1 array of random numbers\n        [3,5,2]           ==> return a 3x5x2 array of random numbers\n\nexample:\nbw.random() ==> returns a number btw 0,100\nbw.random(-4,4,{setType: \"float\", dims[4,5]}) ==> returns a 3x5 array of floating pt numbers btw -4,4\n\nsee also prandom for psuedorandom numbers\n\n */\n    rangeBegin = bw.typeOf(rangeBegin)  == \"number\" ? rangeBegin : 0;\n    rangeEnd   = bw.typeOf(rangeEnd)    == \"number\" ? rangeEnd   : 100;\n\n    var dopts = {\n        setType : \"int\",\n        dims    : false // if dims is array e.g. [3,4,5] returns random elements array\n    };\n    \n    dopts = optsCopy(dopts,options);\n    \n    var _rnd = function () {\n        var n = 0;\n    \n        dopts.setType    = [\"int\",\"float\",\"number\"].indexOf(dopts.setType) == -1 ? \"int\" : dopts.setType;   \n\n        if (rangeEnd < rangeBegin ) {\n            rangeBegin ^= rangeEnd; rangeEnd ^= rangeBegin; rangeBegin ^= rangeEnd;\n        }\n        n = ((Math.random() * (rangeEnd-rangeBegin)) + rangeBegin);\n    \n        return (dopts.setType == \"int\") ? Math.round(n) : n;\n    };\n\n    if ((_to(dopts[\"dims\"]) == \"array\") || (_to(dopts[\"dims\"])== \"number\"))\n        return bw.multiArray( _rnd, dopts[\"dims\"]);\n\n    return _rnd();\n};\n// =============================================================================================\n\n\nbw.hashFnv32a= function (str, seed, returnHexStr) {\n/**\n@method Calculate a 32 bit FNV-1a hash\nFound here: https://gist.github.com/vaiorabbit/5657561\nRef.: http://isthe.com/chongo/tech/comp/fnv/\n\n@param {string} str the input value\n\n@param {integer} [seed] optionally pass the hash of the previous chunk\n\n@param {boolean} [asString=false] set to true to return the hash value as \n  8-digit hex string instead of an integer\n\n@returns {integer | string}\n*/\n    /*jshint bitwise:false */\n    var i, l,\n        hval = (typeof seed == \"undefined\") ? 0x811c9dc5 : seed;\n\n    for (i = 0, l = str.length; i < l; i++) {\n        hval ^= str.charCodeAt(i);\n        hval += (hval << 1) + (hval << 4) + (hval << 7) + (hval << 8) + (hval << 24);\n    }\n    if( returnHexStr ){\n        // Convert to 8 digit hex string\n        return (\"0000000\" + (hval >>> 0).toString(16)).substr(-8);\n    }\n    return hval >>> 0;\n};\n\n// =============================================================================================\nbw.prandom = function (rangeBegin,rangeEnd,seed, options) {\n/**\nprandom - generate a psuedo random number from internal hash function in a given range\n*/\n    rangeBegin = bw.typeOf(rangeBegin)  == \"number\" ? rangeBegin : 0;\n    rangeEnd   = bw.typeOf(rangeEnd)    == \"number\" ? rangeEnd   : 100;\n\n    var dopts = {\n        setType : \"int\",\n        dims    : false // if dims is array e.g. [3,4,5] returns random elements array\n    };\n    \n    dopts = optsCopy(dopts,options);\n    \n    var _rnd = function () {\n        var n = 0;\n    \n        dopts.setType    = [\"int\",\"float\",\"number\"].indexOf(dopts.setType) == -1 ? \"int\" : dopts.setType;   \n\n        if (rangeEnd < rangeBegin ) {\n            rangeBegin ^= rangeEnd; rangeEnd ^= rangeBegin; rangeBegin ^= rangeEnd;\n        }\n        n = (((bw.hashFnv32a(\"start string\",seed) & 0xffff)/(65536)) * (rangeEnd-rangeBegin)) + rangeBegin;\n    \n        return (dopts.setType == \"int\") ? Math.round(n) : n;\n    };\n\n    if ((_to(dopts[\"dims\"]) == \"array\") || (_to(dopts[\"dims\"])== \"number\"))\n        return bw.multiArray( _rnd, dopts[\"dims\"]);\n\n    return _rnd();\n\n};\n// =============================================================================================\nbw.CSSMakeTheme   = function(color) {\n/**\nmakeThemeCSS (color) \n\nmakes a CSS theme color palettte based on the supplied color which is exported as a css style\n\nTODO\n */\n    var c =  bw.colorRgbToHsl( bw.colorParse(color));\n\n    var p = \"bw-theme-\";\n    var thm = [\"l5\",\"l4\",\"l3\",\"l2\",\"l1\",\"d1\",\"d2\",\"d3\",\"d4\",\"d5\"].map(function(x){return p+x;});\n    var im = \" !important\";\n    thm = thm.map(function(x,i){return [x,[[\"color\", ((i<5)?\"#000\" : \"#fff\")+im ],[\"background-color\",c + im] ]]; });\n\n    return thm;\n\n};\n// =============================================================================================\nbw.CSSSimpleStyles = function(appendToHead, options) {\n/* \nbw.bwSimpleStyles(appendToHead,options)\n\nbitwrench simpleStyles is the function which writes loads \nwrite a quick grid style sheet for quick n dirty layout.  See docs for examples.\n\n<h1 class='bw-h1'>Title for my section</h1>\n<p>This section contains some interesting data and topics</p>\n<div class=\"bw-row\">  <!-- defines a row using bw css classes -->\n<div class=\"bw-col3\">column 1 content</div><div class=\"bw-col3\">column 2 content</div><div class=\"bw-col3\">column 3 content</div><div class=\"bw-col3\">column 4 content</div>\n</div>\n<div>\n\n    appendToHead  ==> if true, attempts to append to HTML <head> (only writes if not already present)\n    options: {\n        \"basics\" : \"load\"  // if set to \"load will load some global constants for html, body, font-family\", set to false to leave these unchanged.\n        \"exportCSS\": false // if true will wrap the output css in \"script\" tags.  \n        \"id\" : \"bw-default-styles\" // id assigned to the script tag, used for preventing multiple loading\n    }\n\n */\n    var s =\"\\n\", m=\"\",i;\n    //var i,j,k,l;\n    var _r = bw.fixNum;\n    var dopts = {\n        \"globals\"       : false,\n        \"id\"           : \"bw-default-styles\",\n        \"exportCSS\"    : false,\n        \"colorset\"     : {\"color\" : \"#000\", \"background-color\" :\"#ddd\", \"active\" : \"#222\"}, \n        \"themes\"       :  // built-in primitive themes\n            [ // must be valid CSS keys / values\n                [\".bw-thm-light\"  , {\"color\": \"#020202 !important;\", \"background-color\": \"#e2e2e2 !important;\"}],\n                [\".bw-thm-dark\"   , {\"color\": \"#e2e2e2 !important;\", \"background-color\": \"#020202 !important;\"}],\n            ]\n    };\n\n    dopts = optsCopy(dopts,options);\n\n    var defContainer     = \"{height: 100%;  width: 86%;  margin: 0 auto;  padding-left: 2%; padding-right:2%; left: 0;  top: 1%;}\\n\";\n    var defFontSerif     = \"{font-family: Times New Roman, Times, serif;}\\n\";\n    var defFontSansSerif = \"{font-family: Arial, Helvetica, sans-serif }\\n\";\n    \n\n    if (dopts[\"globals\"] == \"load\") {\n        s+= \"\\nhtml,body \"+ defContainer;\n        s+= \"*\"+defFontSansSerif;\n    }\n\n    s+= \".bw-def-page-setup\" + defContainer;\n    s+= \".bw-font-serif\"     + defFontSerif;\n    s+= \".bw-font-sans-serif\"+ defFontSansSerif;\n\n    s+= ([1,2,3,4,5,6].map(function(x){return \".bw-h\"+x+\"{ font-size: \"+_r(3.2*Math.pow(.85,x+1))+\"rem;}\";}).join(\"\\n\"))+\"\\n\";\n\n    //primtive in-built color themeing  see opts to overide\n    for (i in dopts[\"colorset\"]){\n        s+= \".bw-color-\"+i+\" {\"+i+\":\" +dopts[\"colorset\"][i]+\"}\\n\";\n    }\n\n    bw.makeCSS( dopts[\"themes\"]);\n    for (i=0; i< dopts[\"themes\"].length; i++) {\n        s+= bw.makeCSSObjectLine( dopts[\"themes\"][i]);\n        //s+= bw.makeCSS( dopts[\"themes\"][i])\n    }\n        \n    //text handling\n    s+= \".bw-left       { text-align: left;                            }\\n\";\n    s+= \".bw-right      { text-align: right;                           }\\n\";\n    s+= \".bw-center     { text-align: center; margin: 0 auto;          }\\n\";\n    s+= \".bw-justify    { text-align: justify;                         }\\n\";\n    s+= \".bw-code       { font-family:monospace; white-space:pre-wrap; }\\n\";\n    s+= \".bw-pad1       { padding-left: 1%; padding-right: 1%;         }\\n\";\n    \n    //tables\n    s+= \".bw-table-stripe    tr:nth-child(even){  background-color: #f0f0f0}\\n\";  // striped rows\n    s+= \".bw-table-col0-bold tr td:first-child {   font-weight: 700;}\\n\";         // make first col bold\n    s+= \".bw-table-compact   { border-collapse: collapse; border-spacing: 0;}\\n\";\n    s+= \".bw-table-sort-upa::after { content: \\\"\\\\2191\\\"; }\\n\";  // table sort arrow up (when visible arrows chosen)\n    s+= \".bw-table-sort-dna::after { content: \\\"\\\\2193\\\"; }\\n\";  // table sort arrow dn (when visible arrows chosen)\n    s+= \".bw-table-sort-xxa::after { content: \\\"\\\\00a0\\\"; }\\n\";  // table sort space  (when visible arrows chosen)\n\n    //tabs\n    s+= \".bw-tab-item-list    { margin: 0; padding-inline-start:0}\\n\";\n    s+= \".bw-tab-item         { display:inline; padding-top:5px; padding-left:10px; padding-right: 10px;  border-top-right-radius: 7px; border-top-left-radius: 7px;}\\n\";\n    s+= \".bw-tab-active       {/* padding-top:4px; padding-left:6px; padding-right:6px; padding-bottom:0;  */ font-weight:700;}\\n\";\n    s+= \".bw-tab:hover        { cursor: pointer;  font-weight: 700;/* border: 1px  solid #bbb; */}\\n\";\n    s+= \".bw-tab-content-list { margin: 0;  }\\n\";\n    s+= \".bw-tab-content      { display: none; margin-top:-1px; border-radius:0  }\\n\";\n    s+= \".bw-tab-content, .bw-tab-active       {background-color: #ddd}\\n\";\n\n    //grid\n    s+= \".bw-container  { margin: 0 auto;  }\\n\";\n    s+= \".bw-row        { width: 100%; display: block;  }\\n\";\n    s+= \".bw-row [class^=\\\"bw-col\\\"] {  float: left;}\\n\";\n    s+= [1,2,3,4,5,6,7,8,9,10,11,12].map(function(x){return \".bw-col-\"+x+\" {width:\"+ (_r(x*100/12))+\"%;\"+m+\" }\";}).join(\"\\n\");\n    s+= \"\\n\";\n    s+= \".bw-row::after { content: \\\"\\\";   display: table; clear: both;}\\n\";\n    s+= \".bw-box-1 {padding-top: 10px; padding-bottom: 10px; border-radius: 8px;}\\n\";\n    \n    //misc element controls\n    s+= \".bw-hide   { display: none;}\\n\";\n    s+= \".bw-show   { display: block;}\\n\";\n\n    //responsive screen\n    s+= \"@media only screen and (min-width: 540px) {  .bw-container {    width: 94%;  }}\\n\";\n    s+= \"@media only screen and (min-width: 720px) {  .bw-container {    width: 90%;  }}\\n\";\n    s+= \"@media only screen and (min-width: 960px) {  .bw-container {    width: 86%;  }}\\n\";\n    s+= \"@media only screen and (min-width: 1100px){  .bw-container {    width: 78%;  }}\\n\";\n    s+= \"\\n\";\n    \n    if (bw.isNodeJS() == false) {\n        var h  = document.getElementsByTagName(\"head\")[0];\n        var el = document.createElement(\"style\");\n        el.id = dopts[\"id\"];\n        el.textContent = s;\n\n        if (appendToHead && (document.getElementById(dopts[\"id\"]) == null))  // only append once\n            h.appendChild(el);\n    }\n    if (dopts[\"exportCSS\"])\n        s = bw.html([\"style\",{\"id\":dopts[\"id\"]},\"\\n/**\\n bitwrench basic css styles\\n version: \"+bw.version()[\"version\"]+\"\\n */\"+s]);\n    return s;\n};\n\nbw.bwSimpleStyles = bw.CSSSimpleStyles;\nbw.depAttr.push[\"bwSimpleStyles\"];\n\nbw.bwSimpleThemes = function (d,appendToHead) {\n/** \nbw.bwSimpleThemes() selects simple (we do mean simple) HTML themes for some basic elements.\nif d is an number it selects the built-in theme by index (see docs) else if d is a dictionary the elements\nin d will be converted to a CSS style.\n\noutput is a CSS style.  if appendToHead is true or omitted then the theme is appended to the head element.\n */\n    var s =\"\",xs={}, i;\n    var def = [  // default styles\n    { // dark theme\n        \"*\"  : \"background-color: #333; color: #ddd; font-family: sans-serif; box-sizing:border-box;\",\n        \"body\" : \"margin-top:1%;\",\n        \"th\"                       : \"background-color: #555\",\n        \"tbody tr:nth-child(even)\" : \"background-color: #f0f0f0\",\n        \"table, td, th\"            : \"border-collapse: collapse; border:1px solid #ddd; \",\n        \"td,th\"                    : \"padding:4px; \",\n        \"div,body,button,table,input\" : \"border-radius: 2px\"\n        //\"div\" : \"padding-left:2%; padding-right:2%; padding-top:1%;padding-bottom:1%;\"   \n    },\n    {// light theme\n        \"*\": \"background-color: #f8f8f8; color: #111; font-family: sans-serif; box-sizing:border-box;\",\n        \"body\" : \"margin-top:1%;\",\n        \"th\"                       : \"background-color: #ddd\",\n        \"tbody  tr:nth-child(even)\": \"background-color: #ddd\",\n        \"table, td, th\"            : \"border-collapse: collapse; border:1px solid #111; \",\n        \"td,th\"                    : \"padding:4px; \",\n        \"div,body,button,table,input\" : \"border-radius: 2px;\"\n        //\"div\" : \"padding-left:2%; padding-right:2%; padding-top:1%;padding-bottom:1%;\"   \n    }\n    ];\n\n    xs = bw.choice(_to(d),{\n            \"object\" : d,\n            \"number\" : ((d>=0) && (d<def.length))?def[d]:def[0] \n        },def[0]);\n\n\n    for (i in xs) {\n        s+= i + \" \" +\"{\"+xs[i]+\"}\\n\";\n    }\n    if (appendToHead != false) {\n        //var hs = document.getElementById(\"bw-simple-theme-styles\");\n        var hs = bw.DOM(\"bw-simple-theme-styles\");\n        if (hs.length == 0) {// first time\n            //var h  = document.getElementsByTagName(\"head\")[0];\n            var h = bw.DOM(\"head\")[0];\n            var el = document.createElement(\"style\");\n            el.id = \"bw-simple-theme-styles\";\n            el.textContent = s;  //note IE8 requires .text=\n            h.appendChild(el);\n        }\n        else { // replace it\n            hs.textContent = s; //note IE8 requires .text=\n        }\n\n    }\n\n    return s;\n};\n\n// =============================================================================================\nbw.selectTabContent = function (item, target) { \n/** \nThis function is used inside a tab block to show the appropriate content.  Note that this is\ndesigned to work even if code is emitted as document.getElementById(\"myTabs\").innerHTML = <<generated code..>>\nor statically written by the programmer.\n\nnote that DOM IDs are not required as selectTabContent() uses DOM path relative logic internally\n\n<div class=\"bw-tab-container\">  <!-- bw-tab-container -- bw-tab-items (array of items), bw-tab-content (array of content to show) -->\n    <ul class=\"bw-tab-item-list\"> <!-- container for the tabs -->\n        <li class=\"bw-tab userTab  bw-tab-active\" onclick=\"bw.selectTabContent(this)\" >Tab 1</li>\n        <li class=\"bw-tab userTab  \" onclick=\"bw.selectTabContent(this)\" >Tab 2</li>\n        <li class=\"bw-tab userTab  \" onclick=\"bw.selectTabContent(this)\" >Tab 3</li>\n        <li class=\"bw-tab userTab  \" onclick=\"bw.selectTabContent(this)\" >Tab 4</li>\n    </ul>\n    <div class=\"bw-tab-content-list\"> <!-- container for the tab content -->\n        <div class=\"bw-tab-content bw-show\" >coontent area 1 </div>  <!-- bw-show picks which tab to make active at first -->\n        <div class=\"bw-tab-content\" >content area 2</div>\n        <div class=\"bw-tab-content\" >content 3</div>\n        <div class=\"bw-tab-content\" >content 4</div>\n    </div> <!-- end of tab content sect -->\n</div>\n */\n    //if (bw.typeOf(item)==\"string\")\n    //    item = document.getElementById(item);\n    item = bw.DOM(item)[0];\n\n    if (bw.typeOf(item).substr(0,4) != \"html\")\n       return false;  //unable to set tab content\n\n    var index=0;\n    var cols = item.parentElement.getElementsByTagName(\"li\");\n    //update which tab selected\n    for (i=0; i< cols.length; i++) {\n        if (cols[i] == item) { // selected tab logic\n            index = i;\n            bw.markElement(cols[i],\"bw-tab-active\",\"bw-tab-active\");\n        }\n        else { // unselected tab logic\n            bw.markElement(cols[i],\"bw-tab-active\",\"\");\n        }\n    }\n    //console.log(item);\n    var tcols = item.parentNode.parentNode.getElementsByClassName(\"bw-tab-content-list\")[0].getElementsByClassName(\"bw-tab-content\");\n    if (tcols.length <= 0)\n        return false;\n\n    target = (bw.typeOf(target) == \"undefined\") ? tcols[index] : target;  //we will infer it by the tab index\n    target = (bw.typeOf(target) == \"string\"   ) ? document.getElementById(target) : target;  // we hav an ID so we'll use that\n    var i;\n    for (i=0; i < tcols.length; i++) {\n        if (tcols[i] == target) \n            bw.markElement(tcols[i],\"bw-show\",\"bw-show\"); //tcols[i].style.display = \"block\";\n        else\n            bw.markElement(tcols[i],\"bw-show\",\"\");//tcols[i].style.display = \"none\";  \n    }\n    return true;  \n};\n\n// =============================================================================================\n\nbw.DOMClass = function(el, key, replace) {\n/** \nbw.DOMClass(el,value) \n\nreturns whether a specific DOM element class name (key) is set on atleast one the supplied element(s).  \n\nIf replace is supplied then the class name (key) is replaced or added if it doesn't exist.\n    note that if key is not found but a replace is supplied the return-value is still false as the supplied key was not found \n\nel must be valid element or CSS selector\n\nmarkElement is used by bw UI toggles\n */\n    var r = false, elems, x,j;\n    //if (bw.typeOf(el) == \"string\")\n    //    el=document.getElementById(el);\n    elems = bw.DOM(el);\n    if (elems.length <=0 )\n        return r;\n\n    for (j=0; j< elems.length; j++) {\n        x = elems[j];\n        try {\n            var c = x.className.split(/[ ]+/);\n            var i = c.indexOf(key);\n\n            if (i >= 0) // found key\n                r = true;\n            \n            \n            if ((bw.typeOf(replace) == \"string\") && (c.indexOf(replace)== -1)){\n                if (i == -1) //key not found\n                    c.push(replace);\n                else {\n                    if (replace.length > 0)\n                       c[i]=replace;\n                    else\n                       c.splice(i,1);\n                }\n                x.className  = c.join(\" \").trim();\n                r = true;\n                // element.className = element.className.replace(/\\bmystyle\\b/g, \"\");\n            }\n        }\n        catch(e) { bw.log(e);}\n    }\n    return r;\n};\nbw.markElement = bw.DOMClass;\nbw.depAttr.push(\"markElement\");\n\n// =============================================================================================\nbw.DOMClassToggle  = function(el,className) {\n/**\nbw.DOMClassToggle(el,classname) \nfor each element specified in el (eg \"#id\", \".myClass\", \"h2\", <DOM OBJECT>) toggle className.\n\nIf className is present on the object then it is removed. if it is not present it is added.\n\n\nclassNames with spaces or tabs are not valid and result in undefined behavior.\n\nreturns last element current toggle state.\n*/    \n    var x,i,elems = bw.DOM(el), r=false;\n    for (i=0; i< elems.length; i++) {\n        x=elems[i];\n        try {\n            r = bw.DOMClass(x,className);\n            if (r)\n                bw.DOMClass(x,className,\"\");\n            else\n                bw.DOMClass(x,className,className);\n\n        } catch(e) { bw.log(e);    }\n    }\n    return !r;\n};\n// =============================================================================================\nbw.version  = function() {\n/** \n@method version() - bitwrench runtime version & license info.\n\n */\n    var v = {\n        \"version\"   : \"1.2.3\", \n        \"about\"     : \"bitwrench is a simple library of miscellaneous Javascript helper functions for common web design tasks.\", \n        \"copy\"      : \"(c) M A Chatterjee deftio (at) deftio (dot) com\",    \n        \"url\"       : \"http://github.com/deftio/bitwrench\",\n        \"license\"   : \"BSD-2-Clause\"\n    };\n    return v;\n};\n\n// ==============================================================================================\n/** \ncommand line handling\n\nthis can be done via URL e.g. myPage.com?bw-load-styles=true\n\nor via script tag\n<script type=\"text/javascript\" src=\"./path/to/bitwrenchjs\" bwargs=\"bw-load-styles=true\"></script>\n\n */\nbw.bwargs = {enableUJURLArgs : \"true\"}; // the arguments are exported so one can see them as a simple dict\n\nvar parseArgs = function(s) {\n    var args = {};\n    if ((typeof s == \"string\") && (s!= \"\")) {\n        s=s.split(\";\");\n        var j;\n        for (j in s) {\n            var k = s[j].split(\":\");\n            args[k[0]]=k[1];\n        }\n    }\n    return args;\n};\n\nvar getArgs =  function () {\n    if(bw.isNodeJS()==false) { // in browser\n        //var els = document.getElementsByTagName(\"script\"); // array of script elements\n        var els = bw.DOM(\"script\");\n        var i,a,b;\n        for (i in els) {\n            try {\n               // bw.log(_args[i]);\n                var el = els[i]; //\n                if (el.hasOwnProperty(\"src\") != false)\n                    break; \n\n                var s = String(el.getAttribute(\"src\"));\n                var f = \"bitwrench.js\";\n\n                if (s.toLocaleLowerCase().substring(s.length-f.length,s.length) == f.toLocaleLowerCase()) {\n                    s = _to(s) == \"string\" ? el.getAttribute(\"bwargs\") : [\"\"];\n                    s = _to(s) == \"string\" ? el.getAttribute(\"data-bwargs\") : s; //the html4/5 standard way\n                    a = parseArgs(s);\n                    for (b in a)\n                        bw.bwargs[b]=a[b];\n                }\n                \n            } catch (e) { \n                //bw.log(String([\"err 1418\",i,e]));\n            }  \n        }\n\n        //pick up from URL\n        if(bw.bwargs[\"enableUJURLArgs\"] == \"true\") { //note string literal \"true\" \n        //note in the script tag you can disable ?bwload=foo:bar; params with this\n        //<script type=\"text/javascript\" src=\"./path/to/bitwrench.js\" bwargs=\"enableURLConfig:false\"></script>\n            a = parseArgs(bw.getURLParam(\"bwargs\",\"\"));        \n            for (b in a)\n                bw.bwargs[b]=a[b];\n        }\n    }\n};\n\n\n// ==============================================================================================\n// ==============================================================================================\n// ==============================================================================================\n//internally used function declarations:\n\n\ngetArgs();  \n\n// do command line stuff\nvar loadStyles      =  bw.bwargs[\"bw-load-styles\"]!=\"false\";\nvar loadStyleBasics =  bw.typeAssign(bw.bwargs[\"bw-load-style-basics\"],\"string\",bw.bwargs[\"bw-load-style-basics\"],\"load\");\nbw.bwSimpleStyles(loadStyles,{\"basics\":loadStyleBasics}); // append to head the bitwrench css styles by default\n\nbw.funcRegister(bw.log,\"bw_log\");  // this is globally registered for debugging purposes, it will never get called though unless programmer does this explicitly.\n\n//})( ((typeof bw) == \"undefined\") ? this[\"bw\"]={} : bw);\n    return bw;\n}));\n\n\n\n//# sourceURL=webpack://docbat/./node_modules/bitwrench/bitwrench.js?");

/***/ }),

/***/ "./node_modules/showdown/dist/showdown.js":
/*!************************************************!*\
  !*** ./node_modules/showdown/dist/showdown.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;;/*! showdown v 1.9.1 - 02-11-2019 */\r\n(function(){\r\n/**\n * Created by Tivie on 13-07-2015.\n */\n\nfunction getDefaultOpts (simple) {\n  'use strict';\n\n  var defaultOptions = {\n    omitExtraWLInCodeBlocks: {\n      defaultValue: false,\n      describe: 'Omit the default extra whiteline added to code blocks',\n      type: 'boolean'\n    },\n    noHeaderId: {\n      defaultValue: false,\n      describe: 'Turn on/off generated header id',\n      type: 'boolean'\n    },\n    prefixHeaderId: {\n      defaultValue: false,\n      describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \\'section-\\' prefix',\n      type: 'string'\n    },\n    rawPrefixHeaderId: {\n      defaultValue: false,\n      describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the \" char is used in the prefix)',\n      type: 'boolean'\n    },\n    ghCompatibleHeaderId: {\n      defaultValue: false,\n      describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',\n      type: 'boolean'\n    },\n    rawHeaderId: {\n      defaultValue: false,\n      describe: 'Remove only spaces, \\' and \" from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',\n      type: 'boolean'\n    },\n    headerLevelStart: {\n      defaultValue: false,\n      describe: 'The header blocks level start',\n      type: 'integer'\n    },\n    parseImgDimensions: {\n      defaultValue: false,\n      describe: 'Turn on/off image dimension parsing',\n      type: 'boolean'\n    },\n    simplifiedAutoLink: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM autolink style',\n      type: 'boolean'\n    },\n    excludeTrailingPunctuationFromURLs: {\n      defaultValue: false,\n      describe: 'Excludes trailing punctuation from links generated with autoLinking',\n      type: 'boolean'\n    },\n    literalMidWordUnderscores: {\n      defaultValue: false,\n      describe: 'Parse midword underscores as literal underscores',\n      type: 'boolean'\n    },\n    literalMidWordAsterisks: {\n      defaultValue: false,\n      describe: 'Parse midword asterisks as literal asterisks',\n      type: 'boolean'\n    },\n    strikethrough: {\n      defaultValue: false,\n      describe: 'Turn on/off strikethrough support',\n      type: 'boolean'\n    },\n    tables: {\n      defaultValue: false,\n      describe: 'Turn on/off tables support',\n      type: 'boolean'\n    },\n    tablesHeaderId: {\n      defaultValue: false,\n      describe: 'Add an id to table headers',\n      type: 'boolean'\n    },\n    ghCodeBlocks: {\n      defaultValue: true,\n      describe: 'Turn on/off GFM fenced code blocks support',\n      type: 'boolean'\n    },\n    tasklists: {\n      defaultValue: false,\n      describe: 'Turn on/off GFM tasklist support',\n      type: 'boolean'\n    },\n    smoothLivePreview: {\n      defaultValue: false,\n      describe: 'Prevents weird effects in live previews due to incomplete input',\n      type: 'boolean'\n    },\n    smartIndentationFix: {\n      defaultValue: false,\n      description: 'Tries to smartly fix indentation in es6 strings',\n      type: 'boolean'\n    },\n    disableForced4SpacesIndentedSublists: {\n      defaultValue: false,\n      description: 'Disables the requirement of indenting nested sublists by 4 spaces',\n      type: 'boolean'\n    },\n    simpleLineBreaks: {\n      defaultValue: false,\n      description: 'Parses simple line breaks as <br> (GFM Style)',\n      type: 'boolean'\n    },\n    requireSpaceBeforeHeadingText: {\n      defaultValue: false,\n      description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',\n      type: 'boolean'\n    },\n    ghMentions: {\n      defaultValue: false,\n      description: 'Enables github @mentions',\n      type: 'boolean'\n    },\n    ghMentionsLink: {\n      defaultValue: 'https://github.com/{u}',\n      description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',\n      type: 'string'\n    },\n    encodeEmails: {\n      defaultValue: true,\n      description: 'Encode e-mail addresses through the use of Character Entities, transforming ASCII e-mail addresses into its equivalent decimal entities',\n      type: 'boolean'\n    },\n    openLinksInNewWindow: {\n      defaultValue: false,\n      description: 'Open all links in new windows',\n      type: 'boolean'\n    },\n    backslashEscapesHTMLTags: {\n      defaultValue: false,\n      description: 'Support for HTML Tag escaping. ex: \\<div>foo\\</div>',\n      type: 'boolean'\n    },\n    emoji: {\n      defaultValue: false,\n      description: 'Enable emoji support. Ex: `this is a :smile: emoji`',\n      type: 'boolean'\n    },\n    underline: {\n      defaultValue: false,\n      description: 'Enable support for underline. Syntax is double or triple underscores: `__underline word__`. With this option enabled, underscores no longer parses into `<em>` and `<strong>`',\n      type: 'boolean'\n    },\n    completeHTMLDocument: {\n      defaultValue: false,\n      description: 'Outputs a complete html document, including `<html>`, `<head>` and `<body>` tags',\n      type: 'boolean'\n    },\n    metadata: {\n      defaultValue: false,\n      description: 'Enable support for document metadata (defined at the top of the document between `«««` and `»»»` or between `---` and `---`).',\n      type: 'boolean'\n    },\n    splitAdjacentBlockquotes: {\n      defaultValue: false,\n      description: 'Split adjacent blockquote blocks',\n      type: 'boolean'\n    }\n  };\n  if (simple === false) {\n    return JSON.parse(JSON.stringify(defaultOptions));\n  }\n  var ret = {};\n  for (var opt in defaultOptions) {\n    if (defaultOptions.hasOwnProperty(opt)) {\n      ret[opt] = defaultOptions[opt].defaultValue;\n    }\n  }\n  return ret;\n}\n\nfunction allOptionsOn () {\n  'use strict';\n  var options = getDefaultOpts(true),\n      ret = {};\n  for (var opt in options) {\n    if (options.hasOwnProperty(opt)) {\n      ret[opt] = true;\n    }\n  }\n  return ret;\n}\n\r\n/**\n * Created by Tivie on 06-01-2015.\n */\n\n// Private properties\nvar showdown = {},\n    parsers = {},\n    extensions = {},\n    globalOptions = getDefaultOpts(true),\n    setFlavor = 'vanilla',\n    flavor = {\n      github: {\n        omitExtraWLInCodeBlocks:              true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        disableForced4SpacesIndentedSublists: true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghCompatibleHeaderId:                 true,\n        ghMentions:                           true,\n        backslashEscapesHTMLTags:             true,\n        emoji:                                true,\n        splitAdjacentBlockquotes:             true\n      },\n      original: {\n        noHeaderId:                           true,\n        ghCodeBlocks:                         false\n      },\n      ghost: {\n        omitExtraWLInCodeBlocks:              true,\n        parseImgDimensions:                   true,\n        simplifiedAutoLink:                   true,\n        excludeTrailingPunctuationFromURLs:   true,\n        literalMidWordUnderscores:            true,\n        strikethrough:                        true,\n        tables:                               true,\n        tablesHeaderId:                       true,\n        ghCodeBlocks:                         true,\n        tasklists:                            true,\n        smoothLivePreview:                    true,\n        simpleLineBreaks:                     true,\n        requireSpaceBeforeHeadingText:        true,\n        ghMentions:                           false,\n        encodeEmails:                         true\n      },\n      vanilla: getDefaultOpts(true),\n      allOn: allOptionsOn()\n    };\n\n/**\n * helper namespace\n * @type {{}}\n */\nshowdown.helper = {};\n\n/**\n * TODO LEGACY SUPPORT CODE\n * @type {{}}\n */\nshowdown.extensions = {};\n\n/**\n * Set a global option\n * @static\n * @param {string} key\n * @param {*} value\n * @returns {showdown}\n */\nshowdown.setOption = function (key, value) {\n  'use strict';\n  globalOptions[key] = value;\n  return this;\n};\n\n/**\n * Get a global option\n * @static\n * @param {string} key\n * @returns {*}\n */\nshowdown.getOption = function (key) {\n  'use strict';\n  return globalOptions[key];\n};\n\n/**\n * Get the global options\n * @static\n * @returns {{}}\n */\nshowdown.getOptions = function () {\n  'use strict';\n  return globalOptions;\n};\n\n/**\n * Reset global options to the default values\n * @static\n */\nshowdown.resetOptions = function () {\n  'use strict';\n  globalOptions = getDefaultOpts(true);\n};\n\n/**\n * Set the flavor showdown should use as default\n * @param {string} name\n */\nshowdown.setFlavor = function (name) {\n  'use strict';\n  if (!flavor.hasOwnProperty(name)) {\n    throw Error(name + ' flavor was not found');\n  }\n  showdown.resetOptions();\n  var preset = flavor[name];\n  setFlavor = name;\n  for (var option in preset) {\n    if (preset.hasOwnProperty(option)) {\n      globalOptions[option] = preset[option];\n    }\n  }\n};\n\n/**\n * Get the currently set flavor\n * @returns {string}\n */\nshowdown.getFlavor = function () {\n  'use strict';\n  return setFlavor;\n};\n\n/**\n * Get the options of a specified flavor. Returns undefined if the flavor was not found\n * @param {string} name Name of the flavor\n * @returns {{}|undefined}\n */\nshowdown.getFlavorOptions = function (name) {\n  'use strict';\n  if (flavor.hasOwnProperty(name)) {\n    return flavor[name];\n  }\n};\n\n/**\n * Get the default options\n * @static\n * @param {boolean} [simple=true]\n * @returns {{}}\n */\nshowdown.getDefaultOptions = function (simple) {\n  'use strict';\n  return getDefaultOpts(simple);\n};\n\n/**\n * Get or set a subParser\n *\n * subParser(name)       - Get a registered subParser\n * subParser(name, func) - Register a subParser\n * @static\n * @param {string} name\n * @param {function} [func]\n * @returns {*}\n */\nshowdown.subParser = function (name, func) {\n  'use strict';\n  if (showdown.helper.isString(name)) {\n    if (typeof func !== 'undefined') {\n      parsers[name] = func;\n    } else {\n      if (parsers.hasOwnProperty(name)) {\n        return parsers[name];\n      } else {\n        throw Error('SubParser named ' + name + ' not registered!');\n      }\n    }\n  }\n};\n\n/**\n * Gets or registers an extension\n * @static\n * @param {string} name\n * @param {object|function=} ext\n * @returns {*}\n */\nshowdown.extension = function (name, ext) {\n  'use strict';\n\n  if (!showdown.helper.isString(name)) {\n    throw Error('Extension \\'name\\' must be a string');\n  }\n\n  name = showdown.helper.stdExtName(name);\n\n  // Getter\n  if (showdown.helper.isUndefined(ext)) {\n    if (!extensions.hasOwnProperty(name)) {\n      throw Error('Extension named ' + name + ' is not registered!');\n    }\n    return extensions[name];\n\n    // Setter\n  } else {\n    // Expand extension if it's wrapped in a function\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    // Ensure extension is an array\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExtension = validate(ext, name);\n\n    if (validExtension.valid) {\n      extensions[name] = ext;\n    } else {\n      throw Error(validExtension.error);\n    }\n  }\n};\n\n/**\n * Gets all extensions registered\n * @returns {{}}\n */\nshowdown.getAllExtensions = function () {\n  'use strict';\n  return extensions;\n};\n\n/**\n * Remove an extension\n * @param {string} name\n */\nshowdown.removeExtension = function (name) {\n  'use strict';\n  delete extensions[name];\n};\n\n/**\n * Removes all extensions\n */\nshowdown.resetExtensions = function () {\n  'use strict';\n  extensions = {};\n};\n\n/**\n * Validate extension\n * @param {array} extension\n * @param {string} name\n * @returns {{valid: boolean, error: string}}\n */\nfunction validate (extension, name) {\n  'use strict';\n\n  var errMsg = (name) ? 'Error in ' + name + ' extension->' : 'Error in unnamed extension',\n      ret = {\n        valid: true,\n        error: ''\n      };\n\n  if (!showdown.helper.isArray(extension)) {\n    extension = [extension];\n  }\n\n  for (var i = 0; i < extension.length; ++i) {\n    var baseMsg = errMsg + ' sub-extension ' + i + ': ',\n        ext = extension[i];\n    if (typeof ext !== 'object') {\n      ret.valid = false;\n      ret.error = baseMsg + 'must be an object, but ' + typeof ext + ' given';\n      return ret;\n    }\n\n    if (!showdown.helper.isString(ext.type)) {\n      ret.valid = false;\n      ret.error = baseMsg + 'property \"type\" must be a string, but ' + typeof ext.type + ' given';\n      return ret;\n    }\n\n    var type = ext.type = ext.type.toLowerCase();\n\n    // normalize extension type\n    if (type === 'language') {\n      type = ext.type = 'lang';\n    }\n\n    if (type === 'html') {\n      type = ext.type = 'output';\n    }\n\n    if (type !== 'lang' && type !== 'output' && type !== 'listener') {\n      ret.valid = false;\n      ret.error = baseMsg + 'type ' + type + ' is not recognized. Valid values: \"lang/language\", \"output/html\" or \"listener\"';\n      return ret;\n    }\n\n    if (type === 'listener') {\n      if (showdown.helper.isUndefined(ext.listeners)) {\n        ret.valid = false;\n        ret.error = baseMsg + '. Extensions of type \"listener\" must have a property called \"listeners\"';\n        return ret;\n      }\n    } else {\n      if (showdown.helper.isUndefined(ext.filter) && showdown.helper.isUndefined(ext.regex)) {\n        ret.valid = false;\n        ret.error = baseMsg + type + ' extensions must define either a \"regex\" property or a \"filter\" method';\n        return ret;\n      }\n    }\n\n    if (ext.listeners) {\n      if (typeof ext.listeners !== 'object') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"listeners\" property must be an object but ' + typeof ext.listeners + ' given';\n        return ret;\n      }\n      for (var ln in ext.listeners) {\n        if (ext.listeners.hasOwnProperty(ln)) {\n          if (typeof ext.listeners[ln] !== 'function') {\n            ret.valid = false;\n            ret.error = baseMsg + '\"listeners\" property must be an hash of [event name]: [callback]. listeners.' + ln +\n              ' must be a function but ' + typeof ext.listeners[ln] + ' given';\n            return ret;\n          }\n        }\n      }\n    }\n\n    if (ext.filter) {\n      if (typeof ext.filter !== 'function') {\n        ret.valid = false;\n        ret.error = baseMsg + '\"filter\" must be a function, but ' + typeof ext.filter + ' given';\n        return ret;\n      }\n    } else if (ext.regex) {\n      if (showdown.helper.isString(ext.regex)) {\n        ext.regex = new RegExp(ext.regex, 'g');\n      }\n      if (!(ext.regex instanceof RegExp)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" property must either be a string or a RegExp object, but ' + typeof ext.regex + ' given';\n        return ret;\n      }\n      if (showdown.helper.isUndefined(ext.replace)) {\n        ret.valid = false;\n        ret.error = baseMsg + '\"regex\" extensions must implement a replace string or function';\n        return ret;\n      }\n    }\n  }\n  return ret;\n}\n\n/**\n * Validate extension\n * @param {object} ext\n * @returns {boolean}\n */\nshowdown.validateExtension = function (ext) {\n  'use strict';\n\n  var validateExtension = validate(ext, null);\n  if (!validateExtension.valid) {\n    console.warn(validateExtension.error);\n    return false;\n  }\n  return true;\n};\n\r\n/**\n * showdownjs helper functions\n */\n\nif (!showdown.hasOwnProperty('helper')) {\n  showdown.helper = {};\n}\n\n/**\n * Check if var is string\n * @static\n * @param {string} a\n * @returns {boolean}\n */\nshowdown.helper.isString = function (a) {\n  'use strict';\n  return (typeof a === 'string' || a instanceof String);\n};\n\n/**\n * Check if var is a function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isFunction = function (a) {\n  'use strict';\n  var getType = {};\n  return a && getType.toString.call(a) === '[object Function]';\n};\n\n/**\n * isArray helper function\n * @static\n * @param {*} a\n * @returns {boolean}\n */\nshowdown.helper.isArray = function (a) {\n  'use strict';\n  return Array.isArray(a);\n};\n\n/**\n * Check if value is undefined\n * @static\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.\n */\nshowdown.helper.isUndefined = function (value) {\n  'use strict';\n  return typeof value === 'undefined';\n};\n\n/**\n * ForEach helper function\n * Iterates over Arrays and Objects (own properties only)\n * @static\n * @param {*} obj\n * @param {function} callback Accepts 3 params: 1. value, 2. key, 3. the original array/object\n */\nshowdown.helper.forEach = function (obj, callback) {\n  'use strict';\n  // check if obj is defined\n  if (showdown.helper.isUndefined(obj)) {\n    throw new Error('obj param is required');\n  }\n\n  if (showdown.helper.isUndefined(callback)) {\n    throw new Error('callback param is required');\n  }\n\n  if (!showdown.helper.isFunction(callback)) {\n    throw new Error('callback param must be a function/closure');\n  }\n\n  if (typeof obj.forEach === 'function') {\n    obj.forEach(callback);\n  } else if (showdown.helper.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      callback(obj[i], i, obj);\n    }\n  } else if (typeof (obj) === 'object') {\n    for (var prop in obj) {\n      if (obj.hasOwnProperty(prop)) {\n        callback(obj[prop], prop, obj);\n      }\n    }\n  } else {\n    throw new Error('obj does not seem to be an array or an iterable object');\n  }\n};\n\n/**\n * Standardidize extension name\n * @static\n * @param {string} s extension name\n * @returns {string}\n */\nshowdown.helper.stdExtName = function (s) {\n  'use strict';\n  return s.replace(/[_?*+\\/\\\\.^-]/g, '').replace(/\\s/g, '').toLowerCase();\n};\n\nfunction escapeCharactersCallback (wholeMatch, m1) {\n  'use strict';\n  var charCodeToEscape = m1.charCodeAt(0);\n  return '¨E' + charCodeToEscape + 'E';\n}\n\n/**\n * Callback used to escape characters when passing through String.replace\n * @static\n * @param {string} wholeMatch\n * @param {string} m1\n * @returns {string}\n */\nshowdown.helper.escapeCharactersCallback = escapeCharactersCallback;\n\n/**\n * Escape characters in a string\n * @static\n * @param {string} text\n * @param {string} charsToEscape\n * @param {boolean} afterBackslash\n * @returns {XML|string|void|*}\n */\nshowdown.helper.escapeCharacters = function (text, charsToEscape, afterBackslash) {\n  'use strict';\n  // First we have to escape the escape characters so that\n  // we can build a character class out of them\n  var regexString = '([' + charsToEscape.replace(/([\\[\\]\\\\])/g, '\\\\$1') + '])';\n\n  if (afterBackslash) {\n    regexString = '\\\\\\\\' + regexString;\n  }\n\n  var regex = new RegExp(regexString, 'g');\n  text = text.replace(regex, escapeCharactersCallback);\n\n  return text;\n};\n\n/**\n * Unescape HTML entities\n * @param txt\n * @returns {string}\n */\nshowdown.helper.unescapeHTMLEntities = function (txt) {\n  'use strict';\n\n  return txt\n    .replace(/&quot;/g, '\"')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&amp;/g, '&');\n};\n\nvar rgxFindMatchPos = function (str, left, right, flags) {\n  'use strict';\n  var f = flags || '',\n      g = f.indexOf('g') > -1,\n      x = new RegExp(left + '|' + right, 'g' + f.replace(/g/g, '')),\n      l = new RegExp(left, f.replace(/g/g, '')),\n      pos = [],\n      t, s, m, start, end;\n\n  do {\n    t = 0;\n    while ((m = x.exec(str))) {\n      if (l.test(m[0])) {\n        if (!(t++)) {\n          s = x.lastIndex;\n          start = s - m[0].length;\n        }\n      } else if (t) {\n        if (!--t) {\n          end = m.index + m[0].length;\n          var obj = {\n            left: {start: start, end: s},\n            match: {start: s, end: m.index},\n            right: {start: m.index, end: end},\n            wholeMatch: {start: start, end: end}\n          };\n          pos.push(obj);\n          if (!g) {\n            return pos;\n          }\n        }\n      }\n    }\n  } while (t && (x.lastIndex = s));\n\n  return pos;\n};\n\n/**\n * matchRecursiveRegExp\n *\n * (c) 2007 Steven Levithan <stevenlevithan.com>\n * MIT License\n *\n * Accepts a string to search, a left and right format delimiter\n * as regex patterns, and optional regex flags. Returns an array\n * of matches, allowing nested instances of left/right delimiters.\n * Use the \"g\" flag to return all matches, otherwise only the\n * first is returned. Be careful to ensure that the left and\n * right format delimiters produce mutually exclusive matches.\n * Backreferences are not supported within the right delimiter\n * due to how it is internally combined with the left delimiter.\n * When matching strings whose format delimiters are unbalanced\n * to the left or right, the output is intentionally as a\n * conventional regex library with recursion support would\n * produce, e.g. \"<<x>\" and \"<x>>\" both produce [\"x\"] when using\n * \"<\" and \">\" as the delimiters (both strings contain a single,\n * balanced instance of \"<x>\").\n *\n * examples:\n * matchRecursiveRegExp(\"test\", \"\\\\(\", \"\\\\)\")\n * returns: []\n * matchRecursiveRegExp(\"<t<<e>><s>>t<>\", \"<\", \">\", \"g\")\n * returns: [\"t<<e>><s>\", \"\"]\n * matchRecursiveRegExp(\"<div id=\\\"x\\\">test</div>\", \"<div\\\\b[^>]*>\", \"</div>\", \"gi\")\n * returns: [\"test\"]\n */\nshowdown.helper.matchRecursiveRegExp = function (str, left, right, flags) {\n  'use strict';\n\n  var matchPos = rgxFindMatchPos (str, left, right, flags),\n      results = [];\n\n  for (var i = 0; i < matchPos.length; ++i) {\n    results.push([\n      str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n      str.slice(matchPos[i].match.start, matchPos[i].match.end),\n      str.slice(matchPos[i].left.start, matchPos[i].left.end),\n      str.slice(matchPos[i].right.start, matchPos[i].right.end)\n    ]);\n  }\n  return results;\n};\n\n/**\n *\n * @param {string} str\n * @param {string|function} replacement\n * @param {string} left\n * @param {string} right\n * @param {string} flags\n * @returns {string}\n */\nshowdown.helper.replaceRecursiveRegExp = function (str, replacement, left, right, flags) {\n  'use strict';\n\n  if (!showdown.helper.isFunction(replacement)) {\n    var repStr = replacement;\n    replacement = function () {\n      return repStr;\n    };\n  }\n\n  var matchPos = rgxFindMatchPos(str, left, right, flags),\n      finalStr = str,\n      lng = matchPos.length;\n\n  if (lng > 0) {\n    var bits = [];\n    if (matchPos[0].wholeMatch.start !== 0) {\n      bits.push(str.slice(0, matchPos[0].wholeMatch.start));\n    }\n    for (var i = 0; i < lng; ++i) {\n      bits.push(\n        replacement(\n          str.slice(matchPos[i].wholeMatch.start, matchPos[i].wholeMatch.end),\n          str.slice(matchPos[i].match.start, matchPos[i].match.end),\n          str.slice(matchPos[i].left.start, matchPos[i].left.end),\n          str.slice(matchPos[i].right.start, matchPos[i].right.end)\n        )\n      );\n      if (i < lng - 1) {\n        bits.push(str.slice(matchPos[i].wholeMatch.end, matchPos[i + 1].wholeMatch.start));\n      }\n    }\n    if (matchPos[lng - 1].wholeMatch.end < str.length) {\n      bits.push(str.slice(matchPos[lng - 1].wholeMatch.end));\n    }\n    finalStr = bits.join('');\n  }\n  return finalStr;\n};\n\n/**\n * Returns the index within the passed String object of the first occurrence of the specified regex,\n * starting the search at fromIndex. Returns -1 if the value is not found.\n *\n * @param {string} str string to search\n * @param {RegExp} regex Regular expression to search\n * @param {int} [fromIndex = 0] Index to start the search\n * @returns {Number}\n * @throws InvalidArgumentError\n */\nshowdown.helper.regexIndexOf = function (str, regex, fromIndex) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  if (regex instanceof RegExp === false) {\n    throw 'InvalidArgumentError: second parameter of showdown.helper.regexIndexOf function must be an instance of RegExp';\n  }\n  var indexOf = str.substring(fromIndex || 0).search(regex);\n  return (indexOf >= 0) ? (indexOf + (fromIndex || 0)) : indexOf;\n};\n\n/**\n * Splits the passed string object at the defined index, and returns an array composed of the two substrings\n * @param {string} str string to split\n * @param {int} index index to split string at\n * @returns {[string,string]}\n * @throws InvalidArgumentError\n */\nshowdown.helper.splitAtIndex = function (str, index) {\n  'use strict';\n  if (!showdown.helper.isString(str)) {\n    throw 'InvalidArgumentError: first parameter of showdown.helper.regexIndexOf function must be a string';\n  }\n  return [str.substring(0, index), str.substring(index)];\n};\n\n/**\n * Obfuscate an e-mail address through the use of Character Entities,\n * transforming ASCII characters into their equivalent decimal or hex entities.\n *\n * Since it has a random component, subsequent calls to this function produce different results\n *\n * @param {string} mail\n * @returns {string}\n */\nshowdown.helper.encodeEmailAddress = function (mail) {\n  'use strict';\n  var encode = [\n    function (ch) {\n      return '&#' + ch.charCodeAt(0) + ';';\n    },\n    function (ch) {\n      return '&#x' + ch.charCodeAt(0).toString(16) + ';';\n    },\n    function (ch) {\n      return ch;\n    }\n  ];\n\n  mail = mail.replace(/./g, function (ch) {\n    if (ch === '@') {\n      // this *must* be encoded. I insist.\n      ch = encode[Math.floor(Math.random() * 2)](ch);\n    } else {\n      var r = Math.random();\n      // roughly 10% raw, 45% hex, 45% dec\n      ch = (\n        r > 0.9 ? encode[2](ch) : r > 0.45 ? encode[1](ch) : encode[0](ch)\n      );\n    }\n    return ch;\n  });\n\n  return mail;\n};\n\n/**\n *\n * @param str\n * @param targetLength\n * @param padString\n * @returns {string}\n */\nshowdown.helper.padEnd = function padEnd (str, targetLength, padString) {\n  'use strict';\n  /*jshint bitwise: false*/\n  // eslint-disable-next-line space-infix-ops\n  targetLength = targetLength>>0; //floor if number or convert non-number to 0;\n  /*jshint bitwise: true*/\n  padString = String(padString || ' ');\n  if (str.length > targetLength) {\n    return String(str);\n  } else {\n    targetLength = targetLength - str.length;\n    if (targetLength > padString.length) {\n      padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\n    }\n    return String(str) + padString.slice(0,targetLength);\n  }\n};\n\n/**\n * POLYFILLS\n */\n// use this instead of builtin is undefined for IE8 compatibility\nif (typeof console === 'undefined') {\n  console = {\n    warn: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    log: function (msg) {\n      'use strict';\n      alert(msg);\n    },\n    error: function (msg) {\n      'use strict';\n      throw msg;\n    }\n  };\n}\n\n/**\n * Common regexes.\n * We declare some common regexes to improve performance\n */\nshowdown.helper.regexes = {\n  asteriskDashAndColon: /([*_:~])/g\n};\n\n/**\n * EMOJIS LIST\n */\nshowdown.helper.emojis = {\n  '+1':'\\ud83d\\udc4d',\n  '-1':'\\ud83d\\udc4e',\n  '100':'\\ud83d\\udcaf',\n  '1234':'\\ud83d\\udd22',\n  '1st_place_medal':'\\ud83e\\udd47',\n  '2nd_place_medal':'\\ud83e\\udd48',\n  '3rd_place_medal':'\\ud83e\\udd49',\n  '8ball':'\\ud83c\\udfb1',\n  'a':'\\ud83c\\udd70\\ufe0f',\n  'ab':'\\ud83c\\udd8e',\n  'abc':'\\ud83d\\udd24',\n  'abcd':'\\ud83d\\udd21',\n  'accept':'\\ud83c\\ude51',\n  'aerial_tramway':'\\ud83d\\udea1',\n  'airplane':'\\u2708\\ufe0f',\n  'alarm_clock':'\\u23f0',\n  'alembic':'\\u2697\\ufe0f',\n  'alien':'\\ud83d\\udc7d',\n  'ambulance':'\\ud83d\\ude91',\n  'amphora':'\\ud83c\\udffa',\n  'anchor':'\\u2693\\ufe0f',\n  'angel':'\\ud83d\\udc7c',\n  'anger':'\\ud83d\\udca2',\n  'angry':'\\ud83d\\ude20',\n  'anguished':'\\ud83d\\ude27',\n  'ant':'\\ud83d\\udc1c',\n  'apple':'\\ud83c\\udf4e',\n  'aquarius':'\\u2652\\ufe0f',\n  'aries':'\\u2648\\ufe0f',\n  'arrow_backward':'\\u25c0\\ufe0f',\n  'arrow_double_down':'\\u23ec',\n  'arrow_double_up':'\\u23eb',\n  'arrow_down':'\\u2b07\\ufe0f',\n  'arrow_down_small':'\\ud83d\\udd3d',\n  'arrow_forward':'\\u25b6\\ufe0f',\n  'arrow_heading_down':'\\u2935\\ufe0f',\n  'arrow_heading_up':'\\u2934\\ufe0f',\n  'arrow_left':'\\u2b05\\ufe0f',\n  'arrow_lower_left':'\\u2199\\ufe0f',\n  'arrow_lower_right':'\\u2198\\ufe0f',\n  'arrow_right':'\\u27a1\\ufe0f',\n  'arrow_right_hook':'\\u21aa\\ufe0f',\n  'arrow_up':'\\u2b06\\ufe0f',\n  'arrow_up_down':'\\u2195\\ufe0f',\n  'arrow_up_small':'\\ud83d\\udd3c',\n  'arrow_upper_left':'\\u2196\\ufe0f',\n  'arrow_upper_right':'\\u2197\\ufe0f',\n  'arrows_clockwise':'\\ud83d\\udd03',\n  'arrows_counterclockwise':'\\ud83d\\udd04',\n  'art':'\\ud83c\\udfa8',\n  'articulated_lorry':'\\ud83d\\ude9b',\n  'artificial_satellite':'\\ud83d\\udef0',\n  'astonished':'\\ud83d\\ude32',\n  'athletic_shoe':'\\ud83d\\udc5f',\n  'atm':'\\ud83c\\udfe7',\n  'atom_symbol':'\\u269b\\ufe0f',\n  'avocado':'\\ud83e\\udd51',\n  'b':'\\ud83c\\udd71\\ufe0f',\n  'baby':'\\ud83d\\udc76',\n  'baby_bottle':'\\ud83c\\udf7c',\n  'baby_chick':'\\ud83d\\udc24',\n  'baby_symbol':'\\ud83d\\udebc',\n  'back':'\\ud83d\\udd19',\n  'bacon':'\\ud83e\\udd53',\n  'badminton':'\\ud83c\\udff8',\n  'baggage_claim':'\\ud83d\\udec4',\n  'baguette_bread':'\\ud83e\\udd56',\n  'balance_scale':'\\u2696\\ufe0f',\n  'balloon':'\\ud83c\\udf88',\n  'ballot_box':'\\ud83d\\uddf3',\n  'ballot_box_with_check':'\\u2611\\ufe0f',\n  'bamboo':'\\ud83c\\udf8d',\n  'banana':'\\ud83c\\udf4c',\n  'bangbang':'\\u203c\\ufe0f',\n  'bank':'\\ud83c\\udfe6',\n  'bar_chart':'\\ud83d\\udcca',\n  'barber':'\\ud83d\\udc88',\n  'baseball':'\\u26be\\ufe0f',\n  'basketball':'\\ud83c\\udfc0',\n  'basketball_man':'\\u26f9\\ufe0f',\n  'basketball_woman':'\\u26f9\\ufe0f&zwj;\\u2640\\ufe0f',\n  'bat':'\\ud83e\\udd87',\n  'bath':'\\ud83d\\udec0',\n  'bathtub':'\\ud83d\\udec1',\n  'battery':'\\ud83d\\udd0b',\n  'beach_umbrella':'\\ud83c\\udfd6',\n  'bear':'\\ud83d\\udc3b',\n  'bed':'\\ud83d\\udecf',\n  'bee':'\\ud83d\\udc1d',\n  'beer':'\\ud83c\\udf7a',\n  'beers':'\\ud83c\\udf7b',\n  'beetle':'\\ud83d\\udc1e',\n  'beginner':'\\ud83d\\udd30',\n  'bell':'\\ud83d\\udd14',\n  'bellhop_bell':'\\ud83d\\udece',\n  'bento':'\\ud83c\\udf71',\n  'biking_man':'\\ud83d\\udeb4',\n  'bike':'\\ud83d\\udeb2',\n  'biking_woman':'\\ud83d\\udeb4&zwj;\\u2640\\ufe0f',\n  'bikini':'\\ud83d\\udc59',\n  'biohazard':'\\u2623\\ufe0f',\n  'bird':'\\ud83d\\udc26',\n  'birthday':'\\ud83c\\udf82',\n  'black_circle':'\\u26ab\\ufe0f',\n  'black_flag':'\\ud83c\\udff4',\n  'black_heart':'\\ud83d\\udda4',\n  'black_joker':'\\ud83c\\udccf',\n  'black_large_square':'\\u2b1b\\ufe0f',\n  'black_medium_small_square':'\\u25fe\\ufe0f',\n  'black_medium_square':'\\u25fc\\ufe0f',\n  'black_nib':'\\u2712\\ufe0f',\n  'black_small_square':'\\u25aa\\ufe0f',\n  'black_square_button':'\\ud83d\\udd32',\n  'blonde_man':'\\ud83d\\udc71',\n  'blonde_woman':'\\ud83d\\udc71&zwj;\\u2640\\ufe0f',\n  'blossom':'\\ud83c\\udf3c',\n  'blowfish':'\\ud83d\\udc21',\n  'blue_book':'\\ud83d\\udcd8',\n  'blue_car':'\\ud83d\\ude99',\n  'blue_heart':'\\ud83d\\udc99',\n  'blush':'\\ud83d\\ude0a',\n  'boar':'\\ud83d\\udc17',\n  'boat':'\\u26f5\\ufe0f',\n  'bomb':'\\ud83d\\udca3',\n  'book':'\\ud83d\\udcd6',\n  'bookmark':'\\ud83d\\udd16',\n  'bookmark_tabs':'\\ud83d\\udcd1',\n  'books':'\\ud83d\\udcda',\n  'boom':'\\ud83d\\udca5',\n  'boot':'\\ud83d\\udc62',\n  'bouquet':'\\ud83d\\udc90',\n  'bowing_man':'\\ud83d\\ude47',\n  'bow_and_arrow':'\\ud83c\\udff9',\n  'bowing_woman':'\\ud83d\\ude47&zwj;\\u2640\\ufe0f',\n  'bowling':'\\ud83c\\udfb3',\n  'boxing_glove':'\\ud83e\\udd4a',\n  'boy':'\\ud83d\\udc66',\n  'bread':'\\ud83c\\udf5e',\n  'bride_with_veil':'\\ud83d\\udc70',\n  'bridge_at_night':'\\ud83c\\udf09',\n  'briefcase':'\\ud83d\\udcbc',\n  'broken_heart':'\\ud83d\\udc94',\n  'bug':'\\ud83d\\udc1b',\n  'building_construction':'\\ud83c\\udfd7',\n  'bulb':'\\ud83d\\udca1',\n  'bullettrain_front':'\\ud83d\\ude85',\n  'bullettrain_side':'\\ud83d\\ude84',\n  'burrito':'\\ud83c\\udf2f',\n  'bus':'\\ud83d\\ude8c',\n  'business_suit_levitating':'\\ud83d\\udd74',\n  'busstop':'\\ud83d\\ude8f',\n  'bust_in_silhouette':'\\ud83d\\udc64',\n  'busts_in_silhouette':'\\ud83d\\udc65',\n  'butterfly':'\\ud83e\\udd8b',\n  'cactus':'\\ud83c\\udf35',\n  'cake':'\\ud83c\\udf70',\n  'calendar':'\\ud83d\\udcc6',\n  'call_me_hand':'\\ud83e\\udd19',\n  'calling':'\\ud83d\\udcf2',\n  'camel':'\\ud83d\\udc2b',\n  'camera':'\\ud83d\\udcf7',\n  'camera_flash':'\\ud83d\\udcf8',\n  'camping':'\\ud83c\\udfd5',\n  'cancer':'\\u264b\\ufe0f',\n  'candle':'\\ud83d\\udd6f',\n  'candy':'\\ud83c\\udf6c',\n  'canoe':'\\ud83d\\udef6',\n  'capital_abcd':'\\ud83d\\udd20',\n  'capricorn':'\\u2651\\ufe0f',\n  'car':'\\ud83d\\ude97',\n  'card_file_box':'\\ud83d\\uddc3',\n  'card_index':'\\ud83d\\udcc7',\n  'card_index_dividers':'\\ud83d\\uddc2',\n  'carousel_horse':'\\ud83c\\udfa0',\n  'carrot':'\\ud83e\\udd55',\n  'cat':'\\ud83d\\udc31',\n  'cat2':'\\ud83d\\udc08',\n  'cd':'\\ud83d\\udcbf',\n  'chains':'\\u26d3',\n  'champagne':'\\ud83c\\udf7e',\n  'chart':'\\ud83d\\udcb9',\n  'chart_with_downwards_trend':'\\ud83d\\udcc9',\n  'chart_with_upwards_trend':'\\ud83d\\udcc8',\n  'checkered_flag':'\\ud83c\\udfc1',\n  'cheese':'\\ud83e\\uddc0',\n  'cherries':'\\ud83c\\udf52',\n  'cherry_blossom':'\\ud83c\\udf38',\n  'chestnut':'\\ud83c\\udf30',\n  'chicken':'\\ud83d\\udc14',\n  'children_crossing':'\\ud83d\\udeb8',\n  'chipmunk':'\\ud83d\\udc3f',\n  'chocolate_bar':'\\ud83c\\udf6b',\n  'christmas_tree':'\\ud83c\\udf84',\n  'church':'\\u26ea\\ufe0f',\n  'cinema':'\\ud83c\\udfa6',\n  'circus_tent':'\\ud83c\\udfaa',\n  'city_sunrise':'\\ud83c\\udf07',\n  'city_sunset':'\\ud83c\\udf06',\n  'cityscape':'\\ud83c\\udfd9',\n  'cl':'\\ud83c\\udd91',\n  'clamp':'\\ud83d\\udddc',\n  'clap':'\\ud83d\\udc4f',\n  'clapper':'\\ud83c\\udfac',\n  'classical_building':'\\ud83c\\udfdb',\n  'clinking_glasses':'\\ud83e\\udd42',\n  'clipboard':'\\ud83d\\udccb',\n  'clock1':'\\ud83d\\udd50',\n  'clock10':'\\ud83d\\udd59',\n  'clock1030':'\\ud83d\\udd65',\n  'clock11':'\\ud83d\\udd5a',\n  'clock1130':'\\ud83d\\udd66',\n  'clock12':'\\ud83d\\udd5b',\n  'clock1230':'\\ud83d\\udd67',\n  'clock130':'\\ud83d\\udd5c',\n  'clock2':'\\ud83d\\udd51',\n  'clock230':'\\ud83d\\udd5d',\n  'clock3':'\\ud83d\\udd52',\n  'clock330':'\\ud83d\\udd5e',\n  'clock4':'\\ud83d\\udd53',\n  'clock430':'\\ud83d\\udd5f',\n  'clock5':'\\ud83d\\udd54',\n  'clock530':'\\ud83d\\udd60',\n  'clock6':'\\ud83d\\udd55',\n  'clock630':'\\ud83d\\udd61',\n  'clock7':'\\ud83d\\udd56',\n  'clock730':'\\ud83d\\udd62',\n  'clock8':'\\ud83d\\udd57',\n  'clock830':'\\ud83d\\udd63',\n  'clock9':'\\ud83d\\udd58',\n  'clock930':'\\ud83d\\udd64',\n  'closed_book':'\\ud83d\\udcd5',\n  'closed_lock_with_key':'\\ud83d\\udd10',\n  'closed_umbrella':'\\ud83c\\udf02',\n  'cloud':'\\u2601\\ufe0f',\n  'cloud_with_lightning':'\\ud83c\\udf29',\n  'cloud_with_lightning_and_rain':'\\u26c8',\n  'cloud_with_rain':'\\ud83c\\udf27',\n  'cloud_with_snow':'\\ud83c\\udf28',\n  'clown_face':'\\ud83e\\udd21',\n  'clubs':'\\u2663\\ufe0f',\n  'cocktail':'\\ud83c\\udf78',\n  'coffee':'\\u2615\\ufe0f',\n  'coffin':'\\u26b0\\ufe0f',\n  'cold_sweat':'\\ud83d\\ude30',\n  'comet':'\\u2604\\ufe0f',\n  'computer':'\\ud83d\\udcbb',\n  'computer_mouse':'\\ud83d\\uddb1',\n  'confetti_ball':'\\ud83c\\udf8a',\n  'confounded':'\\ud83d\\ude16',\n  'confused':'\\ud83d\\ude15',\n  'congratulations':'\\u3297\\ufe0f',\n  'construction':'\\ud83d\\udea7',\n  'construction_worker_man':'\\ud83d\\udc77',\n  'construction_worker_woman':'\\ud83d\\udc77&zwj;\\u2640\\ufe0f',\n  'control_knobs':'\\ud83c\\udf9b',\n  'convenience_store':'\\ud83c\\udfea',\n  'cookie':'\\ud83c\\udf6a',\n  'cool':'\\ud83c\\udd92',\n  'policeman':'\\ud83d\\udc6e',\n  'copyright':'\\u00a9\\ufe0f',\n  'corn':'\\ud83c\\udf3d',\n  'couch_and_lamp':'\\ud83d\\udecb',\n  'couple':'\\ud83d\\udc6b',\n  'couple_with_heart_woman_man':'\\ud83d\\udc91',\n  'couple_with_heart_man_man':'\\ud83d\\udc68&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc68',\n  'couple_with_heart_woman_woman':'\\ud83d\\udc69&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc69',\n  'couplekiss_man_man':'\\ud83d\\udc68&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc8b&zwj;\\ud83d\\udc68',\n  'couplekiss_man_woman':'\\ud83d\\udc8f',\n  'couplekiss_woman_woman':'\\ud83d\\udc69&zwj;\\u2764\\ufe0f&zwj;\\ud83d\\udc8b&zwj;\\ud83d\\udc69',\n  'cow':'\\ud83d\\udc2e',\n  'cow2':'\\ud83d\\udc04',\n  'cowboy_hat_face':'\\ud83e\\udd20',\n  'crab':'\\ud83e\\udd80',\n  'crayon':'\\ud83d\\udd8d',\n  'credit_card':'\\ud83d\\udcb3',\n  'crescent_moon':'\\ud83c\\udf19',\n  'cricket':'\\ud83c\\udfcf',\n  'crocodile':'\\ud83d\\udc0a',\n  'croissant':'\\ud83e\\udd50',\n  'crossed_fingers':'\\ud83e\\udd1e',\n  'crossed_flags':'\\ud83c\\udf8c',\n  'crossed_swords':'\\u2694\\ufe0f',\n  'crown':'\\ud83d\\udc51',\n  'cry':'\\ud83d\\ude22',\n  'crying_cat_face':'\\ud83d\\ude3f',\n  'crystal_ball':'\\ud83d\\udd2e',\n  'cucumber':'\\ud83e\\udd52',\n  'cupid':'\\ud83d\\udc98',\n  'curly_loop':'\\u27b0',\n  'currency_exchange':'\\ud83d\\udcb1',\n  'curry':'\\ud83c\\udf5b',\n  'custard':'\\ud83c\\udf6e',\n  'customs':'\\ud83d\\udec3',\n  'cyclone':'\\ud83c\\udf00',\n  'dagger':'\\ud83d\\udde1',\n  'dancer':'\\ud83d\\udc83',\n  'dancing_women':'\\ud83d\\udc6f',\n  'dancing_men':'\\ud83d\\udc6f&zwj;\\u2642\\ufe0f',\n  'dango':'\\ud83c\\udf61',\n  'dark_sunglasses':'\\ud83d\\udd76',\n  'dart':'\\ud83c\\udfaf',\n  'dash':'\\ud83d\\udca8',\n  'date':'\\ud83d\\udcc5',\n  'deciduous_tree':'\\ud83c\\udf33',\n  'deer':'\\ud83e\\udd8c',\n  'department_store':'\\ud83c\\udfec',\n  'derelict_house':'\\ud83c\\udfda',\n  'desert':'\\ud83c\\udfdc',\n  'desert_island':'\\ud83c\\udfdd',\n  'desktop_computer':'\\ud83d\\udda5',\n  'male_detective':'\\ud83d\\udd75\\ufe0f',\n  'diamond_shape_with_a_dot_inside':'\\ud83d\\udca0',\n  'diamonds':'\\u2666\\ufe0f',\n  'disappointed':'\\ud83d\\ude1e',\n  'disappointed_relieved':'\\ud83d\\ude25',\n  'dizzy':'\\ud83d\\udcab',\n  'dizzy_face':'\\ud83d\\ude35',\n  'do_not_litter':'\\ud83d\\udeaf',\n  'dog':'\\ud83d\\udc36',\n  'dog2':'\\ud83d\\udc15',\n  'dollar':'\\ud83d\\udcb5',\n  'dolls':'\\ud83c\\udf8e',\n  'dolphin':'\\ud83d\\udc2c',\n  'door':'\\ud83d\\udeaa',\n  'doughnut':'\\ud83c\\udf69',\n  'dove':'\\ud83d\\udd4a',\n  'dragon':'\\ud83d\\udc09',\n  'dragon_face':'\\ud83d\\udc32',\n  'dress':'\\ud83d\\udc57',\n  'dromedary_camel':'\\ud83d\\udc2a',\n  'drooling_face':'\\ud83e\\udd24',\n  'droplet':'\\ud83d\\udca7',\n  'drum':'\\ud83e\\udd41',\n  'duck':'\\ud83e\\udd86',\n  'dvd':'\\ud83d\\udcc0',\n  'e-mail':'\\ud83d\\udce7',\n  'eagle':'\\ud83e\\udd85',\n  'ear':'\\ud83d\\udc42',\n  'ear_of_rice':'\\ud83c\\udf3e',\n  'earth_africa':'\\ud83c\\udf0d',\n  'earth_americas':'\\ud83c\\udf0e',\n  'earth_asia':'\\ud83c\\udf0f',\n  'egg':'\\ud83e\\udd5a',\n  'eggplant':'\\ud83c\\udf46',\n  'eight_pointed_black_star':'\\u2734\\ufe0f',\n  'eight_spoked_asterisk':'\\u2733\\ufe0f',\n  'electric_plug':'\\ud83d\\udd0c',\n  'elephant':'\\ud83d\\udc18',\n  'email':'\\u2709\\ufe0f',\n  'end':'\\ud83d\\udd1a',\n  'envelope_with_arrow':'\\ud83d\\udce9',\n  'euro':'\\ud83d\\udcb6',\n  'european_castle':'\\ud83c\\udff0',\n  'european_post_office':'\\ud83c\\udfe4',\n  'evergreen_tree':'\\ud83c\\udf32',\n  'exclamation':'\\u2757\\ufe0f',\n  'expressionless':'\\ud83d\\ude11',\n  'eye':'\\ud83d\\udc41',\n  'eye_speech_bubble':'\\ud83d\\udc41&zwj;\\ud83d\\udde8',\n  'eyeglasses':'\\ud83d\\udc53',\n  'eyes':'\\ud83d\\udc40',\n  'face_with_head_bandage':'\\ud83e\\udd15',\n  'face_with_thermometer':'\\ud83e\\udd12',\n  'fist_oncoming':'\\ud83d\\udc4a',\n  'factory':'\\ud83c\\udfed',\n  'fallen_leaf':'\\ud83c\\udf42',\n  'family_man_woman_boy':'\\ud83d\\udc6a',\n  'family_man_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc66',\n  'family_man_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_man_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc67',\n  'family_man_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_man_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_man_man_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc66',\n  'family_man_man_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_man_man_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67',\n  'family_man_man_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_man_man_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc68&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_man_woman_boy_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_man_woman_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67',\n  'family_man_woman_girl_boy':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_man_woman_girl_girl':'\\ud83d\\udc68&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_woman_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc66',\n  'family_woman_boy_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_woman_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc67',\n  'family_woman_girl_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_woman_girl_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'family_woman_woman_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66',\n  'family_woman_woman_boy_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc66&zwj;\\ud83d\\udc66',\n  'family_woman_woman_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67',\n  'family_woman_woman_girl_boy':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc66',\n  'family_woman_woman_girl_girl':'\\ud83d\\udc69&zwj;\\ud83d\\udc69&zwj;\\ud83d\\udc67&zwj;\\ud83d\\udc67',\n  'fast_forward':'\\u23e9',\n  'fax':'\\ud83d\\udce0',\n  'fearful':'\\ud83d\\ude28',\n  'feet':'\\ud83d\\udc3e',\n  'female_detective':'\\ud83d\\udd75\\ufe0f&zwj;\\u2640\\ufe0f',\n  'ferris_wheel':'\\ud83c\\udfa1',\n  'ferry':'\\u26f4',\n  'field_hockey':'\\ud83c\\udfd1',\n  'file_cabinet':'\\ud83d\\uddc4',\n  'file_folder':'\\ud83d\\udcc1',\n  'film_projector':'\\ud83d\\udcfd',\n  'film_strip':'\\ud83c\\udf9e',\n  'fire':'\\ud83d\\udd25',\n  'fire_engine':'\\ud83d\\ude92',\n  'fireworks':'\\ud83c\\udf86',\n  'first_quarter_moon':'\\ud83c\\udf13',\n  'first_quarter_moon_with_face':'\\ud83c\\udf1b',\n  'fish':'\\ud83d\\udc1f',\n  'fish_cake':'\\ud83c\\udf65',\n  'fishing_pole_and_fish':'\\ud83c\\udfa3',\n  'fist_raised':'\\u270a',\n  'fist_left':'\\ud83e\\udd1b',\n  'fist_right':'\\ud83e\\udd1c',\n  'flags':'\\ud83c\\udf8f',\n  'flashlight':'\\ud83d\\udd26',\n  'fleur_de_lis':'\\u269c\\ufe0f',\n  'flight_arrival':'\\ud83d\\udeec',\n  'flight_departure':'\\ud83d\\udeeb',\n  'floppy_disk':'\\ud83d\\udcbe',\n  'flower_playing_cards':'\\ud83c\\udfb4',\n  'flushed':'\\ud83d\\ude33',\n  'fog':'\\ud83c\\udf2b',\n  'foggy':'\\ud83c\\udf01',\n  'football':'\\ud83c\\udfc8',\n  'footprints':'\\ud83d\\udc63',\n  'fork_and_knife':'\\ud83c\\udf74',\n  'fountain':'\\u26f2\\ufe0f',\n  'fountain_pen':'\\ud83d\\udd8b',\n  'four_leaf_clover':'\\ud83c\\udf40',\n  'fox_face':'\\ud83e\\udd8a',\n  'framed_picture':'\\ud83d\\uddbc',\n  'free':'\\ud83c\\udd93',\n  'fried_egg':'\\ud83c\\udf73',\n  'fried_shrimp':'\\ud83c\\udf64',\n  'fries':'\\ud83c\\udf5f',\n  'frog':'\\ud83d\\udc38',\n  'frowning':'\\ud83d\\ude26',\n  'frowning_face':'\\u2639\\ufe0f',\n  'frowning_man':'\\ud83d\\ude4d&zwj;\\u2642\\ufe0f',\n  'frowning_woman':'\\ud83d\\ude4d',\n  'middle_finger':'\\ud83d\\udd95',\n  'fuelpump':'\\u26fd\\ufe0f',\n  'full_moon':'\\ud83c\\udf15',\n  'full_moon_with_face':'\\ud83c\\udf1d',\n  'funeral_urn':'\\u26b1\\ufe0f',\n  'game_die':'\\ud83c\\udfb2',\n  'gear':'\\u2699\\ufe0f',\n  'gem':'\\ud83d\\udc8e',\n  'gemini':'\\u264a\\ufe0f',\n  'ghost':'\\ud83d\\udc7b',\n  'gift':'\\ud83c\\udf81',\n  'gift_heart':'\\ud83d\\udc9d',\n  'girl':'\\ud83d\\udc67',\n  'globe_with_meridians':'\\ud83c\\udf10',\n  'goal_net':'\\ud83e\\udd45',\n  'goat':'\\ud83d\\udc10',\n  'golf':'\\u26f3\\ufe0f',\n  'golfing_man':'\\ud83c\\udfcc\\ufe0f',\n  'golfing_woman':'\\ud83c\\udfcc\\ufe0f&zwj;\\u2640\\ufe0f',\n  'gorilla':'\\ud83e\\udd8d',\n  'grapes':'\\ud83c\\udf47',\n  'green_apple':'\\ud83c\\udf4f',\n  'green_book':'\\ud83d\\udcd7',\n  'green_heart':'\\ud83d\\udc9a',\n  'green_salad':'\\ud83e\\udd57',\n  'grey_exclamation':'\\u2755',\n  'grey_question':'\\u2754',\n  'grimacing':'\\ud83d\\ude2c',\n  'grin':'\\ud83d\\ude01',\n  'grinning':'\\ud83d\\ude00',\n  'guardsman':'\\ud83d\\udc82',\n  'guardswoman':'\\ud83d\\udc82&zwj;\\u2640\\ufe0f',\n  'guitar':'\\ud83c\\udfb8',\n  'gun':'\\ud83d\\udd2b',\n  'haircut_woman':'\\ud83d\\udc87',\n  'haircut_man':'\\ud83d\\udc87&zwj;\\u2642\\ufe0f',\n  'hamburger':'\\ud83c\\udf54',\n  'hammer':'\\ud83d\\udd28',\n  'hammer_and_pick':'\\u2692',\n  'hammer_and_wrench':'\\ud83d\\udee0',\n  'hamster':'\\ud83d\\udc39',\n  'hand':'\\u270b',\n  'handbag':'\\ud83d\\udc5c',\n  'handshake':'\\ud83e\\udd1d',\n  'hankey':'\\ud83d\\udca9',\n  'hatched_chick':'\\ud83d\\udc25',\n  'hatching_chick':'\\ud83d\\udc23',\n  'headphones':'\\ud83c\\udfa7',\n  'hear_no_evil':'\\ud83d\\ude49',\n  'heart':'\\u2764\\ufe0f',\n  'heart_decoration':'\\ud83d\\udc9f',\n  'heart_eyes':'\\ud83d\\ude0d',\n  'heart_eyes_cat':'\\ud83d\\ude3b',\n  'heartbeat':'\\ud83d\\udc93',\n  'heartpulse':'\\ud83d\\udc97',\n  'hearts':'\\u2665\\ufe0f',\n  'heavy_check_mark':'\\u2714\\ufe0f',\n  'heavy_division_sign':'\\u2797',\n  'heavy_dollar_sign':'\\ud83d\\udcb2',\n  'heavy_heart_exclamation':'\\u2763\\ufe0f',\n  'heavy_minus_sign':'\\u2796',\n  'heavy_multiplication_x':'\\u2716\\ufe0f',\n  'heavy_plus_sign':'\\u2795',\n  'helicopter':'\\ud83d\\ude81',\n  'herb':'\\ud83c\\udf3f',\n  'hibiscus':'\\ud83c\\udf3a',\n  'high_brightness':'\\ud83d\\udd06',\n  'high_heel':'\\ud83d\\udc60',\n  'hocho':'\\ud83d\\udd2a',\n  'hole':'\\ud83d\\udd73',\n  'honey_pot':'\\ud83c\\udf6f',\n  'horse':'\\ud83d\\udc34',\n  'horse_racing':'\\ud83c\\udfc7',\n  'hospital':'\\ud83c\\udfe5',\n  'hot_pepper':'\\ud83c\\udf36',\n  'hotdog':'\\ud83c\\udf2d',\n  'hotel':'\\ud83c\\udfe8',\n  'hotsprings':'\\u2668\\ufe0f',\n  'hourglass':'\\u231b\\ufe0f',\n  'hourglass_flowing_sand':'\\u23f3',\n  'house':'\\ud83c\\udfe0',\n  'house_with_garden':'\\ud83c\\udfe1',\n  'houses':'\\ud83c\\udfd8',\n  'hugs':'\\ud83e\\udd17',\n  'hushed':'\\ud83d\\ude2f',\n  'ice_cream':'\\ud83c\\udf68',\n  'ice_hockey':'\\ud83c\\udfd2',\n  'ice_skate':'\\u26f8',\n  'icecream':'\\ud83c\\udf66',\n  'id':'\\ud83c\\udd94',\n  'ideograph_advantage':'\\ud83c\\ude50',\n  'imp':'\\ud83d\\udc7f',\n  'inbox_tray':'\\ud83d\\udce5',\n  'incoming_envelope':'\\ud83d\\udce8',\n  'tipping_hand_woman':'\\ud83d\\udc81',\n  'information_source':'\\u2139\\ufe0f',\n  'innocent':'\\ud83d\\ude07',\n  'interrobang':'\\u2049\\ufe0f',\n  'iphone':'\\ud83d\\udcf1',\n  'izakaya_lantern':'\\ud83c\\udfee',\n  'jack_o_lantern':'\\ud83c\\udf83',\n  'japan':'\\ud83d\\uddfe',\n  'japanese_castle':'\\ud83c\\udfef',\n  'japanese_goblin':'\\ud83d\\udc7a',\n  'japanese_ogre':'\\ud83d\\udc79',\n  'jeans':'\\ud83d\\udc56',\n  'joy':'\\ud83d\\ude02',\n  'joy_cat':'\\ud83d\\ude39',\n  'joystick':'\\ud83d\\udd79',\n  'kaaba':'\\ud83d\\udd4b',\n  'key':'\\ud83d\\udd11',\n  'keyboard':'\\u2328\\ufe0f',\n  'keycap_ten':'\\ud83d\\udd1f',\n  'kick_scooter':'\\ud83d\\udef4',\n  'kimono':'\\ud83d\\udc58',\n  'kiss':'\\ud83d\\udc8b',\n  'kissing':'\\ud83d\\ude17',\n  'kissing_cat':'\\ud83d\\ude3d',\n  'kissing_closed_eyes':'\\ud83d\\ude1a',\n  'kissing_heart':'\\ud83d\\ude18',\n  'kissing_smiling_eyes':'\\ud83d\\ude19',\n  'kiwi_fruit':'\\ud83e\\udd5d',\n  'koala':'\\ud83d\\udc28',\n  'koko':'\\ud83c\\ude01',\n  'label':'\\ud83c\\udff7',\n  'large_blue_circle':'\\ud83d\\udd35',\n  'large_blue_diamond':'\\ud83d\\udd37',\n  'large_orange_diamond':'\\ud83d\\udd36',\n  'last_quarter_moon':'\\ud83c\\udf17',\n  'last_quarter_moon_with_face':'\\ud83c\\udf1c',\n  'latin_cross':'\\u271d\\ufe0f',\n  'laughing':'\\ud83d\\ude06',\n  'leaves':'\\ud83c\\udf43',\n  'ledger':'\\ud83d\\udcd2',\n  'left_luggage':'\\ud83d\\udec5',\n  'left_right_arrow':'\\u2194\\ufe0f',\n  'leftwards_arrow_with_hook':'\\u21a9\\ufe0f',\n  'lemon':'\\ud83c\\udf4b',\n  'leo':'\\u264c\\ufe0f',\n  'leopard':'\\ud83d\\udc06',\n  'level_slider':'\\ud83c\\udf9a',\n  'libra':'\\u264e\\ufe0f',\n  'light_rail':'\\ud83d\\ude88',\n  'link':'\\ud83d\\udd17',\n  'lion':'\\ud83e\\udd81',\n  'lips':'\\ud83d\\udc44',\n  'lipstick':'\\ud83d\\udc84',\n  'lizard':'\\ud83e\\udd8e',\n  'lock':'\\ud83d\\udd12',\n  'lock_with_ink_pen':'\\ud83d\\udd0f',\n  'lollipop':'\\ud83c\\udf6d',\n  'loop':'\\u27bf',\n  'loud_sound':'\\ud83d\\udd0a',\n  'loudspeaker':'\\ud83d\\udce2',\n  'love_hotel':'\\ud83c\\udfe9',\n  'love_letter':'\\ud83d\\udc8c',\n  'low_brightness':'\\ud83d\\udd05',\n  'lying_face':'\\ud83e\\udd25',\n  'm':'\\u24c2\\ufe0f',\n  'mag':'\\ud83d\\udd0d',\n  'mag_right':'\\ud83d\\udd0e',\n  'mahjong':'\\ud83c\\udc04\\ufe0f',\n  'mailbox':'\\ud83d\\udceb',\n  'mailbox_closed':'\\ud83d\\udcea',\n  'mailbox_with_mail':'\\ud83d\\udcec',\n  'mailbox_with_no_mail':'\\ud83d\\udced',\n  'man':'\\ud83d\\udc68',\n  'man_artist':'\\ud83d\\udc68&zwj;\\ud83c\\udfa8',\n  'man_astronaut':'\\ud83d\\udc68&zwj;\\ud83d\\ude80',\n  'man_cartwheeling':'\\ud83e\\udd38&zwj;\\u2642\\ufe0f',\n  'man_cook':'\\ud83d\\udc68&zwj;\\ud83c\\udf73',\n  'man_dancing':'\\ud83d\\udd7a',\n  'man_facepalming':'\\ud83e\\udd26&zwj;\\u2642\\ufe0f',\n  'man_factory_worker':'\\ud83d\\udc68&zwj;\\ud83c\\udfed',\n  'man_farmer':'\\ud83d\\udc68&zwj;\\ud83c\\udf3e',\n  'man_firefighter':'\\ud83d\\udc68&zwj;\\ud83d\\ude92',\n  'man_health_worker':'\\ud83d\\udc68&zwj;\\u2695\\ufe0f',\n  'man_in_tuxedo':'\\ud83e\\udd35',\n  'man_judge':'\\ud83d\\udc68&zwj;\\u2696\\ufe0f',\n  'man_juggling':'\\ud83e\\udd39&zwj;\\u2642\\ufe0f',\n  'man_mechanic':'\\ud83d\\udc68&zwj;\\ud83d\\udd27',\n  'man_office_worker':'\\ud83d\\udc68&zwj;\\ud83d\\udcbc',\n  'man_pilot':'\\ud83d\\udc68&zwj;\\u2708\\ufe0f',\n  'man_playing_handball':'\\ud83e\\udd3e&zwj;\\u2642\\ufe0f',\n  'man_playing_water_polo':'\\ud83e\\udd3d&zwj;\\u2642\\ufe0f',\n  'man_scientist':'\\ud83d\\udc68&zwj;\\ud83d\\udd2c',\n  'man_shrugging':'\\ud83e\\udd37&zwj;\\u2642\\ufe0f',\n  'man_singer':'\\ud83d\\udc68&zwj;\\ud83c\\udfa4',\n  'man_student':'\\ud83d\\udc68&zwj;\\ud83c\\udf93',\n  'man_teacher':'\\ud83d\\udc68&zwj;\\ud83c\\udfeb',\n  'man_technologist':'\\ud83d\\udc68&zwj;\\ud83d\\udcbb',\n  'man_with_gua_pi_mao':'\\ud83d\\udc72',\n  'man_with_turban':'\\ud83d\\udc73',\n  'tangerine':'\\ud83c\\udf4a',\n  'mans_shoe':'\\ud83d\\udc5e',\n  'mantelpiece_clock':'\\ud83d\\udd70',\n  'maple_leaf':'\\ud83c\\udf41',\n  'martial_arts_uniform':'\\ud83e\\udd4b',\n  'mask':'\\ud83d\\ude37',\n  'massage_woman':'\\ud83d\\udc86',\n  'massage_man':'\\ud83d\\udc86&zwj;\\u2642\\ufe0f',\n  'meat_on_bone':'\\ud83c\\udf56',\n  'medal_military':'\\ud83c\\udf96',\n  'medal_sports':'\\ud83c\\udfc5',\n  'mega':'\\ud83d\\udce3',\n  'melon':'\\ud83c\\udf48',\n  'memo':'\\ud83d\\udcdd',\n  'men_wrestling':'\\ud83e\\udd3c&zwj;\\u2642\\ufe0f',\n  'menorah':'\\ud83d\\udd4e',\n  'mens':'\\ud83d\\udeb9',\n  'metal':'\\ud83e\\udd18',\n  'metro':'\\ud83d\\ude87',\n  'microphone':'\\ud83c\\udfa4',\n  'microscope':'\\ud83d\\udd2c',\n  'milk_glass':'\\ud83e\\udd5b',\n  'milky_way':'\\ud83c\\udf0c',\n  'minibus':'\\ud83d\\ude90',\n  'minidisc':'\\ud83d\\udcbd',\n  'mobile_phone_off':'\\ud83d\\udcf4',\n  'money_mouth_face':'\\ud83e\\udd11',\n  'money_with_wings':'\\ud83d\\udcb8',\n  'moneybag':'\\ud83d\\udcb0',\n  'monkey':'\\ud83d\\udc12',\n  'monkey_face':'\\ud83d\\udc35',\n  'monorail':'\\ud83d\\ude9d',\n  'moon':'\\ud83c\\udf14',\n  'mortar_board':'\\ud83c\\udf93',\n  'mosque':'\\ud83d\\udd4c',\n  'motor_boat':'\\ud83d\\udee5',\n  'motor_scooter':'\\ud83d\\udef5',\n  'motorcycle':'\\ud83c\\udfcd',\n  'motorway':'\\ud83d\\udee3',\n  'mount_fuji':'\\ud83d\\uddfb',\n  'mountain':'\\u26f0',\n  'mountain_biking_man':'\\ud83d\\udeb5',\n  'mountain_biking_woman':'\\ud83d\\udeb5&zwj;\\u2640\\ufe0f',\n  'mountain_cableway':'\\ud83d\\udea0',\n  'mountain_railway':'\\ud83d\\ude9e',\n  'mountain_snow':'\\ud83c\\udfd4',\n  'mouse':'\\ud83d\\udc2d',\n  'mouse2':'\\ud83d\\udc01',\n  'movie_camera':'\\ud83c\\udfa5',\n  'moyai':'\\ud83d\\uddff',\n  'mrs_claus':'\\ud83e\\udd36',\n  'muscle':'\\ud83d\\udcaa',\n  'mushroom':'\\ud83c\\udf44',\n  'musical_keyboard':'\\ud83c\\udfb9',\n  'musical_note':'\\ud83c\\udfb5',\n  'musical_score':'\\ud83c\\udfbc',\n  'mute':'\\ud83d\\udd07',\n  'nail_care':'\\ud83d\\udc85',\n  'name_badge':'\\ud83d\\udcdb',\n  'national_park':'\\ud83c\\udfde',\n  'nauseated_face':'\\ud83e\\udd22',\n  'necktie':'\\ud83d\\udc54',\n  'negative_squared_cross_mark':'\\u274e',\n  'nerd_face':'\\ud83e\\udd13',\n  'neutral_face':'\\ud83d\\ude10',\n  'new':'\\ud83c\\udd95',\n  'new_moon':'\\ud83c\\udf11',\n  'new_moon_with_face':'\\ud83c\\udf1a',\n  'newspaper':'\\ud83d\\udcf0',\n  'newspaper_roll':'\\ud83d\\uddde',\n  'next_track_button':'\\u23ed',\n  'ng':'\\ud83c\\udd96',\n  'no_good_man':'\\ud83d\\ude45&zwj;\\u2642\\ufe0f',\n  'no_good_woman':'\\ud83d\\ude45',\n  'night_with_stars':'\\ud83c\\udf03',\n  'no_bell':'\\ud83d\\udd15',\n  'no_bicycles':'\\ud83d\\udeb3',\n  'no_entry':'\\u26d4\\ufe0f',\n  'no_entry_sign':'\\ud83d\\udeab',\n  'no_mobile_phones':'\\ud83d\\udcf5',\n  'no_mouth':'\\ud83d\\ude36',\n  'no_pedestrians':'\\ud83d\\udeb7',\n  'no_smoking':'\\ud83d\\udead',\n  'non-potable_water':'\\ud83d\\udeb1',\n  'nose':'\\ud83d\\udc43',\n  'notebook':'\\ud83d\\udcd3',\n  'notebook_with_decorative_cover':'\\ud83d\\udcd4',\n  'notes':'\\ud83c\\udfb6',\n  'nut_and_bolt':'\\ud83d\\udd29',\n  'o':'\\u2b55\\ufe0f',\n  'o2':'\\ud83c\\udd7e\\ufe0f',\n  'ocean':'\\ud83c\\udf0a',\n  'octopus':'\\ud83d\\udc19',\n  'oden':'\\ud83c\\udf62',\n  'office':'\\ud83c\\udfe2',\n  'oil_drum':'\\ud83d\\udee2',\n  'ok':'\\ud83c\\udd97',\n  'ok_hand':'\\ud83d\\udc4c',\n  'ok_man':'\\ud83d\\ude46&zwj;\\u2642\\ufe0f',\n  'ok_woman':'\\ud83d\\ude46',\n  'old_key':'\\ud83d\\udddd',\n  'older_man':'\\ud83d\\udc74',\n  'older_woman':'\\ud83d\\udc75',\n  'om':'\\ud83d\\udd49',\n  'on':'\\ud83d\\udd1b',\n  'oncoming_automobile':'\\ud83d\\ude98',\n  'oncoming_bus':'\\ud83d\\ude8d',\n  'oncoming_police_car':'\\ud83d\\ude94',\n  'oncoming_taxi':'\\ud83d\\ude96',\n  'open_file_folder':'\\ud83d\\udcc2',\n  'open_hands':'\\ud83d\\udc50',\n  'open_mouth':'\\ud83d\\ude2e',\n  'open_umbrella':'\\u2602\\ufe0f',\n  'ophiuchus':'\\u26ce',\n  'orange_book':'\\ud83d\\udcd9',\n  'orthodox_cross':'\\u2626\\ufe0f',\n  'outbox_tray':'\\ud83d\\udce4',\n  'owl':'\\ud83e\\udd89',\n  'ox':'\\ud83d\\udc02',\n  'package':'\\ud83d\\udce6',\n  'page_facing_up':'\\ud83d\\udcc4',\n  'page_with_curl':'\\ud83d\\udcc3',\n  'pager':'\\ud83d\\udcdf',\n  'paintbrush':'\\ud83d\\udd8c',\n  'palm_tree':'\\ud83c\\udf34',\n  'pancakes':'\\ud83e\\udd5e',\n  'panda_face':'\\ud83d\\udc3c',\n  'paperclip':'\\ud83d\\udcce',\n  'paperclips':'\\ud83d\\udd87',\n  'parasol_on_ground':'\\u26f1',\n  'parking':'\\ud83c\\udd7f\\ufe0f',\n  'part_alternation_mark':'\\u303d\\ufe0f',\n  'partly_sunny':'\\u26c5\\ufe0f',\n  'passenger_ship':'\\ud83d\\udef3',\n  'passport_control':'\\ud83d\\udec2',\n  'pause_button':'\\u23f8',\n  'peace_symbol':'\\u262e\\ufe0f',\n  'peach':'\\ud83c\\udf51',\n  'peanuts':'\\ud83e\\udd5c',\n  'pear':'\\ud83c\\udf50',\n  'pen':'\\ud83d\\udd8a',\n  'pencil2':'\\u270f\\ufe0f',\n  'penguin':'\\ud83d\\udc27',\n  'pensive':'\\ud83d\\ude14',\n  'performing_arts':'\\ud83c\\udfad',\n  'persevere':'\\ud83d\\ude23',\n  'person_fencing':'\\ud83e\\udd3a',\n  'pouting_woman':'\\ud83d\\ude4e',\n  'phone':'\\u260e\\ufe0f',\n  'pick':'\\u26cf',\n  'pig':'\\ud83d\\udc37',\n  'pig2':'\\ud83d\\udc16',\n  'pig_nose':'\\ud83d\\udc3d',\n  'pill':'\\ud83d\\udc8a',\n  'pineapple':'\\ud83c\\udf4d',\n  'ping_pong':'\\ud83c\\udfd3',\n  'pisces':'\\u2653\\ufe0f',\n  'pizza':'\\ud83c\\udf55',\n  'place_of_worship':'\\ud83d\\uded0',\n  'plate_with_cutlery':'\\ud83c\\udf7d',\n  'play_or_pause_button':'\\u23ef',\n  'point_down':'\\ud83d\\udc47',\n  'point_left':'\\ud83d\\udc48',\n  'point_right':'\\ud83d\\udc49',\n  'point_up':'\\u261d\\ufe0f',\n  'point_up_2':'\\ud83d\\udc46',\n  'police_car':'\\ud83d\\ude93',\n  'policewoman':'\\ud83d\\udc6e&zwj;\\u2640\\ufe0f',\n  'poodle':'\\ud83d\\udc29',\n  'popcorn':'\\ud83c\\udf7f',\n  'post_office':'\\ud83c\\udfe3',\n  'postal_horn':'\\ud83d\\udcef',\n  'postbox':'\\ud83d\\udcee',\n  'potable_water':'\\ud83d\\udeb0',\n  'potato':'\\ud83e\\udd54',\n  'pouch':'\\ud83d\\udc5d',\n  'poultry_leg':'\\ud83c\\udf57',\n  'pound':'\\ud83d\\udcb7',\n  'rage':'\\ud83d\\ude21',\n  'pouting_cat':'\\ud83d\\ude3e',\n  'pouting_man':'\\ud83d\\ude4e&zwj;\\u2642\\ufe0f',\n  'pray':'\\ud83d\\ude4f',\n  'prayer_beads':'\\ud83d\\udcff',\n  'pregnant_woman':'\\ud83e\\udd30',\n  'previous_track_button':'\\u23ee',\n  'prince':'\\ud83e\\udd34',\n  'princess':'\\ud83d\\udc78',\n  'printer':'\\ud83d\\udda8',\n  'purple_heart':'\\ud83d\\udc9c',\n  'purse':'\\ud83d\\udc5b',\n  'pushpin':'\\ud83d\\udccc',\n  'put_litter_in_its_place':'\\ud83d\\udeae',\n  'question':'\\u2753',\n  'rabbit':'\\ud83d\\udc30',\n  'rabbit2':'\\ud83d\\udc07',\n  'racehorse':'\\ud83d\\udc0e',\n  'racing_car':'\\ud83c\\udfce',\n  'radio':'\\ud83d\\udcfb',\n  'radio_button':'\\ud83d\\udd18',\n  'radioactive':'\\u2622\\ufe0f',\n  'railway_car':'\\ud83d\\ude83',\n  'railway_track':'\\ud83d\\udee4',\n  'rainbow':'\\ud83c\\udf08',\n  'rainbow_flag':'\\ud83c\\udff3\\ufe0f&zwj;\\ud83c\\udf08',\n  'raised_back_of_hand':'\\ud83e\\udd1a',\n  'raised_hand_with_fingers_splayed':'\\ud83d\\udd90',\n  'raised_hands':'\\ud83d\\ude4c',\n  'raising_hand_woman':'\\ud83d\\ude4b',\n  'raising_hand_man':'\\ud83d\\ude4b&zwj;\\u2642\\ufe0f',\n  'ram':'\\ud83d\\udc0f',\n  'ramen':'\\ud83c\\udf5c',\n  'rat':'\\ud83d\\udc00',\n  'record_button':'\\u23fa',\n  'recycle':'\\u267b\\ufe0f',\n  'red_circle':'\\ud83d\\udd34',\n  'registered':'\\u00ae\\ufe0f',\n  'relaxed':'\\u263a\\ufe0f',\n  'relieved':'\\ud83d\\ude0c',\n  'reminder_ribbon':'\\ud83c\\udf97',\n  'repeat':'\\ud83d\\udd01',\n  'repeat_one':'\\ud83d\\udd02',\n  'rescue_worker_helmet':'\\u26d1',\n  'restroom':'\\ud83d\\udebb',\n  'revolving_hearts':'\\ud83d\\udc9e',\n  'rewind':'\\u23ea',\n  'rhinoceros':'\\ud83e\\udd8f',\n  'ribbon':'\\ud83c\\udf80',\n  'rice':'\\ud83c\\udf5a',\n  'rice_ball':'\\ud83c\\udf59',\n  'rice_cracker':'\\ud83c\\udf58',\n  'rice_scene':'\\ud83c\\udf91',\n  'right_anger_bubble':'\\ud83d\\uddef',\n  'ring':'\\ud83d\\udc8d',\n  'robot':'\\ud83e\\udd16',\n  'rocket':'\\ud83d\\ude80',\n  'rofl':'\\ud83e\\udd23',\n  'roll_eyes':'\\ud83d\\ude44',\n  'roller_coaster':'\\ud83c\\udfa2',\n  'rooster':'\\ud83d\\udc13',\n  'rose':'\\ud83c\\udf39',\n  'rosette':'\\ud83c\\udff5',\n  'rotating_light':'\\ud83d\\udea8',\n  'round_pushpin':'\\ud83d\\udccd',\n  'rowing_man':'\\ud83d\\udea3',\n  'rowing_woman':'\\ud83d\\udea3&zwj;\\u2640\\ufe0f',\n  'rugby_football':'\\ud83c\\udfc9',\n  'running_man':'\\ud83c\\udfc3',\n  'running_shirt_with_sash':'\\ud83c\\udfbd',\n  'running_woman':'\\ud83c\\udfc3&zwj;\\u2640\\ufe0f',\n  'sa':'\\ud83c\\ude02\\ufe0f',\n  'sagittarius':'\\u2650\\ufe0f',\n  'sake':'\\ud83c\\udf76',\n  'sandal':'\\ud83d\\udc61',\n  'santa':'\\ud83c\\udf85',\n  'satellite':'\\ud83d\\udce1',\n  'saxophone':'\\ud83c\\udfb7',\n  'school':'\\ud83c\\udfeb',\n  'school_satchel':'\\ud83c\\udf92',\n  'scissors':'\\u2702\\ufe0f',\n  'scorpion':'\\ud83e\\udd82',\n  'scorpius':'\\u264f\\ufe0f',\n  'scream':'\\ud83d\\ude31',\n  'scream_cat':'\\ud83d\\ude40',\n  'scroll':'\\ud83d\\udcdc',\n  'seat':'\\ud83d\\udcba',\n  'secret':'\\u3299\\ufe0f',\n  'see_no_evil':'\\ud83d\\ude48',\n  'seedling':'\\ud83c\\udf31',\n  'selfie':'\\ud83e\\udd33',\n  'shallow_pan_of_food':'\\ud83e\\udd58',\n  'shamrock':'\\u2618\\ufe0f',\n  'shark':'\\ud83e\\udd88',\n  'shaved_ice':'\\ud83c\\udf67',\n  'sheep':'\\ud83d\\udc11',\n  'shell':'\\ud83d\\udc1a',\n  'shield':'\\ud83d\\udee1',\n  'shinto_shrine':'\\u26e9',\n  'ship':'\\ud83d\\udea2',\n  'shirt':'\\ud83d\\udc55',\n  'shopping':'\\ud83d\\udecd',\n  'shopping_cart':'\\ud83d\\uded2',\n  'shower':'\\ud83d\\udebf',\n  'shrimp':'\\ud83e\\udd90',\n  'signal_strength':'\\ud83d\\udcf6',\n  'six_pointed_star':'\\ud83d\\udd2f',\n  'ski':'\\ud83c\\udfbf',\n  'skier':'\\u26f7',\n  'skull':'\\ud83d\\udc80',\n  'skull_and_crossbones':'\\u2620\\ufe0f',\n  'sleeping':'\\ud83d\\ude34',\n  'sleeping_bed':'\\ud83d\\udecc',\n  'sleepy':'\\ud83d\\ude2a',\n  'slightly_frowning_face':'\\ud83d\\ude41',\n  'slightly_smiling_face':'\\ud83d\\ude42',\n  'slot_machine':'\\ud83c\\udfb0',\n  'small_airplane':'\\ud83d\\udee9',\n  'small_blue_diamond':'\\ud83d\\udd39',\n  'small_orange_diamond':'\\ud83d\\udd38',\n  'small_red_triangle':'\\ud83d\\udd3a',\n  'small_red_triangle_down':'\\ud83d\\udd3b',\n  'smile':'\\ud83d\\ude04',\n  'smile_cat':'\\ud83d\\ude38',\n  'smiley':'\\ud83d\\ude03',\n  'smiley_cat':'\\ud83d\\ude3a',\n  'smiling_imp':'\\ud83d\\ude08',\n  'smirk':'\\ud83d\\ude0f',\n  'smirk_cat':'\\ud83d\\ude3c',\n  'smoking':'\\ud83d\\udeac',\n  'snail':'\\ud83d\\udc0c',\n  'snake':'\\ud83d\\udc0d',\n  'sneezing_face':'\\ud83e\\udd27',\n  'snowboarder':'\\ud83c\\udfc2',\n  'snowflake':'\\u2744\\ufe0f',\n  'snowman':'\\u26c4\\ufe0f',\n  'snowman_with_snow':'\\u2603\\ufe0f',\n  'sob':'\\ud83d\\ude2d',\n  'soccer':'\\u26bd\\ufe0f',\n  'soon':'\\ud83d\\udd1c',\n  'sos':'\\ud83c\\udd98',\n  'sound':'\\ud83d\\udd09',\n  'space_invader':'\\ud83d\\udc7e',\n  'spades':'\\u2660\\ufe0f',\n  'spaghetti':'\\ud83c\\udf5d',\n  'sparkle':'\\u2747\\ufe0f',\n  'sparkler':'\\ud83c\\udf87',\n  'sparkles':'\\u2728',\n  'sparkling_heart':'\\ud83d\\udc96',\n  'speak_no_evil':'\\ud83d\\ude4a',\n  'speaker':'\\ud83d\\udd08',\n  'speaking_head':'\\ud83d\\udde3',\n  'speech_balloon':'\\ud83d\\udcac',\n  'speedboat':'\\ud83d\\udea4',\n  'spider':'\\ud83d\\udd77',\n  'spider_web':'\\ud83d\\udd78',\n  'spiral_calendar':'\\ud83d\\uddd3',\n  'spiral_notepad':'\\ud83d\\uddd2',\n  'spoon':'\\ud83e\\udd44',\n  'squid':'\\ud83e\\udd91',\n  'stadium':'\\ud83c\\udfdf',\n  'star':'\\u2b50\\ufe0f',\n  'star2':'\\ud83c\\udf1f',\n  'star_and_crescent':'\\u262a\\ufe0f',\n  'star_of_david':'\\u2721\\ufe0f',\n  'stars':'\\ud83c\\udf20',\n  'station':'\\ud83d\\ude89',\n  'statue_of_liberty':'\\ud83d\\uddfd',\n  'steam_locomotive':'\\ud83d\\ude82',\n  'stew':'\\ud83c\\udf72',\n  'stop_button':'\\u23f9',\n  'stop_sign':'\\ud83d\\uded1',\n  'stopwatch':'\\u23f1',\n  'straight_ruler':'\\ud83d\\udccf',\n  'strawberry':'\\ud83c\\udf53',\n  'stuck_out_tongue':'\\ud83d\\ude1b',\n  'stuck_out_tongue_closed_eyes':'\\ud83d\\ude1d',\n  'stuck_out_tongue_winking_eye':'\\ud83d\\ude1c',\n  'studio_microphone':'\\ud83c\\udf99',\n  'stuffed_flatbread':'\\ud83e\\udd59',\n  'sun_behind_large_cloud':'\\ud83c\\udf25',\n  'sun_behind_rain_cloud':'\\ud83c\\udf26',\n  'sun_behind_small_cloud':'\\ud83c\\udf24',\n  'sun_with_face':'\\ud83c\\udf1e',\n  'sunflower':'\\ud83c\\udf3b',\n  'sunglasses':'\\ud83d\\ude0e',\n  'sunny':'\\u2600\\ufe0f',\n  'sunrise':'\\ud83c\\udf05',\n  'sunrise_over_mountains':'\\ud83c\\udf04',\n  'surfing_man':'\\ud83c\\udfc4',\n  'surfing_woman':'\\ud83c\\udfc4&zwj;\\u2640\\ufe0f',\n  'sushi':'\\ud83c\\udf63',\n  'suspension_railway':'\\ud83d\\ude9f',\n  'sweat':'\\ud83d\\ude13',\n  'sweat_drops':'\\ud83d\\udca6',\n  'sweat_smile':'\\ud83d\\ude05',\n  'sweet_potato':'\\ud83c\\udf60',\n  'swimming_man':'\\ud83c\\udfca',\n  'swimming_woman':'\\ud83c\\udfca&zwj;\\u2640\\ufe0f',\n  'symbols':'\\ud83d\\udd23',\n  'synagogue':'\\ud83d\\udd4d',\n  'syringe':'\\ud83d\\udc89',\n  'taco':'\\ud83c\\udf2e',\n  'tada':'\\ud83c\\udf89',\n  'tanabata_tree':'\\ud83c\\udf8b',\n  'taurus':'\\u2649\\ufe0f',\n  'taxi':'\\ud83d\\ude95',\n  'tea':'\\ud83c\\udf75',\n  'telephone_receiver':'\\ud83d\\udcde',\n  'telescope':'\\ud83d\\udd2d',\n  'tennis':'\\ud83c\\udfbe',\n  'tent':'\\u26fa\\ufe0f',\n  'thermometer':'\\ud83c\\udf21',\n  'thinking':'\\ud83e\\udd14',\n  'thought_balloon':'\\ud83d\\udcad',\n  'ticket':'\\ud83c\\udfab',\n  'tickets':'\\ud83c\\udf9f',\n  'tiger':'\\ud83d\\udc2f',\n  'tiger2':'\\ud83d\\udc05',\n  'timer_clock':'\\u23f2',\n  'tipping_hand_man':'\\ud83d\\udc81&zwj;\\u2642\\ufe0f',\n  'tired_face':'\\ud83d\\ude2b',\n  'tm':'\\u2122\\ufe0f',\n  'toilet':'\\ud83d\\udebd',\n  'tokyo_tower':'\\ud83d\\uddfc',\n  'tomato':'\\ud83c\\udf45',\n  'tongue':'\\ud83d\\udc45',\n  'top':'\\ud83d\\udd1d',\n  'tophat':'\\ud83c\\udfa9',\n  'tornado':'\\ud83c\\udf2a',\n  'trackball':'\\ud83d\\uddb2',\n  'tractor':'\\ud83d\\ude9c',\n  'traffic_light':'\\ud83d\\udea5',\n  'train':'\\ud83d\\ude8b',\n  'train2':'\\ud83d\\ude86',\n  'tram':'\\ud83d\\ude8a',\n  'triangular_flag_on_post':'\\ud83d\\udea9',\n  'triangular_ruler':'\\ud83d\\udcd0',\n  'trident':'\\ud83d\\udd31',\n  'triumph':'\\ud83d\\ude24',\n  'trolleybus':'\\ud83d\\ude8e',\n  'trophy':'\\ud83c\\udfc6',\n  'tropical_drink':'\\ud83c\\udf79',\n  'tropical_fish':'\\ud83d\\udc20',\n  'truck':'\\ud83d\\ude9a',\n  'trumpet':'\\ud83c\\udfba',\n  'tulip':'\\ud83c\\udf37',\n  'tumbler_glass':'\\ud83e\\udd43',\n  'turkey':'\\ud83e\\udd83',\n  'turtle':'\\ud83d\\udc22',\n  'tv':'\\ud83d\\udcfa',\n  'twisted_rightwards_arrows':'\\ud83d\\udd00',\n  'two_hearts':'\\ud83d\\udc95',\n  'two_men_holding_hands':'\\ud83d\\udc6c',\n  'two_women_holding_hands':'\\ud83d\\udc6d',\n  'u5272':'\\ud83c\\ude39',\n  'u5408':'\\ud83c\\ude34',\n  'u55b6':'\\ud83c\\ude3a',\n  'u6307':'\\ud83c\\ude2f\\ufe0f',\n  'u6708':'\\ud83c\\ude37\\ufe0f',\n  'u6709':'\\ud83c\\ude36',\n  'u6e80':'\\ud83c\\ude35',\n  'u7121':'\\ud83c\\ude1a\\ufe0f',\n  'u7533':'\\ud83c\\ude38',\n  'u7981':'\\ud83c\\ude32',\n  'u7a7a':'\\ud83c\\ude33',\n  'umbrella':'\\u2614\\ufe0f',\n  'unamused':'\\ud83d\\ude12',\n  'underage':'\\ud83d\\udd1e',\n  'unicorn':'\\ud83e\\udd84',\n  'unlock':'\\ud83d\\udd13',\n  'up':'\\ud83c\\udd99',\n  'upside_down_face':'\\ud83d\\ude43',\n  'v':'\\u270c\\ufe0f',\n  'vertical_traffic_light':'\\ud83d\\udea6',\n  'vhs':'\\ud83d\\udcfc',\n  'vibration_mode':'\\ud83d\\udcf3',\n  'video_camera':'\\ud83d\\udcf9',\n  'video_game':'\\ud83c\\udfae',\n  'violin':'\\ud83c\\udfbb',\n  'virgo':'\\u264d\\ufe0f',\n  'volcano':'\\ud83c\\udf0b',\n  'volleyball':'\\ud83c\\udfd0',\n  'vs':'\\ud83c\\udd9a',\n  'vulcan_salute':'\\ud83d\\udd96',\n  'walking_man':'\\ud83d\\udeb6',\n  'walking_woman':'\\ud83d\\udeb6&zwj;\\u2640\\ufe0f',\n  'waning_crescent_moon':'\\ud83c\\udf18',\n  'waning_gibbous_moon':'\\ud83c\\udf16',\n  'warning':'\\u26a0\\ufe0f',\n  'wastebasket':'\\ud83d\\uddd1',\n  'watch':'\\u231a\\ufe0f',\n  'water_buffalo':'\\ud83d\\udc03',\n  'watermelon':'\\ud83c\\udf49',\n  'wave':'\\ud83d\\udc4b',\n  'wavy_dash':'\\u3030\\ufe0f',\n  'waxing_crescent_moon':'\\ud83c\\udf12',\n  'wc':'\\ud83d\\udebe',\n  'weary':'\\ud83d\\ude29',\n  'wedding':'\\ud83d\\udc92',\n  'weight_lifting_man':'\\ud83c\\udfcb\\ufe0f',\n  'weight_lifting_woman':'\\ud83c\\udfcb\\ufe0f&zwj;\\u2640\\ufe0f',\n  'whale':'\\ud83d\\udc33',\n  'whale2':'\\ud83d\\udc0b',\n  'wheel_of_dharma':'\\u2638\\ufe0f',\n  'wheelchair':'\\u267f\\ufe0f',\n  'white_check_mark':'\\u2705',\n  'white_circle':'\\u26aa\\ufe0f',\n  'white_flag':'\\ud83c\\udff3\\ufe0f',\n  'white_flower':'\\ud83d\\udcae',\n  'white_large_square':'\\u2b1c\\ufe0f',\n  'white_medium_small_square':'\\u25fd\\ufe0f',\n  'white_medium_square':'\\u25fb\\ufe0f',\n  'white_small_square':'\\u25ab\\ufe0f',\n  'white_square_button':'\\ud83d\\udd33',\n  'wilted_flower':'\\ud83e\\udd40',\n  'wind_chime':'\\ud83c\\udf90',\n  'wind_face':'\\ud83c\\udf2c',\n  'wine_glass':'\\ud83c\\udf77',\n  'wink':'\\ud83d\\ude09',\n  'wolf':'\\ud83d\\udc3a',\n  'woman':'\\ud83d\\udc69',\n  'woman_artist':'\\ud83d\\udc69&zwj;\\ud83c\\udfa8',\n  'woman_astronaut':'\\ud83d\\udc69&zwj;\\ud83d\\ude80',\n  'woman_cartwheeling':'\\ud83e\\udd38&zwj;\\u2640\\ufe0f',\n  'woman_cook':'\\ud83d\\udc69&zwj;\\ud83c\\udf73',\n  'woman_facepalming':'\\ud83e\\udd26&zwj;\\u2640\\ufe0f',\n  'woman_factory_worker':'\\ud83d\\udc69&zwj;\\ud83c\\udfed',\n  'woman_farmer':'\\ud83d\\udc69&zwj;\\ud83c\\udf3e',\n  'woman_firefighter':'\\ud83d\\udc69&zwj;\\ud83d\\ude92',\n  'woman_health_worker':'\\ud83d\\udc69&zwj;\\u2695\\ufe0f',\n  'woman_judge':'\\ud83d\\udc69&zwj;\\u2696\\ufe0f',\n  'woman_juggling':'\\ud83e\\udd39&zwj;\\u2640\\ufe0f',\n  'woman_mechanic':'\\ud83d\\udc69&zwj;\\ud83d\\udd27',\n  'woman_office_worker':'\\ud83d\\udc69&zwj;\\ud83d\\udcbc',\n  'woman_pilot':'\\ud83d\\udc69&zwj;\\u2708\\ufe0f',\n  'woman_playing_handball':'\\ud83e\\udd3e&zwj;\\u2640\\ufe0f',\n  'woman_playing_water_polo':'\\ud83e\\udd3d&zwj;\\u2640\\ufe0f',\n  'woman_scientist':'\\ud83d\\udc69&zwj;\\ud83d\\udd2c',\n  'woman_shrugging':'\\ud83e\\udd37&zwj;\\u2640\\ufe0f',\n  'woman_singer':'\\ud83d\\udc69&zwj;\\ud83c\\udfa4',\n  'woman_student':'\\ud83d\\udc69&zwj;\\ud83c\\udf93',\n  'woman_teacher':'\\ud83d\\udc69&zwj;\\ud83c\\udfeb',\n  'woman_technologist':'\\ud83d\\udc69&zwj;\\ud83d\\udcbb',\n  'woman_with_turban':'\\ud83d\\udc73&zwj;\\u2640\\ufe0f',\n  'womans_clothes':'\\ud83d\\udc5a',\n  'womans_hat':'\\ud83d\\udc52',\n  'women_wrestling':'\\ud83e\\udd3c&zwj;\\u2640\\ufe0f',\n  'womens':'\\ud83d\\udeba',\n  'world_map':'\\ud83d\\uddfa',\n  'worried':'\\ud83d\\ude1f',\n  'wrench':'\\ud83d\\udd27',\n  'writing_hand':'\\u270d\\ufe0f',\n  'x':'\\u274c',\n  'yellow_heart':'\\ud83d\\udc9b',\n  'yen':'\\ud83d\\udcb4',\n  'yin_yang':'\\u262f\\ufe0f',\n  'yum':'\\ud83d\\ude0b',\n  'zap':'\\u26a1\\ufe0f',\n  'zipper_mouth_face':'\\ud83e\\udd10',\n  'zzz':'\\ud83d\\udca4',\n\n  /* special emojis :P */\n  'octocat':  '<img alt=\":octocat:\" height=\"20\" width=\"20\" align=\"absmiddle\" src=\"https://assets-cdn.github.com/images/icons/emoji/octocat.png\">',\n  'showdown': '<span style=\"font-family: \\'Anonymous Pro\\', monospace; text-decoration: underline; text-decoration-style: dashed; text-decoration-color: #3e8b8a;text-underline-position: under;\">S</span>'\n};\n\r\n/**\n * Created by Estevao on 31-05-2015.\n */\n\n/**\n * Showdown Converter class\n * @class\n * @param {object} [converterOptions]\n * @returns {Converter}\n */\nshowdown.Converter = function (converterOptions) {\n  'use strict';\n\n  var\n      /**\n       * Options used by this converter\n       * @private\n       * @type {{}}\n       */\n      options = {},\n\n      /**\n       * Language extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      langExtensions = [],\n\n      /**\n       * Output modifiers extensions used by this converter\n       * @private\n       * @type {Array}\n       */\n      outputModifiers = [],\n\n      /**\n       * Event listeners\n       * @private\n       * @type {{}}\n       */\n      listeners = {},\n\n      /**\n       * The flavor set in this converter\n       */\n      setConvFlavor = setFlavor,\n\n      /**\n       * Metadata of the document\n       * @type {{parsed: {}, raw: string, format: string}}\n       */\n      metadata = {\n        parsed: {},\n        raw: '',\n        format: ''\n      };\n\n  _constructor();\n\n  /**\n   * Converter constructor\n   * @private\n   */\n  function _constructor () {\n    converterOptions = converterOptions || {};\n\n    for (var gOpt in globalOptions) {\n      if (globalOptions.hasOwnProperty(gOpt)) {\n        options[gOpt] = globalOptions[gOpt];\n      }\n    }\n\n    // Merge options\n    if (typeof converterOptions === 'object') {\n      for (var opt in converterOptions) {\n        if (converterOptions.hasOwnProperty(opt)) {\n          options[opt] = converterOptions[opt];\n        }\n      }\n    } else {\n      throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions +\n      ' was passed instead.');\n    }\n\n    if (options.extensions) {\n      showdown.helper.forEach(options.extensions, _parseExtension);\n    }\n  }\n\n  /**\n   * Parse extension\n   * @param {*} ext\n   * @param {string} [name='']\n   * @private\n   */\n  function _parseExtension (ext, name) {\n\n    name = name || null;\n    // If it's a string, the extension was previously loaded\n    if (showdown.helper.isString(ext)) {\n      ext = showdown.helper.stdExtName(ext);\n      name = ext;\n\n      // LEGACY_SUPPORT CODE\n      if (showdown.extensions[ext]) {\n        console.warn('DEPRECATION WARNING: ' + ext + ' is an old extension that uses a deprecated loading method.' +\n          'Please inform the developer that the extension should be updated!');\n        legacyExtensionLoading(showdown.extensions[ext], ext);\n        return;\n        // END LEGACY SUPPORT CODE\n\n      } else if (!showdown.helper.isUndefined(extensions[ext])) {\n        ext = extensions[ext];\n\n      } else {\n        throw Error('Extension \"' + ext + '\" could not be loaded. It was either not found or is not a valid extension.');\n      }\n    }\n\n    if (typeof ext === 'function') {\n      ext = ext();\n    }\n\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n\n    var validExt = validate(ext, name);\n    if (!validExt.valid) {\n      throw Error(validExt.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n      }\n      if (ext[i].hasOwnProperty('listeners')) {\n        for (var ln in ext[i].listeners) {\n          if (ext[i].listeners.hasOwnProperty(ln)) {\n            listen(ln, ext[i].listeners[ln]);\n          }\n        }\n      }\n    }\n\n  }\n\n  /**\n   * LEGACY_SUPPORT\n   * @param {*} ext\n   * @param {string} name\n   */\n  function legacyExtensionLoading (ext, name) {\n    if (typeof ext === 'function') {\n      ext = ext(new showdown.Converter());\n    }\n    if (!showdown.helper.isArray(ext)) {\n      ext = [ext];\n    }\n    var valid = validate(ext, name);\n\n    if (!valid.valid) {\n      throw Error(valid.error);\n    }\n\n    for (var i = 0; i < ext.length; ++i) {\n      switch (ext[i].type) {\n        case 'lang':\n          langExtensions.push(ext[i]);\n          break;\n        case 'output':\n          outputModifiers.push(ext[i]);\n          break;\n        default:// should never reach here\n          throw Error('Extension loader error: Type unrecognized!!!');\n      }\n    }\n  }\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   */\n  function listen (name, callback) {\n    if (!showdown.helper.isString(name)) {\n      throw Error('Invalid argument in converter.listen() method: name must be a string, but ' + typeof name + ' given');\n    }\n\n    if (typeof callback !== 'function') {\n      throw Error('Invalid argument in converter.listen() method: callback must be a function, but ' + typeof callback + ' given');\n    }\n\n    if (!listeners.hasOwnProperty(name)) {\n      listeners[name] = [];\n    }\n    listeners[name].push(callback);\n  }\n\n  function rTrimInputText (text) {\n    var rsp = text.match(/^\\s*/)[0].length,\n        rgx = new RegExp('^\\\\s{0,' + rsp + '}', 'gm');\n    return text.replace(rgx, '');\n  }\n\n  /**\n   * Dispatch an event\n   * @private\n   * @param {string} evtName Event name\n   * @param {string} text Text\n   * @param {{}} options Converter Options\n   * @param {{}} globals\n   * @returns {string}\n   */\n  this._dispatch = function dispatch (evtName, text, options, globals) {\n    if (listeners.hasOwnProperty(evtName)) {\n      for (var ei = 0; ei < listeners[evtName].length; ++ei) {\n        var nText = listeners[evtName][ei](evtName, text, this, options, globals);\n        if (nText && typeof nText !== 'undefined') {\n          text = nText;\n        }\n      }\n    }\n    return text;\n  };\n\n  /**\n   * Listen to an event\n   * @param {string} name\n   * @param {function} callback\n   * @returns {showdown.Converter}\n   */\n  this.listen = function (name, callback) {\n    listen(name, callback);\n    return this;\n  };\n\n  /**\n   * Converts a markdown string into HTML\n   * @param {string} text\n   * @returns {*}\n   */\n  this.makeHtml = function (text) {\n    //check if text is not falsy\n    if (!text) {\n      return text;\n    }\n\n    var globals = {\n      gHtmlBlocks:     [],\n      gHtmlMdBlocks:   [],\n      gHtmlSpans:      [],\n      gUrls:           {},\n      gTitles:         {},\n      gDimensions:     {},\n      gListLevel:      0,\n      hashLinkCounts:  {},\n      langExtensions:  langExtensions,\n      outputModifiers: outputModifiers,\n      converter:       this,\n      ghCodeBlocks:    [],\n      metadata: {\n        parsed: {},\n        raw: '',\n        format: ''\n      }\n    };\n\n    // This lets us use ¨ trema as an escape char to avoid md5 hashes\n    // The choice of character is arbitrary; anything that isn't\n    // magic in Markdown will work.\n    text = text.replace(/¨/g, '¨T');\n\n    // Replace $ with ¨D\n    // RegExp interprets $ as a special character\n    // when it's in a replacement string\n    text = text.replace(/\\$/g, '¨D');\n\n    // Standardize line endings\n    text = text.replace(/\\r\\n/g, '\\n'); // DOS to Unix\n    text = text.replace(/\\r/g, '\\n'); // Mac to Unix\n\n    // Stardardize line spaces\n    text = text.replace(/\\u00A0/g, '&nbsp;');\n\n    if (options.smartIndentationFix) {\n      text = rTrimInputText(text);\n    }\n\n    // Make sure text begins and ends with a couple of newlines:\n    text = '\\n\\n' + text + '\\n\\n';\n\n    // detab\n    text = showdown.subParser('detab')(text, options, globals);\n\n    /**\n     * Strip any lines consisting only of spaces and tabs.\n     * This makes subsequent regexs easier to write, because we can\n     * match consecutive blank lines with /\\n+/ instead of something\n     * contorted like /[ \\t]*\\n+/\n     */\n    text = text.replace(/^[ \\t]+$/mg, '');\n\n    //run languageExtensions\n    showdown.helper.forEach(langExtensions, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // run the sub parsers\n    text = showdown.subParser('metadata')(text, options, globals);\n    text = showdown.subParser('hashPreCodeTags')(text, options, globals);\n    text = showdown.subParser('githubCodeBlocks')(text, options, globals);\n    text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n    text = showdown.subParser('hashCodeTags')(text, options, globals);\n    text = showdown.subParser('stripLinkDefinitions')(text, options, globals);\n    text = showdown.subParser('blockGamut')(text, options, globals);\n    text = showdown.subParser('unhashHTMLSpans')(text, options, globals);\n    text = showdown.subParser('unescapeSpecialChars')(text, options, globals);\n\n    // attacklab: Restore dollar signs\n    text = text.replace(/¨D/g, '$$');\n\n    // attacklab: Restore tremas\n    text = text.replace(/¨T/g, '¨');\n\n    // render a complete html document instead of a partial if the option is enabled\n    text = showdown.subParser('completeHTMLDocument')(text, options, globals);\n\n    // Run output modifiers\n    showdown.helper.forEach(outputModifiers, function (ext) {\n      text = showdown.subParser('runExtension')(ext, text, options, globals);\n    });\n\n    // update metadata\n    metadata = globals.metadata;\n    return text;\n  };\n\n  /**\n   * Converts an HTML string into a markdown string\n   * @param src\n   * @param [HTMLParser] A WHATWG DOM and HTML parser, such as JSDOM. If none is supplied, window.document will be used.\n   * @returns {string}\n   */\n  this.makeMarkdown = this.makeMd = function (src, HTMLParser) {\n\n    // replace \\r\\n with \\n\n    src = src.replace(/\\r\\n/g, '\\n');\n    src = src.replace(/\\r/g, '\\n'); // old macs\n\n    // due to an edge case, we need to find this: > <\n    // to prevent removing of non silent white spaces\n    // ex: <em>this is</em> <strong>sparta</strong>\n    src = src.replace(/>[ \\t]+</, '>¨NBSP;<');\n\n    if (!HTMLParser) {\n      if (window && window.document) {\n        HTMLParser = window.document;\n      } else {\n        throw new Error('HTMLParser is undefined. If in a webworker or nodejs environment, you need to provide a WHATWG DOM and HTML such as JSDOM');\n      }\n    }\n\n    var doc = HTMLParser.createElement('div');\n    doc.innerHTML = src;\n\n    var globals = {\n      preList: substitutePreCodeTags(doc)\n    };\n\n    // remove all newlines and collapse spaces\n    clean(doc);\n\n    // some stuff, like accidental reference links must now be escaped\n    // TODO\n    // doc.innerHTML = doc.innerHTML.replace(/\\[[\\S\\t ]]/);\n\n    var nodes = doc.childNodes,\n        mdDoc = '';\n\n    for (var i = 0; i < nodes.length; i++) {\n      mdDoc += showdown.subParser('makeMarkdown.node')(nodes[i], globals);\n    }\n\n    function clean (node) {\n      for (var n = 0; n < node.childNodes.length; ++n) {\n        var child = node.childNodes[n];\n        if (child.nodeType === 3) {\n          if (!/\\S/.test(child.nodeValue)) {\n            node.removeChild(child);\n            --n;\n          } else {\n            child.nodeValue = child.nodeValue.split('\\n').join(' ');\n            child.nodeValue = child.nodeValue.replace(/(\\s)+/g, '$1');\n          }\n        } else if (child.nodeType === 1) {\n          clean(child);\n        }\n      }\n    }\n\n    // find all pre tags and replace contents with placeholder\n    // we need this so that we can remove all indentation from html\n    // to ease up parsing\n    function substitutePreCodeTags (doc) {\n\n      var pres = doc.querySelectorAll('pre'),\n          presPH = [];\n\n      for (var i = 0; i < pres.length; ++i) {\n\n        if (pres[i].childElementCount === 1 && pres[i].firstChild.tagName.toLowerCase() === 'code') {\n          var content = pres[i].firstChild.innerHTML.trim(),\n              language = pres[i].firstChild.getAttribute('data-language') || '';\n\n          // if data-language attribute is not defined, then we look for class language-*\n          if (language === '') {\n            var classes = pres[i].firstChild.className.split(' ');\n            for (var c = 0; c < classes.length; ++c) {\n              var matches = classes[c].match(/^language-(.+)$/);\n              if (matches !== null) {\n                language = matches[1];\n                break;\n              }\n            }\n          }\n\n          // unescape html entities in content\n          content = showdown.helper.unescapeHTMLEntities(content);\n\n          presPH.push(content);\n          pres[i].outerHTML = '<precode language=\"' + language + '\" precodenum=\"' + i.toString() + '\"></precode>';\n        } else {\n          presPH.push(pres[i].innerHTML);\n          pres[i].innerHTML = '';\n          pres[i].setAttribute('prenum', i.toString());\n        }\n      }\n      return presPH;\n    }\n\n    return mdDoc;\n  };\n\n  /**\n   * Set an option of this Converter instance\n   * @param {string} key\n   * @param {*} value\n   */\n  this.setOption = function (key, value) {\n    options[key] = value;\n  };\n\n  /**\n   * Get the option of this Converter instance\n   * @param {string} key\n   * @returns {*}\n   */\n  this.getOption = function (key) {\n    return options[key];\n  };\n\n  /**\n   * Get the options of this Converter instance\n   * @returns {{}}\n   */\n  this.getOptions = function () {\n    return options;\n  };\n\n  /**\n   * Add extension to THIS converter\n   * @param {{}} extension\n   * @param {string} [name=null]\n   */\n  this.addExtension = function (extension, name) {\n    name = name || null;\n    _parseExtension(extension, name);\n  };\n\n  /**\n   * Use a global registered extension with THIS converter\n   * @param {string} extensionName Name of the previously registered extension\n   */\n  this.useExtension = function (extensionName) {\n    _parseExtension(extensionName);\n  };\n\n  /**\n   * Set the flavor THIS converter should use\n   * @param {string} name\n   */\n  this.setFlavor = function (name) {\n    if (!flavor.hasOwnProperty(name)) {\n      throw Error(name + ' flavor was not found');\n    }\n    var preset = flavor[name];\n    setConvFlavor = name;\n    for (var option in preset) {\n      if (preset.hasOwnProperty(option)) {\n        options[option] = preset[option];\n      }\n    }\n  };\n\n  /**\n   * Get the currently set flavor of this converter\n   * @returns {string}\n   */\n  this.getFlavor = function () {\n    return setConvFlavor;\n  };\n\n  /**\n   * Remove an extension from THIS converter.\n   * Note: This is a costly operation. It's better to initialize a new converter\n   * and specify the extensions you wish to use\n   * @param {Array} extension\n   */\n  this.removeExtension = function (extension) {\n    if (!showdown.helper.isArray(extension)) {\n      extension = [extension];\n    }\n    for (var a = 0; a < extension.length; ++a) {\n      var ext = extension[a];\n      for (var i = 0; i < langExtensions.length; ++i) {\n        if (langExtensions[i] === ext) {\n          langExtensions[i].splice(i, 1);\n        }\n      }\n      for (var ii = 0; ii < outputModifiers.length; ++i) {\n        if (outputModifiers[ii] === ext) {\n          outputModifiers[ii].splice(i, 1);\n        }\n      }\n    }\n  };\n\n  /**\n   * Get all extension of THIS converter\n   * @returns {{language: Array, output: Array}}\n   */\n  this.getAllExtensions = function () {\n    return {\n      language: langExtensions,\n      output: outputModifiers\n    };\n  };\n\n  /**\n   * Get the metadata of the previously parsed document\n   * @param raw\n   * @returns {string|{}}\n   */\n  this.getMetadata = function (raw) {\n    if (raw) {\n      return metadata.raw;\n    } else {\n      return metadata.parsed;\n    }\n  };\n\n  /**\n   * Get the metadata format of the previously parsed document\n   * @returns {string}\n   */\n  this.getMetadataFormat = function () {\n    return metadata.format;\n  };\n\n  /**\n   * Private: set a single key, value metadata pair\n   * @param {string} key\n   * @param {string} value\n   */\n  this._setMetadataPair = function (key, value) {\n    metadata.parsed[key] = value;\n  };\n\n  /**\n   * Private: set metadata format\n   * @param {string} format\n   */\n  this._setMetadataFormat = function (format) {\n    metadata.format = format;\n  };\n\n  /**\n   * Private: set metadata raw text\n   * @param {string} raw\n   */\n  this._setMetadataRaw = function (raw) {\n    metadata.raw = raw;\n  };\n};\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('anchors', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('anchors.before', text, options, globals);\n\n  var writeAnchorTag = function (wholeMatch, linkText, linkId, url, m5, m6, title) {\n    if (showdown.helper.isUndefined(title)) {\n      title = '';\n    }\n    linkId = linkId.toLowerCase();\n\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n    } else if (!url) {\n      if (!linkId) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = linkText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(globals.gUrls[linkId])) {\n        url = globals.gUrls[linkId];\n        if (!showdown.helper.isUndefined(globals.gTitles[linkId])) {\n          title = globals.gTitles[linkId];\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    //url = showdown.helper.escapeCharacters(url, '*_', false); // replaced line to improve performance\n    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n\n    var result = '<a href=\"' + url + '\"';\n\n    if (title !== '' && title !== null) {\n      title = title.replace(/\"/g, '&quot;');\n      //title = showdown.helper.escapeCharacters(title, '*_', false); // replaced line to improve performance\n      title = title.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    // optionLinksInNewWindow only applies\n    // to external links. Hash links (#) open in same page\n    if (options.openLinksInNewWindow && !/^#/.test(url)) {\n      // escaped _\n      result += ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\n    }\n\n    result += '>' + linkText + '</a>';\n\n    return result;\n  };\n\n  // First, handle reference-style links: [link text] [id]\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)] ?(?:\\n *)?\\[(.*?)]()()()()/g, writeAnchorTag);\n\n  // Next, inline-style links: [link text](url \"optional title\")\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<([^>]*)>(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n    writeAnchorTag);\n\n  // normal cases\n  text = text.replace(/\\[((?:\\[[^\\]]*]|[^\\[\\]])*)]()[ \\t]*\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?:[ \\t]*(([\"'])([^\"]*?)\\5))?[ \\t]?\\)/g,\n    writeAnchorTag);\n\n  // handle reference-style shortcuts: [link text]\n  // These must come last in case you've also got [link test][1]\n  // or [link test](/foo)\n  text = text.replace(/\\[([^\\[\\]]+)]()()()()()/g, writeAnchorTag);\n\n  // Lastly handle GithubMentions if option is enabled\n  if (options.ghMentions) {\n    text = text.replace(/(^|\\s)(\\\\)?(@([a-z\\d]+(?:[a-z\\d.-]+?[a-z\\d]+)*))/gmi, function (wm, st, escape, mentions, username) {\n      if (escape === '\\\\') {\n        return st + mentions;\n      }\n\n      //check if options.ghMentionsLink is a string\n      if (!showdown.helper.isString(options.ghMentionsLink)) {\n        throw new Error('ghMentionsLink option must be a string');\n      }\n      var lnk = options.ghMentionsLink.replace(/\\{u}/g, username),\n          target = '';\n      if (options.openLinksInNewWindow) {\n        target = ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\n      }\n      return st + '<a href=\"' + lnk + '\"' + target + '>' + mentions + '</a>';\n    });\n  }\n\n  text = globals.converter._dispatch('anchors.after', text, options, globals);\n  return text;\n});\n\r\n// url allowed chars [a-z\\d_.~:/?#[]@!$&'()*+,;=-]\n\nvar simpleURLRegex  = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+?\\.[^'\">\\s]+?)()(\\1)?(?=\\s|$)(?![\"<>])/gi,\n    simpleURLRegex2 = /([*~_]+|\\b)(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+\\.[^'\">\\s]+?)([.!?,()\\[\\]])?(\\1)?(?=\\s|$)(?![\"<>])/gi,\n    delimUrlRegex   = /()<(((https?|ftp|dict):\\/\\/|www\\.)[^'\">\\s]+)()>()/gi,\n    simpleMailRegex = /(^|\\s)(?:mailto:)?([A-Za-z0-9!#$%&'*+-/=?^_`{|}~.]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)(?=$|\\s)/gmi,\n    delimMailRegex  = /<()(?:mailto:)?([-.\\w]+@[-a-z0-9]+(\\.[-a-z0-9]+)*\\.[a-z]+)>/gi,\n\n    replaceLink = function (options) {\n      'use strict';\n      return function (wm, leadingMagicChars, link, m2, m3, trailingPunctuation, trailingMagicChars) {\n        link = link.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n        var lnkTxt = link,\n            append = '',\n            target = '',\n            lmc    = leadingMagicChars || '',\n            tmc    = trailingMagicChars || '';\n        if (/^www\\./i.test(link)) {\n          link = link.replace(/^www\\./i, 'http://www.');\n        }\n        if (options.excludeTrailingPunctuationFromURLs && trailingPunctuation) {\n          append = trailingPunctuation;\n        }\n        if (options.openLinksInNewWindow) {\n          target = ' rel=\"noopener noreferrer\" target=\"¨E95Eblank\"';\n        }\n        return lmc + '<a href=\"' + link + '\"' + target + '>' + lnkTxt + '</a>' + append + tmc;\n      };\n    },\n\n    replaceMail = function (options, globals) {\n      'use strict';\n      return function (wholeMatch, b, mail) {\n        var href = 'mailto:';\n        b = b || '';\n        mail = showdown.subParser('unescapeSpecialChars')(mail, options, globals);\n        if (options.encodeEmails) {\n          href = showdown.helper.encodeEmailAddress(href + mail);\n          mail = showdown.helper.encodeEmailAddress(mail);\n        } else {\n          href = href + mail;\n        }\n        return b + '<a href=\"' + href + '\">' + mail + '</a>';\n      };\n    };\n\nshowdown.subParser('autoLinks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('autoLinks.before', text, options, globals);\n\n  text = text.replace(delimUrlRegex, replaceLink(options));\n  text = text.replace(delimMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('autoLinks.after', text, options, globals);\n\n  return text;\n});\n\nshowdown.subParser('simplifiedAutoLinks', function (text, options, globals) {\n  'use strict';\n\n  if (!options.simplifiedAutoLink) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.before', text, options, globals);\n\n  if (options.excludeTrailingPunctuationFromURLs) {\n    text = text.replace(simpleURLRegex2, replaceLink(options));\n  } else {\n    text = text.replace(simpleURLRegex, replaceLink(options));\n  }\n  text = text.replace(simpleMailRegex, replaceMail(options, globals));\n\n  text = globals.converter._dispatch('simplifiedAutoLinks.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that form block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('blockGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockGamut.before', text, options, globals);\n\n  // we parse blockquotes first so that we can have headings and hrs\n  // inside blockquotes\n  text = showdown.subParser('blockQuotes')(text, options, globals);\n  text = showdown.subParser('headers')(text, options, globals);\n\n  // Do Horizontal Rules:\n  text = showdown.subParser('horizontalRule')(text, options, globals);\n\n  text = showdown.subParser('lists')(text, options, globals);\n  text = showdown.subParser('codeBlocks')(text, options, globals);\n  text = showdown.subParser('tables')(text, options, globals);\n\n  // We already ran _HashHTMLBlocks() before, in Markdown(), but that\n  // was to escape raw HTML in the original Markdown source. This time,\n  // we're escaping the markup we've just created, so that we don't wrap\n  // <p> tags around block-level tags.\n  text = showdown.subParser('hashHTMLBlocks')(text, options, globals);\n  text = showdown.subParser('paragraphs')(text, options, globals);\n\n  text = globals.converter._dispatch('blockGamut.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('blockQuotes', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('blockQuotes.before', text, options, globals);\n\n  // add a couple extra lines after the text and endtext mark\n  text = text + '\\n\\n';\n\n  var rgx = /(^ {0,3}>[ \\t]?.+\\n(.+\\n)*\\n*)+/gm;\n\n  if (options.splitAdjacentBlockquotes) {\n    rgx = /^ {0,3}>[\\s\\S]*?(?:\\n\\n)/gm;\n  }\n\n  text = text.replace(rgx, function (bq) {\n    // attacklab: hack around Konqueror 3.5.4 bug:\n    // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n    bq = bq.replace(/^[ \\t]*>[ \\t]?/gm, ''); // trim one level of quoting\n\n    // attacklab: clean up hack\n    bq = bq.replace(/¨0/g, '');\n\n    bq = bq.replace(/^[ \\t]+$/gm, ''); // trim whitespace-only lines\n    bq = showdown.subParser('githubCodeBlocks')(bq, options, globals);\n    bq = showdown.subParser('blockGamut')(bq, options, globals); // recurse\n\n    bq = bq.replace(/(^|\\n)/g, '$1  ');\n    // These leading spaces screw with <pre> content, so we need to fix that:\n    bq = bq.replace(/(\\s*<pre>[^\\r]+?<\\/pre>)/gm, function (wholeMatch, m1) {\n      var pre = m1;\n      // attacklab: hack around Konqueror 3.5.4 bug:\n      pre = pre.replace(/^  /mg, '¨0');\n      pre = pre.replace(/¨0/g, '');\n      return pre;\n    });\n\n    return showdown.subParser('hashBlock')('<blockquote>\\n' + bq + '\\n</blockquote>', options, globals);\n  });\n\n  text = globals.converter._dispatch('blockQuotes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Process Markdown `<pre><code>` blocks.\n */\nshowdown.subParser('codeBlocks', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeBlocks.before', text, options, globals);\n\n  // sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var pattern = /(?:\\n\\n|^)((?:(?:[ ]{4}|\\t).*\\n+)+)(\\n*[ ]{0,3}[^ \\t\\n]|(?=¨0))/g;\n  text = text.replace(pattern, function (wholeMatch, m1, m2) {\n    var codeblock = m1,\n        nextChar = m2,\n        end = '\\n';\n\n    codeblock = showdown.subParser('outdent')(codeblock, options, globals);\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing newlines\n\n    if (options.omitExtraWLInCodeBlocks) {\n      end = '';\n    }\n\n    codeblock = '<pre><code>' + codeblock + end + '</code></pre>';\n\n    return showdown.subParser('hashBlock')(codeblock, options, globals) + nextChar;\n  });\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n\n  text = globals.converter._dispatch('codeBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n *   *  Backtick quotes are used for <code></code> spans.\n *\n *   *  You can use multiple backticks as the delimiters if you want to\n *     include literal backticks in the code span. So, this input:\n *\n *         Just type ``foo `bar` baz`` at the prompt.\n *\n *       Will translate to:\n *\n *         <p>Just type <code>foo `bar` baz</code> at the prompt.</p>\n *\n *    There's no arbitrary limit to the number of backticks you\n *    can use as delimters. If you need three consecutive backticks\n *    in your code, use four for delimiters, etc.\n *\n *  *  You can use spaces to get literal backticks at the edges:\n *\n *         ... type `` `bar` `` ...\n *\n *       Turns to:\n *\n *         ... type <code>`bar`</code> ...\n */\nshowdown.subParser('codeSpans', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('codeSpans.before', text, options, globals);\n\n  if (typeof text === 'undefined') {\n    text = '';\n  }\n  text = text.replace(/(^|[^\\\\])(`+)([^\\r]*?[^`])\\2(?!`)/gm,\n    function (wholeMatch, m1, m2, m3) {\n      var c = m3;\n      c = c.replace(/^([ \\t]*)/g, '');\t// leading whitespace\n      c = c.replace(/[ \\t]*$/g, '');\t// trailing whitespace\n      c = showdown.subParser('encodeCode')(c, options, globals);\n      c = m1 + '<code>' + c + '</code>';\n      c = showdown.subParser('hashHTMLSpans')(c, options, globals);\n      return c;\n    }\n  );\n\n  text = globals.converter._dispatch('codeSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Create a full HTML document from the processed markdown\n */\nshowdown.subParser('completeHTMLDocument', function (text, options, globals) {\n  'use strict';\n\n  if (!options.completeHTMLDocument) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('completeHTMLDocument.before', text, options, globals);\n\n  var doctype = 'html',\n      doctypeParsed = '<!DOCTYPE HTML>\\n',\n      title = '',\n      charset = '<meta charset=\"utf-8\">\\n',\n      lang = '',\n      metadata = '';\n\n  if (typeof globals.metadata.parsed.doctype !== 'undefined') {\n    doctypeParsed = '<!DOCTYPE ' +  globals.metadata.parsed.doctype + '>\\n';\n    doctype = globals.metadata.parsed.doctype.toString().toLowerCase();\n    if (doctype === 'html' || doctype === 'html5') {\n      charset = '<meta charset=\"utf-8\">';\n    }\n  }\n\n  for (var meta in globals.metadata.parsed) {\n    if (globals.metadata.parsed.hasOwnProperty(meta)) {\n      switch (meta.toLowerCase()) {\n        case 'doctype':\n          break;\n\n        case 'title':\n          title = '<title>' +  globals.metadata.parsed.title + '</title>\\n';\n          break;\n\n        case 'charset':\n          if (doctype === 'html' || doctype === 'html5') {\n            charset = '<meta charset=\"' + globals.metadata.parsed.charset + '\">\\n';\n          } else {\n            charset = '<meta name=\"charset\" content=\"' + globals.metadata.parsed.charset + '\">\\n';\n          }\n          break;\n\n        case 'language':\n        case 'lang':\n          lang = ' lang=\"' + globals.metadata.parsed[meta] + '\"';\n          metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\n          break;\n\n        default:\n          metadata += '<meta name=\"' + meta + '\" content=\"' + globals.metadata.parsed[meta] + '\">\\n';\n      }\n    }\n  }\n\n  text = doctypeParsed + '<html' + lang + '>\\n<head>\\n' + title + charset + metadata + '</head>\\n<body>\\n' + text.trim() + '\\n</body>\\n</html>';\n\n  text = globals.converter._dispatch('completeHTMLDocument.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Convert all tabs to spaces\n */\nshowdown.subParser('detab', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('detab.before', text, options, globals);\n\n  // expand first n-1 tabs\n  text = text.replace(/\\t(?=\\t)/g, '    '); // g_tab_width\n\n  // replace the nth with two sentinels\n  text = text.replace(/\\t/g, '¨A¨B');\n\n  // use the sentinel to anchor our regex so it doesn't explode\n  text = text.replace(/¨B(.+?)¨A/g, function (wholeMatch, m1) {\n    var leadingText = m1,\n        numSpaces = 4 - leadingText.length % 4;  // g_tab_width\n\n    // there *must* be a better way to do this:\n    for (var i = 0; i < numSpaces; i++) {\n      leadingText += ' ';\n    }\n\n    return leadingText;\n  });\n\n  // clean up sentinels\n  text = text.replace(/¨A/g, '    ');  // g_tab_width\n  text = text.replace(/¨B/g, '');\n\n  text = globals.converter._dispatch('detab.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('ellipsis', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('ellipsis.before', text, options, globals);\n\n  text = text.replace(/\\.\\.\\./g, '…');\n\n  text = globals.converter._dispatch('ellipsis.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Turn emoji codes into emojis\n *\n * List of supported emojis: https://github.com/showdownjs/showdown/wiki/Emojis\n */\nshowdown.subParser('emoji', function (text, options, globals) {\n  'use strict';\n\n  if (!options.emoji) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('emoji.before', text, options, globals);\n\n  var emojiRgx = /:([\\S]+?):/g;\n\n  text = text.replace(emojiRgx, function (wm, emojiCode) {\n    if (showdown.helper.emojis.hasOwnProperty(emojiCode)) {\n      return showdown.helper.emojis[emojiCode];\n    }\n    return wm;\n  });\n\n  text = globals.converter._dispatch('emoji.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Smart processing for ampersands and angle brackets that need to be encoded.\n */\nshowdown.subParser('encodeAmpsAndAngles', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeAmpsAndAngles.before', text, options, globals);\n\n  // Ampersand-encoding based entirely on Nat Irons's Amputator MT plugin:\n  // http://bumppo.net/projects/amputator/\n  text = text.replace(/&(?!#?[xX]?(?:[0-9a-fA-F]+|\\w+);)/g, '&amp;');\n\n  // Encode naked <'s\n  text = text.replace(/<(?![a-z\\/?$!])/gi, '&lt;');\n\n  // Encode <\n  text = text.replace(/</g, '&lt;');\n\n  // Encode >\n  text = text.replace(/>/g, '&gt;');\n\n  text = globals.converter._dispatch('encodeAmpsAndAngles.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Returns the string, with after processing the following backslash escape sequences.\n *\n * attacklab: The polite way to do this is with the new escapeCharacters() function:\n *\n *    text = escapeCharacters(text,\"\\\\\",true);\n *    text = escapeCharacters(text,\"`*_{}[]()>#+-.!\",true);\n *\n * ...but we're sidestepping its use of the (slow) RegExp constructor\n * as an optimization for Firefox.  This function gets called a LOT.\n */\nshowdown.subParser('encodeBackslashEscapes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('encodeBackslashEscapes.before', text, options, globals);\n\n  text = text.replace(/\\\\(\\\\)/g, showdown.helper.escapeCharactersCallback);\n  text = text.replace(/\\\\([`*_{}\\[\\]()>#+.!~=|-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeBackslashEscapes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Encode/escape certain characters inside Markdown code runs.\n * The point is that in code, these characters are literals,\n * and lose their special Markdown meanings.\n */\nshowdown.subParser('encodeCode', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('encodeCode.before', text, options, globals);\n\n  // Encode all ampersands; HTML entities are not\n  // entities within a Markdown code span.\n  text = text\n    .replace(/&/g, '&amp;')\n  // Do the angle bracket song and dance:\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n  // Now, escape characters that are magic in Markdown:\n    .replace(/([*_{}\\[\\]\\\\=~-])/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('encodeCode.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Within tags -- meaning between < and > -- encode [\\ ` * _ ~ =] so they\n * don't conflict with their use in Markdown for code, italics and strong.\n */\nshowdown.subParser('escapeSpecialCharsWithinTagAttributes', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.before', text, options, globals);\n\n  // Build a regex to find HTML tags.\n  var tags     = /<\\/?[a-z\\d_:-]+(?:[\\s]+[\\s\\S]+?)?>/gi,\n      comments = /<!(--(?:(?:[^>-]|-[^>])(?:[^-]|-[^-])*)--)>/gi;\n\n  text = text.replace(tags, function (wholeMatch) {\n    return wholeMatch\n      .replace(/(.)<\\/?code>(?=.)/g, '$1`')\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = text.replace(comments, function (wholeMatch) {\n    return wholeMatch\n      .replace(/([\\\\`*_~=|])/g, showdown.helper.escapeCharactersCallback);\n  });\n\n  text = globals.converter._dispatch('escapeSpecialCharsWithinTagAttributes.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Handle github codeblocks prior to running HashHTML so that\n * HTML contained within the codeblock gets escaped properly\n * Example:\n * ```ruby\n *     def hello_world(x)\n *       puts \"Hello, #{x}\"\n *     end\n * ```\n */\nshowdown.subParser('githubCodeBlocks', function (text, options, globals) {\n  'use strict';\n\n  // early exit if option is not enabled\n  if (!options.ghCodeBlocks) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('githubCodeBlocks.before', text, options, globals);\n\n  text += '¨0';\n\n  text = text.replace(/(?:^|\\n)(?: {0,3})(```+|~~~+)(?: *)([^\\s`~]*)\\n([\\s\\S]*?)\\n(?: {0,3})\\1/g, function (wholeMatch, delim, language, codeblock) {\n    var end = (options.omitExtraWLInCodeBlocks) ? '' : '\\n';\n\n    // First parse the github code block\n    codeblock = showdown.subParser('encodeCode')(codeblock, options, globals);\n    codeblock = showdown.subParser('detab')(codeblock, options, globals);\n    codeblock = codeblock.replace(/^\\n+/g, ''); // trim leading newlines\n    codeblock = codeblock.replace(/\\n+$/g, ''); // trim trailing whitespace\n\n    codeblock = '<pre><code' + (language ? ' class=\"' + language + ' language-' + language + '\"' : '') + '>' + codeblock + end + '</code></pre>';\n\n    codeblock = showdown.subParser('hashBlock')(codeblock, options, globals);\n\n    // Since GHCodeblocks can be false positives, we need to\n    // store the primitive text and the parsed text in a global var,\n    // and then return a token\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  });\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return globals.converter._dispatch('githubCodeBlocks.after', text, options, globals);\n});\n\r\nshowdown.subParser('hashBlock', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashBlock.before', text, options, globals);\n  text = text.replace(/(^\\n+|\\n+$)/g, '');\n  text = '\\n\\n¨K' + (globals.gHtmlBlocks.push(text) - 1) + 'K\\n\\n';\n  text = globals.converter._dispatch('hashBlock.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '¨C' + (globals.gHtmlSpans.push(codeblock) - 1) + 'C';\n  };\n\n  // Hash naked <code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '<code\\\\b[^>]*>', '</code>', 'gim');\n\n  text = globals.converter._dispatch('hashCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('hashElement', function (text, options, globals) {\n  'use strict';\n\n  return function (wholeMatch, m1) {\n    var blockText = m1;\n\n    // Undo double lines\n    blockText = blockText.replace(/\\n\\n/g, '\\n');\n    blockText = blockText.replace(/^\\n/, '');\n\n    // strip trailing blank lines\n    blockText = blockText.replace(/\\n+$/g, '');\n\n    // Replace the element text with a marker (\"¨KxK\" where x is its key)\n    blockText = '\\n\\n¨K' + (globals.gHtmlBlocks.push(blockText) - 1) + 'K\\n\\n';\n\n    return blockText;\n  };\n});\n\r\nshowdown.subParser('hashHTMLBlocks', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLBlocks.before', text, options, globals);\n\n  var blockTags = [\n        'pre',\n        'div',\n        'h1',\n        'h2',\n        'h3',\n        'h4',\n        'h5',\n        'h6',\n        'blockquote',\n        'table',\n        'dl',\n        'ol',\n        'ul',\n        'script',\n        'noscript',\n        'form',\n        'fieldset',\n        'iframe',\n        'math',\n        'style',\n        'section',\n        'header',\n        'footer',\n        'nav',\n        'article',\n        'aside',\n        'address',\n        'audio',\n        'canvas',\n        'figure',\n        'hgroup',\n        'output',\n        'video',\n        'p'\n      ],\n      repFunc = function (wholeMatch, match, left, right) {\n        var txt = wholeMatch;\n        // check if this html element is marked as markdown\n        // if so, it's contents should be parsed as markdown\n        if (left.search(/\\bmarkdown\\b/) !== -1) {\n          txt = left + globals.converter.makeHtml(match) + right;\n        }\n        return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n      };\n\n  if (options.backslashEscapesHTMLTags) {\n    // encode backslash escaped HTML tags\n    text = text.replace(/\\\\<(\\/?[^>]+?)>/g, function (wm, inside) {\n      return '&lt;' + inside + '&gt;';\n    });\n  }\n\n  // hash HTML Blocks\n  for (var i = 0; i < blockTags.length; ++i) {\n\n    var opTagPos,\n        rgx1     = new RegExp('^ {0,3}(<' + blockTags[i] + '\\\\b[^>]*>)', 'im'),\n        patLeft  = '<' + blockTags[i] + '\\\\b[^>]*>',\n        patRight = '</' + blockTags[i] + '>';\n    // 1. Look for the first position of the first opening HTML tag in the text\n    while ((opTagPos = showdown.helper.regexIndexOf(text, rgx1)) !== -1) {\n\n      // if the HTML tag is \\ escaped, we need to escape it and break\n\n\n      //2. Split the text in that position\n      var subTexts = showdown.helper.splitAtIndex(text, opTagPos),\n          //3. Match recursively\n          newSubText1 = showdown.helper.replaceRecursiveRegExp(subTexts[1], repFunc, patLeft, patRight, 'im');\n\n      // prevent an infinite loop\n      if (newSubText1 === subTexts[1]) {\n        break;\n      }\n      text = subTexts[0].concat(newSubText1);\n    }\n  }\n  // HR SPECIAL CASE\n  text = text.replace(/(\\n {0,3}(<(hr)\\b([^<>])*?\\/?>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  // Special case for standalone HTML comments\n  text = showdown.helper.replaceRecursiveRegExp(text, function (txt) {\n    return '\\n\\n¨K' + (globals.gHtmlBlocks.push(txt) - 1) + 'K\\n\\n';\n  }, '^ {0,3}<!--', '-->', 'gm');\n\n  // PHP and ASP-style processor instructions (<?...?> and <%...%>)\n  text = text.replace(/(?:\\n\\n)( {0,3}(?:<([?%])[^\\r]*?\\2>)[ \\t]*(?=\\n{2,}))/g,\n    showdown.subParser('hashElement')(text, options, globals));\n\n  text = globals.converter._dispatch('hashHTMLBlocks.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash span elements that should not be parsed as markdown\n */\nshowdown.subParser('hashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashHTMLSpans.before', text, options, globals);\n\n  function hashHTMLSpan (html) {\n    return '¨C' + (globals.gHtmlSpans.push(html) - 1) + 'C';\n  }\n\n  // Hash Self Closing tags\n  text = text.replace(/<[^>]+?\\/>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags without properties\n  text = text.replace(/<([^>]+?)>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash tags with properties\n  text = text.replace(/<([^>]+?)\\s[^>]+?>[\\s\\S]*?<\\/\\1>/g, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  // Hash self closing tags without />\n  text = text.replace(/<[^>]+?>/gi, function (wm) {\n    return hashHTMLSpan(wm);\n  });\n\n  /*showdown.helper.matchRecursiveRegExp(text, '<code\\\\b[^>]*>', '</code>', 'gi');*/\n\n  text = globals.converter._dispatch('hashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\n/**\n * Unhash HTML spans\n */\nshowdown.subParser('unhashHTMLSpans', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unhashHTMLSpans.before', text, options, globals);\n\n  for (var i = 0; i < globals.gHtmlSpans.length; ++i) {\n    var repText = globals.gHtmlSpans[i],\n        // limiter to prevent infinite loop (assume 10 as limit for recurse)\n        limit = 0;\n\n    while (/¨C(\\d+)C/.test(repText)) {\n      var num = RegExp.$1;\n      repText = repText.replace('¨C' + num + 'C', globals.gHtmlSpans[num]);\n      if (limit === 10) {\n        console.error('maximum nesting of 10 spans reached!!!');\n        break;\n      }\n      ++limit;\n    }\n    text = text.replace('¨C' + i + 'C', repText);\n  }\n\n  text = globals.converter._dispatch('unhashHTMLSpans.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Hash and escape <pre><code> elements that should not be parsed as markdown\n */\nshowdown.subParser('hashPreCodeTags', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('hashPreCodeTags.before', text, options, globals);\n\n  var repFunc = function (wholeMatch, match, left, right) {\n    // encode html entities\n    var codeblock = left + showdown.subParser('encodeCode')(match, options, globals) + right;\n    return '\\n\\n¨G' + (globals.ghCodeBlocks.push({text: wholeMatch, codeblock: codeblock}) - 1) + 'G\\n\\n';\n  };\n\n  // Hash <pre><code>\n  text = showdown.helper.replaceRecursiveRegExp(text, repFunc, '^ {0,3}<pre\\\\b[^>]*>\\\\s*<code\\\\b[^>]*>', '^ {0,3}</code>\\\\s*</pre>', 'gim');\n\n  text = globals.converter._dispatch('hashPreCodeTags.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('headers', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('headers.before', text, options, globals);\n\n  var headerLevelStart = (isNaN(parseInt(options.headerLevelStart))) ? 1 : parseInt(options.headerLevelStart),\n\n      // Set text-style headers:\n      //\tHeader 1\n      //\t========\n      //\n      //\tHeader 2\n      //\t--------\n      //\n      setextRegexH1 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n={2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n=+[ \\t]*\\n+/gm,\n      setextRegexH2 = (options.smoothLivePreview) ? /^(.+)[ \\t]*\\n-{2,}[ \\t]*\\n+/gm : /^(.+)[ \\t]*\\n-+[ \\t]*\\n+/gm;\n\n  text = text.replace(setextRegexH1, function (wholeMatch, m1) {\n\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  text = text.replace(setextRegexH2, function (matchFound, m1) {\n    var spanGamut = showdown.subParser('spanGamut')(m1, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m1) + '\"',\n        hLevel = headerLevelStart + 1,\n        hashBlock = '<h' + hLevel + hID + '>' + spanGamut + '</h' + hLevel + '>';\n    return showdown.subParser('hashBlock')(hashBlock, options, globals);\n  });\n\n  // atx-style headers:\n  //  # Header 1\n  //  ## Header 2\n  //  ## Header 2 with closing hashes ##\n  //  ...\n  //  ###### Header 6\n  //\n  var atxStyle = (options.requireSpaceBeforeHeadingText) ? /^(#{1,6})[ \\t]+(.+?)[ \\t]*#*\\n+/gm : /^(#{1,6})[ \\t]*(.+?)[ \\t]*#*\\n+/gm;\n\n  text = text.replace(atxStyle, function (wholeMatch, m1, m2) {\n    var hText = m2;\n    if (options.customizedHeaderId) {\n      hText = m2.replace(/\\s?\\{([^{]+?)}\\s*$/, '');\n    }\n\n    var span = showdown.subParser('spanGamut')(hText, options, globals),\n        hID = (options.noHeaderId) ? '' : ' id=\"' + headerId(m2) + '\"',\n        hLevel = headerLevelStart - 1 + m1.length,\n        header = '<h' + hLevel + hID + '>' + span + '</h' + hLevel + '>';\n\n    return showdown.subParser('hashBlock')(header, options, globals);\n  });\n\n  function headerId (m) {\n    var title,\n        prefix;\n\n    // It is separate from other options to allow combining prefix and customized\n    if (options.customizedHeaderId) {\n      var match = m.match(/\\{([^{]+?)}\\s*$/);\n      if (match && match[1]) {\n        m = match[1];\n      }\n    }\n\n    title = m;\n\n    // Prefix id to prevent causing inadvertent pre-existing style matches.\n    if (showdown.helper.isString(options.prefixHeaderId)) {\n      prefix = options.prefixHeaderId;\n    } else if (options.prefixHeaderId === true) {\n      prefix = 'section-';\n    } else {\n      prefix = '';\n    }\n\n    if (!options.rawPrefixHeaderId) {\n      title = prefix + title;\n    }\n\n    if (options.ghCompatibleHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '')\n        .replace(/¨T/g, '')\n        .replace(/¨D/g, '')\n        // replace rest of the chars (&~$ are repeated as they might have been escaped)\n        // borrowed from github's redcarpet (some they should produce similar results)\n        .replace(/[&+$,\\/:;=?@\"#{}|^¨~\\[\\]`\\\\*)(%.!'<>]/g, '')\n        .toLowerCase();\n    } else if (options.rawHeaderId) {\n      title = title\n        .replace(/ /g, '-')\n        // replace previously escaped chars (&, ¨ and $)\n        .replace(/&amp;/g, '&')\n        .replace(/¨T/g, '¨')\n        .replace(/¨D/g, '$')\n        // replace \" and '\n        .replace(/[\"']/g, '-')\n        .toLowerCase();\n    } else {\n      title = title\n        .replace(/[^\\w]/g, '')\n        .toLowerCase();\n    }\n\n    if (options.rawPrefixHeaderId) {\n      title = prefix + title;\n    }\n\n    if (globals.hashLinkCounts[title]) {\n      title = title + '-' + (globals.hashLinkCounts[title]++);\n    } else {\n      globals.hashLinkCounts[title] = 1;\n    }\n    return title;\n  }\n\n  text = globals.converter._dispatch('headers.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown link shortcuts into XHTML <a> tags.\n */\nshowdown.subParser('horizontalRule', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('horizontalRule.before', text, options, globals);\n\n  var key = showdown.subParser('hashBlock')('<hr />', options, globals);\n  text = text.replace(/^ {0,2}( ?-){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?\\*){3,}[ \\t]*$/gm, key);\n  text = text.replace(/^ {0,2}( ?_){3,}[ \\t]*$/gm, key);\n\n  text = globals.converter._dispatch('horizontalRule.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Turn Markdown image shortcuts into <img> tags.\n */\nshowdown.subParser('images', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('images.before', text, options, globals);\n\n  var inlineRegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?([\\S]+?(?:\\([\\S]*?\\)[\\S]*?)?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n      crazyRegExp       = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<([^>]*)>(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:(?:([\"'])([^\"]*?)\\6))?[ \\t]?\\)/g,\n      base64RegExp      = /!\\[([^\\]]*?)][ \\t]*()\\([ \\t]?<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*(?:([\"'])([^\"]*?)\\6)?[ \\t]?\\)/g,\n      referenceRegExp   = /!\\[([^\\]]*?)] ?(?:\\n *)?\\[([\\s\\S]*?)]()()()()()/g,\n      refShortcutRegExp = /!\\[([^\\[\\]]+)]()()()()()/g;\n\n  function writeImageTagBase64 (wholeMatch, altText, linkId, url, width, height, m5, title) {\n    url = url.replace(/\\s/g, '');\n    return writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title);\n  }\n\n  function writeImageTag (wholeMatch, altText, linkId, url, width, height, m5, title) {\n\n    var gUrls   = globals.gUrls,\n        gTitles = globals.gTitles,\n        gDims   = globals.gDimensions;\n\n    linkId = linkId.toLowerCase();\n\n    if (!title) {\n      title = '';\n    }\n    // Special case for explicit empty url\n    if (wholeMatch.search(/\\(<?\\s*>? ?(['\"].*['\"])?\\)$/m) > -1) {\n      url = '';\n\n    } else if (url === '' || url === null) {\n      if (linkId === '' || linkId === null) {\n        // lower-case and turn embedded newlines into spaces\n        linkId = altText.toLowerCase().replace(/ ?\\n/g, ' ');\n      }\n      url = '#' + linkId;\n\n      if (!showdown.helper.isUndefined(gUrls[linkId])) {\n        url = gUrls[linkId];\n        if (!showdown.helper.isUndefined(gTitles[linkId])) {\n          title = gTitles[linkId];\n        }\n        if (!showdown.helper.isUndefined(gDims[linkId])) {\n          width = gDims[linkId].width;\n          height = gDims[linkId].height;\n        }\n      } else {\n        return wholeMatch;\n      }\n    }\n\n    altText = altText\n      .replace(/\"/g, '&quot;')\n    //altText = showdown.helper.escapeCharacters(altText, '*_', false);\n      .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n    //url = showdown.helper.escapeCharacters(url, '*_', false);\n    url = url.replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n    var result = '<img src=\"' + url + '\" alt=\"' + altText + '\"';\n\n    if (title && showdown.helper.isString(title)) {\n      title = title\n        .replace(/\"/g, '&quot;')\n      //title = showdown.helper.escapeCharacters(title, '*_', false);\n        .replace(showdown.helper.regexes.asteriskDashAndColon, showdown.helper.escapeCharactersCallback);\n      result += ' title=\"' + title + '\"';\n    }\n\n    if (width && height) {\n      width  = (width === '*') ? 'auto' : width;\n      height = (height === '*') ? 'auto' : height;\n\n      result += ' width=\"' + width + '\"';\n      result += ' height=\"' + height + '\"';\n    }\n\n    result += ' />';\n\n    return result;\n  }\n\n  // First, handle reference-style labeled images: ![alt text][id]\n  text = text.replace(referenceRegExp, writeImageTag);\n\n  // Next, handle inline images:  ![alt text](url =<width>x<height> \"optional title\")\n\n  // base64 encoded images\n  text = text.replace(base64RegExp, writeImageTagBase64);\n\n  // cases with crazy urls like ./image/cat1).png\n  text = text.replace(crazyRegExp, writeImageTag);\n\n  // normal cases\n  text = text.replace(inlineRegExp, writeImageTag);\n\n  // handle reference-style shortcuts: ![img text]\n  text = text.replace(refShortcutRegExp, writeImageTag);\n\n  text = globals.converter._dispatch('images.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('italicsAndBold', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('italicsAndBold.before', text, options, globals);\n\n  // it's faster to have 3 separate regexes for each case than have just one\n  // because of backtracing, in some cases, it could lead to an exponential effect\n  // called \"catastrophic backtrace\". Ominous!\n\n  function parseInside (txt, left, right) {\n    /*\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    */\n    return left + txt + right;\n  }\n\n  // Parse underscores\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong><em>', '</em></strong>');\n    });\n    text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\n      return parseInside (txt, '<strong>', '</strong>');\n    });\n    text = text.replace(/\\b_(\\S[\\s\\S]*?)_\\b/g, function (wm, txt) {\n      return parseInside (txt, '<em>', '</em>');\n    });\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/_([^\\s_][\\s\\S]*?)_/g, function (wm, m) {\n      // !/^_[^_]/.test(m) - test if it doesn't start with __ (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n  // Now parse asterisks\n  if (options.literalMidWordAsterisks) {\n    text = text.replace(/([^*]|^)\\B\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n      return parseInside (txt, lead + '<strong><em>', '</em></strong>');\n    });\n    text = text.replace(/([^*]|^)\\B\\*\\*(\\S[\\s\\S]*?)\\*\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n      return parseInside (txt, lead + '<strong>', '</strong>');\n    });\n    text = text.replace(/([^*]|^)\\B\\*(\\S[\\s\\S]*?)\\*\\B(?!\\*)/g, function (wm, lead, txt) {\n      return parseInside (txt, lead + '<em>', '</em>');\n    });\n  } else {\n    text = text.replace(/\\*\\*\\*(\\S[\\s\\S]*?)\\*\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong><em>', '</em></strong>') : wm;\n    });\n    text = text.replace(/\\*\\*(\\S[\\s\\S]*?)\\*\\*/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? parseInside (m, '<strong>', '</strong>') : wm;\n    });\n    text = text.replace(/\\*([^\\s*][\\s\\S]*?)\\*/g, function (wm, m) {\n      // !/^\\*[^*]/.test(m) - test if it doesn't start with ** (since it seems redundant, we removed it)\n      return (/\\S$/.test(m)) ? parseInside (m, '<em>', '</em>') : wm;\n    });\n  }\n\n\n  text = globals.converter._dispatch('italicsAndBold.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Form HTML ordered (numbered) and unordered (bulleted) lists.\n */\nshowdown.subParser('lists', function (text, options, globals) {\n  'use strict';\n\n  /**\n   * Process the contents of a single ordered or unordered list, splitting it\n   * into individual list items.\n   * @param {string} listStr\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function processListItems (listStr, trimTrailing) {\n    // The $g_list_level global keeps track of when we're inside a list.\n    // Each time we enter a list, we increment it; when we leave a list,\n    // we decrement. If it's zero, we're not in a list anymore.\n    //\n    // We do this because when we're not inside a list, we want to treat\n    // something like this:\n    //\n    //    I recommend upgrading to version\n    //    8. Oops, now this line is treated\n    //    as a sub-list.\n    //\n    // As a single paragraph, despite the fact that the second line starts\n    // with a digit-period-space sequence.\n    //\n    // Whereas when we're inside a list (or sub-list), that line will be\n    // treated as the start of a sub-list. What a kludge, huh? This is\n    // an aspect of Markdown's syntax that's hard to parse perfectly\n    // without resorting to mind-reading. Perhaps the solution is to\n    // change the syntax rules such that sub-lists must start with a\n    // starting cardinal number; e.g. \"1.\" or \"a.\".\n    globals.gListLevel++;\n\n    // trim trailing blank lines:\n    listStr = listStr.replace(/\\n{2,}$/, '\\n');\n\n    // attacklab: add sentinel to emulate \\z\n    listStr += '¨0';\n\n    var rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0| {0,3}([*+-]|\\d+[.])[ \\t]+))/gm,\n        isParagraphed = (/\\n[ \\t]*\\n(?!¨0)/.test(listStr));\n\n    // Since version 1.5, nesting sublists requires 4 spaces (or 1 tab) indentation,\n    // which is a syntax breaking change\n    // activating this option reverts to old behavior\n    if (options.disableForced4SpacesIndentedSublists) {\n      rgx = /(\\n)?(^ {0,3})([*+-]|\\d+[.])[ \\t]+((\\[(x|X| )?])?[ \\t]*[^\\r]+?(\\n{1,2}))(?=\\n*(¨0|\\2([*+-]|\\d+[.])[ \\t]+))/gm;\n    }\n\n    listStr = listStr.replace(rgx, function (wholeMatch, m1, m2, m3, m4, taskbtn, checked) {\n      checked = (checked && checked.trim() !== '');\n\n      var item = showdown.subParser('outdent')(m4, options, globals),\n          bulletStyle = '';\n\n      // Support for github tasklists\n      if (taskbtn && options.tasklists) {\n        bulletStyle = ' class=\"task-list-item\" style=\"list-style-type: none;\"';\n        item = item.replace(/^[ \\t]*\\[(x|X| )?]/m, function () {\n          var otp = '<input type=\"checkbox\" disabled style=\"margin: 0px 0.35em 0.25em -1.6em; vertical-align: middle;\"';\n          if (checked) {\n            otp += ' checked';\n          }\n          otp += '>';\n          return otp;\n        });\n      }\n\n      // ISSUE #312\n      // This input: - - - a\n      // causes trouble to the parser, since it interprets it as:\n      // <ul><li><li><li>a</li></li></li></ul>\n      // instead of:\n      // <ul><li>- - a</li></ul>\n      // So, to prevent it, we will put a marker (¨A)in the beginning of the line\n      // Kind of hackish/monkey patching, but seems more effective than overcomplicating the list parser\n      item = item.replace(/^([-*+]|\\d\\.)[ \\t]+[\\S\\n ]*/g, function (wm2) {\n        return '¨A' + wm2;\n      });\n\n      // m1 - Leading line or\n      // Has a double return (multi paragraph) or\n      // Has sublist\n      if (m1 || (item.search(/\\n{2,}/) > -1)) {\n        item = showdown.subParser('githubCodeBlocks')(item, options, globals);\n        item = showdown.subParser('blockGamut')(item, options, globals);\n      } else {\n        // Recursion for sub-lists:\n        item = showdown.subParser('lists')(item, options, globals);\n        item = item.replace(/\\n$/, ''); // chomp(item)\n        item = showdown.subParser('hashHTMLBlocks')(item, options, globals);\n\n        // Colapse double linebreaks\n        item = item.replace(/\\n\\n+/g, '\\n\\n');\n        if (isParagraphed) {\n          item = showdown.subParser('paragraphs')(item, options, globals);\n        } else {\n          item = showdown.subParser('spanGamut')(item, options, globals);\n        }\n      }\n\n      // now we need to remove the marker (¨A)\n      item = item.replace('¨A', '');\n      // we can finally wrap the line in list item tags\n      item =  '<li' + bulletStyle + '>' + item + '</li>\\n';\n\n      return item;\n    });\n\n    // attacklab: strip sentinel\n    listStr = listStr.replace(/¨0/g, '');\n\n    globals.gListLevel--;\n\n    if (trimTrailing) {\n      listStr = listStr.replace(/\\s+$/, '');\n    }\n\n    return listStr;\n  }\n\n  function styleStartNumber (list, listType) {\n    // check if ol and starts by a number different than 1\n    if (listType === 'ol') {\n      var res = list.match(/^ *(\\d+)\\./);\n      if (res && res[1] !== '1') {\n        return ' start=\"' + res[1] + '\"';\n      }\n    }\n    return '';\n  }\n\n  /**\n   * Check and parse consecutive lists (better fix for issue #142)\n   * @param {string} list\n   * @param {string} listType\n   * @param {boolean} trimTrailing\n   * @returns {string}\n   */\n  function parseConsecutiveLists (list, listType, trimTrailing) {\n    // check if we caught 2 or more consecutive lists by mistake\n    // we use the counterRgx, meaning if listType is UL we look for OL and vice versa\n    var olRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?\\d+\\.[ \\t]/gm : /^ {0,3}\\d+\\.[ \\t]/gm,\n        ulRgx = (options.disableForced4SpacesIndentedSublists) ? /^ ?[*+-][ \\t]/gm : /^ {0,3}[*+-][ \\t]/gm,\n        counterRxg = (listType === 'ul') ? olRgx : ulRgx,\n        result = '';\n\n    if (list.search(counterRxg) !== -1) {\n      (function parseCL (txt) {\n        var pos = txt.search(counterRxg),\n            style = styleStartNumber(list, listType);\n        if (pos !== -1) {\n          // slice\n          result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt.slice(0, pos), !!trimTrailing) + '</' + listType + '>\\n';\n\n          // invert counterType and listType\n          listType = (listType === 'ul') ? 'ol' : 'ul';\n          counterRxg = (listType === 'ul') ? olRgx : ulRgx;\n\n          //recurse\n          parseCL(txt.slice(pos));\n        } else {\n          result += '\\n\\n<' + listType + style + '>\\n' + processListItems(txt, !!trimTrailing) + '</' + listType + '>\\n';\n        }\n      })(list);\n    } else {\n      var style = styleStartNumber(list, listType);\n      result = '\\n\\n<' + listType + style + '>\\n' + processListItems(list, !!trimTrailing) + '</' + listType + '>\\n';\n    }\n\n    return result;\n  }\n\n  /** Start of list parsing **/\n  text = globals.converter._dispatch('lists.before', text, options, globals);\n  // add sentinel to hack around khtml/safari bug:\n  // http://bugs.webkit.org/show_bug.cgi?id=11231\n  text += '¨0';\n\n  if (globals.gListLevel) {\n    text = text.replace(/^(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, list, m2) {\n        var listType = (m2.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, true);\n      }\n    );\n  } else {\n    text = text.replace(/(\\n\\n|^\\n?)(( {0,3}([*+-]|\\d+[.])[ \\t]+)[^\\r]+?(¨0|\\n{2,}(?=\\S)(?![ \\t]*(?:[*+-]|\\d+[.])[ \\t]+)))/gm,\n      function (wholeMatch, m1, list, m3) {\n        var listType = (m3.search(/[*+-]/g) > -1) ? 'ul' : 'ol';\n        return parseConsecutiveLists(list, listType, false);\n      }\n    );\n  }\n\n  // strip sentinel\n  text = text.replace(/¨0/, '');\n  text = globals.converter._dispatch('lists.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Parse metadata at the top of the document\n */\nshowdown.subParser('metadata', function (text, options, globals) {\n  'use strict';\n\n  if (!options.metadata) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('metadata.before', text, options, globals);\n\n  function parseMetadataContents (content) {\n    // raw is raw so it's not changed in any way\n    globals.metadata.raw = content;\n\n    // escape chars forbidden in html attributes\n    // double quotes\n    content = content\n      // ampersand first\n      .replace(/&/g, '&amp;')\n      // double quotes\n      .replace(/\"/g, '&quot;');\n\n    content = content.replace(/\\n {4}/g, ' ');\n    content.replace(/^([\\S ]+): +([\\s\\S]+?)$/gm, function (wm, key, value) {\n      globals.metadata.parsed[key] = value;\n      return '';\n    });\n  }\n\n  text = text.replace(/^\\s*«««+(\\S*?)\\n([\\s\\S]+?)\\n»»»+\\n/, function (wholematch, format, content) {\n    parseMetadataContents(content);\n    return '¨M';\n  });\n\n  text = text.replace(/^\\s*---+(\\S*?)\\n([\\s\\S]+?)\\n---+\\n/, function (wholematch, format, content) {\n    if (format) {\n      globals.metadata.format = format;\n    }\n    parseMetadataContents(content);\n    return '¨M';\n  });\n\n  text = text.replace(/¨M/g, '');\n\n  text = globals.converter._dispatch('metadata.after', text, options, globals);\n  return text;\n});\n\r\n/**\n * Remove one level of line-leading tabs or spaces\n */\nshowdown.subParser('outdent', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('outdent.before', text, options, globals);\n\n  // attacklab: hack around Konqueror 3.5.4 bug:\n  // \"----------bug\".replace(/^-/g,\"\") == \"bug\"\n  text = text.replace(/^(\\t|[ ]{1,4})/gm, '¨0'); // attacklab: g_tab_width\n\n  // attacklab: clean up hack\n  text = text.replace(/¨0/g, '');\n\n  text = globals.converter._dispatch('outdent.after', text, options, globals);\n  return text;\n});\n\r\n/**\n *\n */\nshowdown.subParser('paragraphs', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('paragraphs.before', text, options, globals);\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n\n  var grafs = text.split(/\\n{2,}/g),\n      grafsOut = [],\n      end = grafs.length; // Wrap <p> tags\n\n  for (var i = 0; i < end; i++) {\n    var str = grafs[i];\n    // if this is an HTML marker, copy it\n    if (str.search(/¨(K|G)(\\d+)\\1/g) >= 0) {\n      grafsOut.push(str);\n\n    // test for presence of characters to prevent empty lines being parsed\n    // as paragraphs (resulting in undesired extra empty paragraphs)\n    } else if (str.search(/\\S/) >= 0) {\n      str = showdown.subParser('spanGamut')(str, options, globals);\n      str = str.replace(/^([ \\t]*)/g, '<p>');\n      str += '</p>';\n      grafsOut.push(str);\n    }\n  }\n\n  /** Unhashify HTML blocks */\n  end = grafsOut.length;\n  for (i = 0; i < end; i++) {\n    var blockText = '',\n        grafsOutIt = grafsOut[i],\n        codeFlag = false;\n    // if this is a marker for an html block...\n    // use RegExp.test instead of string.search because of QML bug\n    while (/¨(K|G)(\\d+)\\1/.test(grafsOutIt)) {\n      var delim = RegExp.$1,\n          num   = RegExp.$2;\n\n      if (delim === 'K') {\n        blockText = globals.gHtmlBlocks[num];\n      } else {\n        // we need to check if ghBlock is a false positive\n        if (codeFlag) {\n          // use encoded version of all text\n          blockText = showdown.subParser('encodeCode')(globals.ghCodeBlocks[num].text, options, globals);\n        } else {\n          blockText = globals.ghCodeBlocks[num].codeblock;\n        }\n      }\n      blockText = blockText.replace(/\\$/g, '$$$$'); // Escape any dollar signs\n\n      grafsOutIt = grafsOutIt.replace(/(\\n\\n)?¨(K|G)\\d+\\2(\\n\\n)?/, blockText);\n      // Check if grafsOutIt is a pre->code\n      if (/^<pre\\b[^>]*>\\s*<code\\b[^>]*>/.test(grafsOutIt)) {\n        codeFlag = true;\n      }\n    }\n    grafsOut[i] = grafsOutIt;\n  }\n  text = grafsOut.join('\\n');\n  // Strip leading and trailing lines:\n  text = text.replace(/^\\n+/g, '');\n  text = text.replace(/\\n+$/g, '');\n  return globals.converter._dispatch('paragraphs.after', text, options, globals);\n});\n\r\n/**\n * Run extension\n */\nshowdown.subParser('runExtension', function (ext, text, options, globals) {\n  'use strict';\n\n  if (ext.filter) {\n    text = ext.filter(text, globals.converter, options);\n\n  } else if (ext.regex) {\n    // TODO remove this when old extension loading mechanism is deprecated\n    var re = ext.regex;\n    if (!(re instanceof RegExp)) {\n      re = new RegExp(re, 'g');\n    }\n    text = text.replace(re, ext.replace);\n  }\n\n  return text;\n});\n\r\n/**\n * These are all the transformations that occur *within* block-level\n * tags like paragraphs, headers, and list items.\n */\nshowdown.subParser('spanGamut', function (text, options, globals) {\n  'use strict';\n\n  text = globals.converter._dispatch('spanGamut.before', text, options, globals);\n  text = showdown.subParser('codeSpans')(text, options, globals);\n  text = showdown.subParser('escapeSpecialCharsWithinTagAttributes')(text, options, globals);\n  text = showdown.subParser('encodeBackslashEscapes')(text, options, globals);\n\n  // Process anchor and image tags. Images must come first,\n  // because ![foo][f] looks like an anchor.\n  text = showdown.subParser('images')(text, options, globals);\n  text = showdown.subParser('anchors')(text, options, globals);\n\n  // Make links out of things like `<http://example.com/>`\n  // Must come after anchors, because you can use < and >\n  // delimiters in inline links like [this](<url>).\n  text = showdown.subParser('autoLinks')(text, options, globals);\n  text = showdown.subParser('simplifiedAutoLinks')(text, options, globals);\n  text = showdown.subParser('emoji')(text, options, globals);\n  text = showdown.subParser('underline')(text, options, globals);\n  text = showdown.subParser('italicsAndBold')(text, options, globals);\n  text = showdown.subParser('strikethrough')(text, options, globals);\n  text = showdown.subParser('ellipsis')(text, options, globals);\n\n  // we need to hash HTML tags inside spans\n  text = showdown.subParser('hashHTMLSpans')(text, options, globals);\n\n  // now we encode amps and angles\n  text = showdown.subParser('encodeAmpsAndAngles')(text, options, globals);\n\n  // Do hard breaks\n  if (options.simpleLineBreaks) {\n    // GFM style hard breaks\n    // only add line breaks if the text does not contain a block (special case for lists)\n    if (!/\\n\\n¨K/.test(text)) {\n      text = text.replace(/\\n+/g, '<br />\\n');\n    }\n  } else {\n    // Vanilla hard breaks\n    text = text.replace(/  +\\n/g, '<br />\\n');\n  }\n\n  text = globals.converter._dispatch('spanGamut.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('strikethrough', function (text, options, globals) {\n  'use strict';\n\n  function parseInside (txt) {\n    if (options.simplifiedAutoLink) {\n      txt = showdown.subParser('simplifiedAutoLinks')(txt, options, globals);\n    }\n    return '<del>' + txt + '</del>';\n  }\n\n  if (options.strikethrough) {\n    text = globals.converter._dispatch('strikethrough.before', text, options, globals);\n    text = text.replace(/(?:~){2}([\\s\\S]+?)(?:~){2}/g, function (wm, txt) { return parseInside(txt); });\n    text = globals.converter._dispatch('strikethrough.after', text, options, globals);\n  }\n\n  return text;\n});\n\r\n/**\n * Strips link definitions from text, stores the URLs and titles in\n * hash references.\n * Link defs are in the form: ^[id]: url \"optional title\"\n */\nshowdown.subParser('stripLinkDefinitions', function (text, options, globals) {\n  'use strict';\n\n  var regex       = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?([^>\\s]+)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n+|(?=¨0))/gm,\n      base64Regex = /^ {0,3}\\[(.+)]:[ \\t]*\\n?[ \\t]*<?(data:.+?\\/.+?;base64,[A-Za-z0-9+/=\\n]+?)>?(?: =([*\\d]+[A-Za-z%]{0,4})x([*\\d]+[A-Za-z%]{0,4}))?[ \\t]*\\n?[ \\t]*(?:(\\n*)[\"|'(](.+?)[\"|')][ \\t]*)?(?:\\n\\n|(?=¨0)|(?=\\n\\[))/gm;\n\n  // attacklab: sentinel workarounds for lack of \\A and \\Z, safari\\khtml bug\n  text += '¨0';\n\n  var replaceFunc = function (wholeMatch, linkId, url, width, height, blankLines, title) {\n    linkId = linkId.toLowerCase();\n    if (url.match(/^data:.+?\\/.+?;base64,/)) {\n      // remove newlines\n      globals.gUrls[linkId] = url.replace(/\\s/g, '');\n    } else {\n      globals.gUrls[linkId] = showdown.subParser('encodeAmpsAndAngles')(url, options, globals);  // Link IDs are case-insensitive\n    }\n\n    if (blankLines) {\n      // Oops, found blank lines, so it's not a title.\n      // Put back the parenthetical statement we stole.\n      return blankLines + title;\n\n    } else {\n      if (title) {\n        globals.gTitles[linkId] = title.replace(/\"|'/g, '&quot;');\n      }\n      if (options.parseImgDimensions && width && height) {\n        globals.gDimensions[linkId] = {\n          width:  width,\n          height: height\n        };\n      }\n    }\n    // Completely remove the definition from the text\n    return '';\n  };\n\n  // first we try to find base64 link references\n  text = text.replace(base64Regex, replaceFunc);\n\n  text = text.replace(regex, replaceFunc);\n\n  // attacklab: strip sentinel\n  text = text.replace(/¨0/, '');\n\n  return text;\n});\n\r\nshowdown.subParser('tables', function (text, options, globals) {\n  'use strict';\n\n  if (!options.tables) {\n    return text;\n  }\n\n  var tableRgx       = /^ {0,3}\\|?.+\\|.+\\n {0,3}\\|?[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[\\s\\S]+?(?:\\n\\n|¨0)/gm,\n      //singeColTblRgx = /^ {0,3}\\|.+\\|\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n(?: {0,3}\\|.+\\|\\n)+(?:\\n\\n|¨0)/gm;\n      singeColTblRgx = /^ {0,3}\\|.+\\|[ \\t]*\\n {0,3}\\|[ \\t]*:?[ \\t]*(?:[-=]){2,}[ \\t]*:?[ \\t]*\\|[ \\t]*\\n( {0,3}\\|.+\\|[ \\t]*\\n)*(?:\\n|¨0)/gm;\n\n  function parseStyles (sLine) {\n    if (/^:[ \\t]*--*$/.test(sLine)) {\n      return ' style=\"text-align:left;\"';\n    } else if (/^--*[ \\t]*:[ \\t]*$/.test(sLine)) {\n      return ' style=\"text-align:right;\"';\n    } else if (/^:[ \\t]*--*[ \\t]*:$/.test(sLine)) {\n      return ' style=\"text-align:center;\"';\n    } else {\n      return '';\n    }\n  }\n\n  function parseHeaders (header, style) {\n    var id = '';\n    header = header.trim();\n    // support both tablesHeaderId and tableHeaderId due to error in documentation so we don't break backwards compatibility\n    if (options.tablesHeaderId || options.tableHeaderId) {\n      id = ' id=\"' + header.replace(/ /g, '_').toLowerCase() + '\"';\n    }\n    header = showdown.subParser('spanGamut')(header, options, globals);\n\n    return '<th' + id + style + '>' + header + '</th>\\n';\n  }\n\n  function parseCells (cell, style) {\n    var subText = showdown.subParser('spanGamut')(cell, options, globals);\n    return '<td' + style + '>' + subText + '</td>\\n';\n  }\n\n  function buildTable (headers, cells) {\n    var tb = '<table>\\n<thead>\\n<tr>\\n',\n        tblLgn = headers.length;\n\n    for (var i = 0; i < tblLgn; ++i) {\n      tb += headers[i];\n    }\n    tb += '</tr>\\n</thead>\\n<tbody>\\n';\n\n    for (i = 0; i < cells.length; ++i) {\n      tb += '<tr>\\n';\n      for (var ii = 0; ii < tblLgn; ++ii) {\n        tb += cells[i][ii];\n      }\n      tb += '</tr>\\n';\n    }\n    tb += '</tbody>\\n</table>\\n';\n    return tb;\n  }\n\n  function parseTable (rawTable) {\n    var i, tableLines = rawTable.split('\\n');\n\n    for (i = 0; i < tableLines.length; ++i) {\n      // strip wrong first and last column if wrapped tables are used\n      if (/^ {0,3}\\|/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/^ {0,3}\\|/, '');\n      }\n      if (/\\|[ \\t]*$/.test(tableLines[i])) {\n        tableLines[i] = tableLines[i].replace(/\\|[ \\t]*$/, '');\n      }\n      // parse code spans first, but we only support one line code spans\n      tableLines[i] = showdown.subParser('codeSpans')(tableLines[i], options, globals);\n    }\n\n    var rawHeaders = tableLines[0].split('|').map(function (s) { return s.trim();}),\n        rawStyles = tableLines[1].split('|').map(function (s) { return s.trim();}),\n        rawCells = [],\n        headers = [],\n        styles = [],\n        cells = [];\n\n    tableLines.shift();\n    tableLines.shift();\n\n    for (i = 0; i < tableLines.length; ++i) {\n      if (tableLines[i].trim() === '') {\n        continue;\n      }\n      rawCells.push(\n        tableLines[i]\n          .split('|')\n          .map(function (s) {\n            return s.trim();\n          })\n      );\n    }\n\n    if (rawHeaders.length < rawStyles.length) {\n      return rawTable;\n    }\n\n    for (i = 0; i < rawStyles.length; ++i) {\n      styles.push(parseStyles(rawStyles[i]));\n    }\n\n    for (i = 0; i < rawHeaders.length; ++i) {\n      if (showdown.helper.isUndefined(styles[i])) {\n        styles[i] = '';\n      }\n      headers.push(parseHeaders(rawHeaders[i], styles[i]));\n    }\n\n    for (i = 0; i < rawCells.length; ++i) {\n      var row = [];\n      for (var ii = 0; ii < headers.length; ++ii) {\n        if (showdown.helper.isUndefined(rawCells[i][ii])) {\n\n        }\n        row.push(parseCells(rawCells[i][ii], styles[ii]));\n      }\n      cells.push(row);\n    }\n\n    return buildTable(headers, cells);\n  }\n\n  text = globals.converter._dispatch('tables.before', text, options, globals);\n\n  // find escaped pipe characters\n  text = text.replace(/\\\\(\\|)/g, showdown.helper.escapeCharactersCallback);\n\n  // parse multi column tables\n  text = text.replace(tableRgx, parseTable);\n\n  // parse one column tables\n  text = text.replace(singeColTblRgx, parseTable);\n\n  text = globals.converter._dispatch('tables.after', text, options, globals);\n\n  return text;\n});\n\r\nshowdown.subParser('underline', function (text, options, globals) {\n  'use strict';\n\n  if (!options.underline) {\n    return text;\n  }\n\n  text = globals.converter._dispatch('underline.before', text, options, globals);\n\n  if (options.literalMidWordUnderscores) {\n    text = text.replace(/\\b___(\\S[\\s\\S]*?)___\\b/g, function (wm, txt) {\n      return '<u>' + txt + '</u>';\n    });\n    text = text.replace(/\\b__(\\S[\\s\\S]*?)__\\b/g, function (wm, txt) {\n      return '<u>' + txt + '</u>';\n    });\n  } else {\n    text = text.replace(/___(\\S[\\s\\S]*?)___/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<u>' + m + '</u>' : wm;\n    });\n    text = text.replace(/__(\\S[\\s\\S]*?)__/g, function (wm, m) {\n      return (/\\S$/.test(m)) ? '<u>' + m + '</u>' : wm;\n    });\n  }\n\n  // escape remaining underscores to prevent them being parsed by italic and bold\n  text = text.replace(/(_)/g, showdown.helper.escapeCharactersCallback);\n\n  text = globals.converter._dispatch('underline.after', text, options, globals);\n\n  return text;\n});\n\r\n/**\n * Swap back in all the special characters we've hidden.\n */\nshowdown.subParser('unescapeSpecialChars', function (text, options, globals) {\n  'use strict';\n  text = globals.converter._dispatch('unescapeSpecialChars.before', text, options, globals);\n\n  text = text.replace(/¨E(\\d+)E/g, function (wholeMatch, m1) {\n    var charCodeToReplace = parseInt(m1);\n    return String.fromCharCode(charCodeToReplace);\n  });\n\n  text = globals.converter._dispatch('unescapeSpecialChars.after', text, options, globals);\n  return text;\n});\n\r\nshowdown.subParser('makeMarkdown.blockquote', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    var children = node.childNodes,\n        childrenLength = children.length;\n\n    for (var i = 0; i < childrenLength; ++i) {\n      var innerTxt = showdown.subParser('makeMarkdown.node')(children[i], globals);\n\n      if (innerTxt === '') {\n        continue;\n      }\n      txt += innerTxt;\n    }\n  }\n  // cleanup\n  txt = txt.trim();\n  txt = '> ' + txt.split('\\n').join('\\n> ');\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.codeBlock', function (node, globals) {\n  'use strict';\n\n  var lang = node.getAttribute('language'),\n      num  = node.getAttribute('precodenum');\n  return '```' + lang + '\\n' + globals.preList[num] + '\\n```';\n});\n\r\nshowdown.subParser('makeMarkdown.codeSpan', function (node) {\n  'use strict';\n\n  return '`' + node.innerHTML + '`';\n});\n\r\nshowdown.subParser('makeMarkdown.emphasis', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    txt += '*';\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '*';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.header', function (node, globals, headerLevel) {\n  'use strict';\n\n  var headerMark = new Array(headerLevel + 1).join('#'),\n      txt = '';\n\n  if (node.hasChildNodes()) {\n    txt = headerMark + ' ';\n    var children = node.childNodes,\n        childrenLength = children.length;\n\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.hr', function () {\n  'use strict';\n\n  return '---';\n});\n\r\nshowdown.subParser('makeMarkdown.image', function (node) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasAttribute('src')) {\n    txt += '![' + node.getAttribute('alt') + '](';\n    txt += '<' + node.getAttribute('src') + '>';\n    if (node.hasAttribute('width') && node.hasAttribute('height')) {\n      txt += ' =' + node.getAttribute('width') + 'x' + node.getAttribute('height');\n    }\n\n    if (node.hasAttribute('title')) {\n      txt += ' \"' + node.getAttribute('title') + '\"';\n    }\n    txt += ')';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.links', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes() && node.hasAttribute('href')) {\n    var children = node.childNodes,\n        childrenLength = children.length;\n    txt = '[';\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '](';\n    txt += '<' + node.getAttribute('href') + '>';\n    if (node.hasAttribute('title')) {\n      txt += ' \"' + node.getAttribute('title') + '\"';\n    }\n    txt += ')';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.list', function (node, globals, type) {\n  'use strict';\n\n  var txt = '';\n  if (!node.hasChildNodes()) {\n    return '';\n  }\n  var listItems       = node.childNodes,\n      listItemsLenght = listItems.length,\n      listNum = node.getAttribute('start') || 1;\n\n  for (var i = 0; i < listItemsLenght; ++i) {\n    if (typeof listItems[i].tagName === 'undefined' || listItems[i].tagName.toLowerCase() !== 'li') {\n      continue;\n    }\n\n    // define the bullet to use in list\n    var bullet = '';\n    if (type === 'ol') {\n      bullet = listNum.toString() + '. ';\n    } else {\n      bullet = '- ';\n    }\n\n    // parse list item\n    txt += bullet + showdown.subParser('makeMarkdown.listItem')(listItems[i], globals);\n    ++listNum;\n  }\n\n  // add comment at the end to prevent consecutive lists to be parsed as one\n  txt += '\\n<!-- -->\\n';\n  return txt.trim();\n});\n\r\nshowdown.subParser('makeMarkdown.listItem', function (node, globals) {\n  'use strict';\n\n  var listItemTxt = '';\n\n  var children = node.childNodes,\n      childrenLenght = children.length;\n\n  for (var i = 0; i < childrenLenght; ++i) {\n    listItemTxt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n  }\n  // if it's only one liner, we need to add a newline at the end\n  if (!/\\n$/.test(listItemTxt)) {\n    listItemTxt += '\\n';\n  } else {\n    // it's multiparagraph, so we need to indent\n    listItemTxt = listItemTxt\n      .split('\\n')\n      .join('\\n    ')\n      .replace(/^ {4}$/gm, '')\n      .replace(/\\n\\n+/g, '\\n\\n');\n  }\n\n  return listItemTxt;\n});\n\r\n\n\nshowdown.subParser('makeMarkdown.node', function (node, globals, spansOnly) {\n  'use strict';\n\n  spansOnly = spansOnly || false;\n\n  var txt = '';\n\n  // edge case of text without wrapper paragraph\n  if (node.nodeType === 3) {\n    return showdown.subParser('makeMarkdown.txt')(node, globals);\n  }\n\n  // HTML comment\n  if (node.nodeType === 8) {\n    return '<!--' + node.data + '-->\\n\\n';\n  }\n\n  // process only node elements\n  if (node.nodeType !== 1) {\n    return '';\n  }\n\n  var tagName = node.tagName.toLowerCase();\n\n  switch (tagName) {\n\n    //\n    // BLOCKS\n    //\n    case 'h1':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 1) + '\\n\\n'; }\n      break;\n    case 'h2':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 2) + '\\n\\n'; }\n      break;\n    case 'h3':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 3) + '\\n\\n'; }\n      break;\n    case 'h4':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 4) + '\\n\\n'; }\n      break;\n    case 'h5':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 5) + '\\n\\n'; }\n      break;\n    case 'h6':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.header')(node, globals, 6) + '\\n\\n'; }\n      break;\n\n    case 'p':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.paragraph')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'blockquote':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.blockquote')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'hr':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.hr')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'ol':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ol') + '\\n\\n'; }\n      break;\n\n    case 'ul':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.list')(node, globals, 'ul') + '\\n\\n'; }\n      break;\n\n    case 'precode':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.codeBlock')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'pre':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.pre')(node, globals) + '\\n\\n'; }\n      break;\n\n    case 'table':\n      if (!spansOnly) { txt = showdown.subParser('makeMarkdown.table')(node, globals) + '\\n\\n'; }\n      break;\n\n    //\n    // SPANS\n    //\n    case 'code':\n      txt = showdown.subParser('makeMarkdown.codeSpan')(node, globals);\n      break;\n\n    case 'em':\n    case 'i':\n      txt = showdown.subParser('makeMarkdown.emphasis')(node, globals);\n      break;\n\n    case 'strong':\n    case 'b':\n      txt = showdown.subParser('makeMarkdown.strong')(node, globals);\n      break;\n\n    case 'del':\n      txt = showdown.subParser('makeMarkdown.strikethrough')(node, globals);\n      break;\n\n    case 'a':\n      txt = showdown.subParser('makeMarkdown.links')(node, globals);\n      break;\n\n    case 'img':\n      txt = showdown.subParser('makeMarkdown.image')(node, globals);\n      break;\n\n    default:\n      txt = node.outerHTML + '\\n\\n';\n  }\n\n  // common normalization\n  // TODO eventually\n\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.paragraph', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n  }\n\n  // some text normalization\n  txt = txt.trim();\n\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.pre', function (node, globals) {\n  'use strict';\n\n  var num  = node.getAttribute('prenum');\n  return '<pre>' + globals.preList[num] + '</pre>';\n});\n\r\nshowdown.subParser('makeMarkdown.strikethrough', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    txt += '~~';\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '~~';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.strong', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (node.hasChildNodes()) {\n    txt += '**';\n    var children = node.childNodes,\n        childrenLength = children.length;\n    for (var i = 0; i < childrenLength; ++i) {\n      txt += showdown.subParser('makeMarkdown.node')(children[i], globals);\n    }\n    txt += '**';\n  }\n  return txt;\n});\n\r\nshowdown.subParser('makeMarkdown.table', function (node, globals) {\n  'use strict';\n\n  var txt = '',\n      tableArray = [[], []],\n      headings   = node.querySelectorAll('thead>tr>th'),\n      rows       = node.querySelectorAll('tbody>tr'),\n      i, ii;\n  for (i = 0; i < headings.length; ++i) {\n    var headContent = showdown.subParser('makeMarkdown.tableCell')(headings[i], globals),\n        allign = '---';\n\n    if (headings[i].hasAttribute('style')) {\n      var style = headings[i].getAttribute('style').toLowerCase().replace(/\\s/g, '');\n      switch (style) {\n        case 'text-align:left;':\n          allign = ':---';\n          break;\n        case 'text-align:right;':\n          allign = '---:';\n          break;\n        case 'text-align:center;':\n          allign = ':---:';\n          break;\n      }\n    }\n    tableArray[0][i] = headContent.trim();\n    tableArray[1][i] = allign;\n  }\n\n  for (i = 0; i < rows.length; ++i) {\n    var r = tableArray.push([]) - 1,\n        cols = rows[i].getElementsByTagName('td');\n\n    for (ii = 0; ii < headings.length; ++ii) {\n      var cellContent = ' ';\n      if (typeof cols[ii] !== 'undefined') {\n        cellContent = showdown.subParser('makeMarkdown.tableCell')(cols[ii], globals);\n      }\n      tableArray[r].push(cellContent);\n    }\n  }\n\n  var cellSpacesCount = 3;\n  for (i = 0; i < tableArray.length; ++i) {\n    for (ii = 0; ii < tableArray[i].length; ++ii) {\n      var strLen = tableArray[i][ii].length;\n      if (strLen > cellSpacesCount) {\n        cellSpacesCount = strLen;\n      }\n    }\n  }\n\n  for (i = 0; i < tableArray.length; ++i) {\n    for (ii = 0; ii < tableArray[i].length; ++ii) {\n      if (i === 1) {\n        if (tableArray[i][ii].slice(-1) === ':') {\n          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii].slice(-1), cellSpacesCount - 1, '-') + ':';\n        } else {\n          tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount, '-');\n        }\n      } else {\n        tableArray[i][ii] = showdown.helper.padEnd(tableArray[i][ii], cellSpacesCount);\n      }\n    }\n    txt += '| ' + tableArray[i].join(' | ') + ' |\\n';\n  }\n\n  return txt.trim();\n});\n\r\nshowdown.subParser('makeMarkdown.tableCell', function (node, globals) {\n  'use strict';\n\n  var txt = '';\n  if (!node.hasChildNodes()) {\n    return '';\n  }\n  var children = node.childNodes,\n      childrenLength = children.length;\n\n  for (var i = 0; i < childrenLength; ++i) {\n    txt += showdown.subParser('makeMarkdown.node')(children[i], globals, true);\n  }\n  return txt.trim();\n});\n\r\nshowdown.subParser('makeMarkdown.txt', function (node) {\n  'use strict';\n\n  var txt = node.nodeValue;\n\n  // multiple spaces are collapsed\n  txt = txt.replace(/ +/g, ' ');\n\n  // replace the custom ¨NBSP; with a space\n  txt = txt.replace(/¨NBSP;/g, ' ');\n\n  // \", <, > and & should replace escaped html entities\n  txt = showdown.helper.unescapeHTMLEntities(txt);\n\n  // escape markdown magic characters\n  // emphasis, strong and strikethrough - can appear everywhere\n  // we also escape pipe (|) because of tables\n  // and escape ` because of code blocks and spans\n  txt = txt.replace(/([*_~|`])/g, '\\\\$1');\n\n  // escape > because of blockquotes\n  txt = txt.replace(/^(\\s*)>/g, '\\\\$1>');\n\n  // hash character, only troublesome at the beginning of a line because of headers\n  txt = txt.replace(/^#/gm, '\\\\#');\n\n  // horizontal rules\n  txt = txt.replace(/^(\\s*)([-=]{3,})(\\s*)$/, '$1\\\\$2$3');\n\n  // dot, because of ordered lists, only troublesome at the beginning of a line when preceded by an integer\n  txt = txt.replace(/^( {0,3}\\d+)\\./gm, '$1\\\\.');\n\n  // +, * and -, at the beginning of a line becomes a list, so we need to escape them also (asterisk was already escaped)\n  txt = txt.replace(/^( {0,3})([+-])/gm, '$1\\\\$2');\n\n  // images and links, ] followed by ( is problematic, so we escape it\n  txt = txt.replace(/]([\\s]*)\\(/g, '\\\\]$1\\\\(');\n\n  // reference URIs must also be escaped\n  txt = txt.replace(/^ {0,3}\\[([\\S \\t]*?)]:/gm, '\\\\[$1]:');\n\n  return txt;\n});\n\r\nvar root = this;\n\n// AMD Loader\nif (true) {\n  !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n    'use strict';\n    return showdown;\n  }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n// CommonJS/nodeJS Loader\n} else {}\n}).call(this);\r\n\n//# sourceMappingURL=showdown.js.map\r\n\n\n//# sourceURL=webpack://docbat/./node_modules/showdown/dist/showdown.js?");

/***/ }),

/***/ "./src/docbat-lib.js":
/*!***************************!*\
  !*** ./src/docbat-lib.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var showdown__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! showdown */ \"./node_modules/showdown/dist/showdown.js\");\n/* harmony import */ var showdown__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(showdown__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var bitwrench__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bitwrench */ \"./node_modules/bitwrench/bitwrench.js\");\n/* harmony import */ var bitwrench__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(bitwrench__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n//#!/bin/sh\n//':' //; exec \"$(command -v nodejs || command -v node)\" \"$0\" \"$@\"\n\n//The above shebang allows running on systems whether nodejs exec is called 'node'\n//or called 'nodejs' which is common on many debian systems such as Ubuntu.\n\n//begin actual javascript below\n\n\n//packages\n//var showdown \t= require('showdown');         \t// markdown parser & converter\n//var bw \t\t  \t= require('bitwrench');  \t\t// html page scripting engine\n//var fs \t\t\t= require('fs');\n\n\n\n\nvar docbat =function() { \n\tvar r = {\n\t\temitHTML : function (opts) {\n\t\t\tvar mdconverter \t= new showdown__WEBPACK_IMPORTED_MODULE_0__[\"Converter\"]();\n\t\t\tif (opts.inputFile && opts.outputFile) { // user has provided input and outputfiles...\n\t\t\t\ttry {\n\t\t\t\t \t\tbitwrench__WEBPACK_IMPORTED_MODULE_1__[\"getFile\"](opts.inputFile,function(text){ \n\t\t\t\t\t \t \tif (text.length > 0) {\n\n\t\t\t\t\t \t\t\tvar convertedContent      = mdconverter.makeHtml(text);\n\t\t\t\t\t\t \t\t//Note to user... you now have html converted markdown in the HTML variable.  \n\t\t\t\t\t\t \t\t// if you wish to custimze the html (theme it etc) you can now do that...\n\n\t\t\t\t\t\t \t\t//begin minor formatting stuff using bitwrench to add proper header, footer etc\n\t\t\t\t\t\t \t\t//bitwrench can use JSON to create HTML page content for see bitwrench.js for more details on controlling html output gen\n\t\t\t\t\t\t \t\tvar pageContent = \n\t\t\t\t\t\t \t\t\t[\n\t\t\t\t\t\t \t\t\t\t\"html\", {},\n\t\t\t\t\t\t\t \t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t \t\t[\"head\", {}, \n\t\t\t\t\t\t\t\t\t\t \t\t\t[\n\t\t\t\t\t\t\t\t\t\t \t\t\t\topts.metacontent,\n\t\t\t\t\t\t\t\t\t\t \t\t\t\topts.favicon,\n\t\t\t\t\t\t\t\t\t\t \t\t\t\topts.autogen_cmt,\n\t\t\t\t\t\t\t\t\t\t    \t\t\t[\"style\",{},bitwrench__WEBPACK_IMPORTED_MODULE_1__[\"CSSSimpleStyles\"]()],\n\t\t\t\t\t\t\t\t\t\t    \t\t\t[\"style\",{},bitwrench__WEBPACK_IMPORTED_MODULE_1__[\"makeCSS\"]([[\".dbat\",{\"padding-left\":opts.bodyPaddingHoriz,\"padding-right\":opts.bodyPaddingHoriz}]])]\n\t\t\t\t\t\t\t\t\t\t  \t\t\t]\n\t\t\t\t\t\t\t\t\t\t \t\t],\n\t\t\t\t\t\t\t\t\t\t \t\t[\"body\",{\"class\":\"bw-def-page-setup bw-font-sans-serif dbat\"},\n\t\t\t\t\t\t\t\t\t\t \t\t\t[\n\t\t\t\t\t\t\t\t\t\t \t\t\t\t\"<br><br>\",\n\t\t\t\t\t\t\t\t\t\t \t\t\t\tconvertedContent\n\t\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t  \t\t]\n\t\t\t\t\t\t\t\t\t\t \t]\n\t\t\t\t\t\t\t\t\t];\n\n\t\t\t\t\t\t\t\t//now convert to final html format\n\t\t\t\t\t\t \t\tvar html = bitwrench__WEBPACK_IMPORTED_MODULE_1__[\"html\"](pageContent);\n\n\t\t\t\t\t\t \t\t// save the final html to a file\n\t\t\t\t\t\t \t\tbitwrench__WEBPACK_IMPORTED_MODULE_1__[\"saveClientFile\"](opts.outputFile,html);\n\t\t\t\t\t\t \t}\n\t\t\t\t\t\t \telse {\n\t\t\t\t\t\t \t\tif (opts.verbose != \"silent\")\n\t\t\t\t\t\t \t\t\topts.cons(\"docbat.js error reading input file: \" + opts.inputFile);\n\t\t\t\t\t\t \t}\n\t\t\t\t \t\t});\n\t\t\t\t}\n\t\t\t\tcatch(e) {\n\t\t\t\t\tif (opts.verbose != \"silent\")\n\t\t\t\t\t\topts.cons(\"docbat.js error: \",e);\n\t\t\t\t}\n\n\t\t\t\topts.cons(\"docbat.js : converting \"+opts.inputFile+\" to \" + opts.outputFile);\n\t\t\t}\n\t\t},\n\n\t \tversion : function () {\n\t\t\t    var v = {\n\t\t        \"version\"   : \"0.9\", \n\t\t        \"about\"     : \"docbat is a library for transforming data to html.\", \n\t\t        \"copy\"      : \"(c) M A Chatterjee deftio (at) deftio (dot) com\",    \n\t\t        \"url\"       : \"http://github.com/deftio/bitwrench\",\n\t\t        \"license\"   : \"BSD-2-Clause\"\n\t\t    };\n\t\t    return v;\n\t\t}\n\t}\n\treturn r;\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (docbat());\n\n\n\n\n//# sourceURL=webpack://docbat/./src/docbat-lib.js?");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = require(\"fs\");\n\n//# sourceURL=webpack://docbat/external_%22fs%22?");

/***/ })

/******/ });
});